import _extends from "@babel/runtime/helpers/esm/extends";
import { AddCircleOutlineIcon, RemoveCircleOutlineIcon } from '@bigcommerce/big-design-icons';
import React, { cloneElement, forwardRef, isValidElement, useEffect, useId, useMemo, useState } from 'react';
import { typedMemo, warning } from '../../utils';
import { FormControlDescription, FormControlLabel } from '../Form';
import { useInputErrors } from '../Form/useInputErrors';
import { StyledCounterButton, StyledCounterInput, StyledCounterWrapper } from './styled';
export const StylableCounter = typedMemo(_ref => {
  let {
    min = 0,
    max = 100,
    step = 1,
    forwardedRef,
    label,
    labelId,
    description,
    error,
    disabled,
    value,
    onCountChange,
    ...props
  } = _ref;
  const [focus, setFocus] = useState(false);
  const uniqueCounterId = useId();
  const id = props.id ? props.id : uniqueCounterId;
  const {
    errors
  } = useInputErrors(id, error);
  useEffect(() => {
    if (!Number.isInteger(value)) {
      onCountChange(Math.round(value));
    }
  }, [onCountChange, value]);
  const handleFocus = event => {
    const {
      onFocus
    } = props;
    setFocus(true);
    return onFocus && onFocus(event);
  };
  const handleBlur = event => {
    const {
      onBlur
    } = props;
    setFocus(false);
    return onBlur && onBlur(event);
  };
  const handleIncrease = () => {
    if (value + step > max) {
      return;
    }

    // Checks that the provided value is a multiple of the step
    if (value % step === 0) {
      onCountChange(value + step);
    }
    // If not, returns nearest higher value that is a multiple of the step
    else {
      onCountChange(value + (step - value % step));
    }
  };
  const handleDecrease = () => {
    if (value - step < min) {
      return;
    }

    // Checks that the provided value is a multiple of the step
    if (value % step === 0) {
      onCountChange(value - step);
    }
    // If not, returns nearest lower value that is a multiple of the step
    else {
      onCountChange(value - value % step);
    }
  };
  const handleChange = event => {
    const newValue = Number(event.currentTarget.value);
    if (isNaN(newValue)) {
      return;
    }
    if (!Number.isInteger(newValue)) {
      onCountChange(Math.round(newValue));
    }
    if (newValue >= min && newValue <= max) {
      onCountChange(newValue);
    }
  };
  const handleKeyPress = event => {
    switch (event.key) {
      case 'ArrowUp':
        handleIncrease();
        break;
      case 'ArrowDown':
        handleDecrease();
        break;
      case 'Escape':
        onCountChange(0);
        break;
      default:
        break;
    }
  };
  const renderedLabel = useMemo(() => {
    if (!label) {
      return null;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        renderOptional: !props.required
      }, label);
    }
    if ( /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {
      return /*#__PURE__*/cloneElement(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning('label must be either a string or a FormControlLabel component.');
  }, [id, label, labelId, props.required]);
  const renderedDescription = useMemo(() => {
    if (!description) {
      return null;
    }
    if (typeof description === 'string') {
      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);
    }
    if ( /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {
      return description;
    }
    warning('description must be either a string or a FormControlDescription component.');
  }, [description]);
  return /*#__PURE__*/React.createElement("div", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledCounterWrapper, {
    disabled: disabled,
    error: errors,
    focus: focus
  }, /*#__PURE__*/React.createElement(StyledCounterButton, {
    disabled: disabled || value <= min,
    iconOnly: /*#__PURE__*/React.createElement(RemoveCircleOutlineIcon, {
      title: "Decrease count"
    }),
    onClick: handleDecrease,
    type: "button"
  }), /*#__PURE__*/React.createElement(StyledCounterInput, _extends({}, props, {
    disabled: disabled,
    error: errors,
    id: id,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus,
    onKeyDown: handleKeyPress,
    ref: forwardedRef,
    value: value
  })), /*#__PURE__*/React.createElement(StyledCounterButton, {
    disabled: disabled || value >= max,
    iconOnly: /*#__PURE__*/React.createElement(AddCircleOutlineIcon, {
      title: "Increase count"
    }),
    onClick: handleIncrease,
    type: "button"
  })));
});
export const Counter = typedMemo( /*#__PURE__*/forwardRef((_ref2, ref) => {
  let {
    className,
    style,
    ...props
  } = _ref2;
  return /*#__PURE__*/React.createElement(StylableCounter, _extends({}, props, {
    forwardedRef: ref
  }));
}));