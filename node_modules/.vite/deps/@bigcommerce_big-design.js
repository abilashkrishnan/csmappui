import {
  arrow_default,
  computeStyles_default,
  eventListeners_default,
  flip_default,
  getNodeName,
  hide_default,
  isHTMLElement,
  offset_default,
  popperGenerator,
  popperOffsets_default,
  preventOverflow_default,
  require_warning
} from "./chunk-FG2DGOM2.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-HTHQKSPX.js";
import {
  require_classnames
} from "./chunk-WVQ4NOQP.js";
import {
  require_react_dom
} from "./chunk-MXUSTU7W.js";
import {
  _assertThisInitialized,
  _getPrototypeOf,
  _isNativeReflectConstruct,
  addValues,
  breakpointsOrder,
  clearFix,
  ellipsis,
  hideVisually,
  normalize,
  remCalc,
  rgba,
  theme
} from "./chunk-NEOOFBQ6.js";
import {
  $e,
  Ae,
  We,
  require_react_is,
  styled_components_browser_esm_default
} from "./chunk-44ZKPCK5.js";
import {
  _extends
} from "./chunk-KBUAZBQ3.js";
import {
  _inheritsLoose,
  _setPrototypeOf
} from "./chunk-BE4AG24I.js";
import {
  require_prop_types
} from "./chunk-SKK5TV4B.js";
import {
  require_hoist_non_react_statics_cjs
} from "./chunk-ZQUQ3DEX.js";
import {
  require_react
} from "./chunk-NVDSUZN5.js";
import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-ZC22LKFR.js";

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a3, b2) {
      if (a3 === b2)
        return true;
      if (a3 && b2 && typeof a3 == "object" && typeof b2 == "object") {
        if (a3.constructor !== b2.constructor)
          return false;
        var length, i3, keys;
        if (Array.isArray(a3)) {
          length = a3.length;
          if (length != b2.length)
            return false;
          for (i3 = length; i3-- !== 0; )
            if (!equal(a3[i3], b2[i3]))
              return false;
          return true;
        }
        var it2;
        if (hasMap && a3 instanceof Map && b2 instanceof Map) {
          if (a3.size !== b2.size)
            return false;
          it2 = a3.entries();
          while (!(i3 = it2.next()).done)
            if (!b2.has(i3.value[0]))
              return false;
          it2 = a3.entries();
          while (!(i3 = it2.next()).done)
            if (!equal(i3.value[1], b2.get(i3.value[0])))
              return false;
          return true;
        }
        if (hasSet && a3 instanceof Set && b2 instanceof Set) {
          if (a3.size !== b2.size)
            return false;
          it2 = a3.entries();
          while (!(i3 = it2.next()).done)
            if (!b2.has(i3.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a3) && ArrayBuffer.isView(b2)) {
          length = a3.length;
          if (length != b2.length)
            return false;
          for (i3 = length; i3-- !== 0; )
            if (a3[i3] !== b2[i3])
              return false;
          return true;
        }
        if (a3.constructor === RegExp)
          return a3.source === b2.source && a3.flags === b2.flags;
        if (a3.valueOf !== Object.prototype.valueOf && typeof a3.valueOf === "function" && typeof b2.valueOf === "function")
          return a3.valueOf() === b2.valueOf();
        if (a3.toString !== Object.prototype.toString && typeof a3.toString === "function" && typeof b2.toString === "function")
          return a3.toString() === b2.toString();
        keys = Object.keys(a3);
        length = keys.length;
        if (length !== Object.keys(b2).length)
          return false;
        for (i3 = length; i3-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i3]))
            return false;
        if (hasElementType && a3 instanceof Element)
          return false;
        for (i3 = length; i3-- !== 0; ) {
          if ((keys[i3] === "_owner" || keys[i3] === "__v" || keys[i3] === "__o") && a3.$$typeof) {
            continue;
          }
          if (!equal(a3[keys[i3]], b2[keys[i3]]))
            return false;
        }
        return true;
      }
      return a3 !== a3 && b2 !== b2;
    }
    module.exports = function isEqual7(a3, b2) {
      try {
        return equal(a3, b2);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React147 = require_react();
        var ReactSharedInternals = React147.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error2(format2) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format2, args);
            }
          }
        }
        function printWarning(level, format2, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is2(x2, y3) {
          return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useState29 = React147.useState, useEffect41 = React147.useEffect, useLayoutEffect6 = React147.useLayoutEffect, useDebugValue3 = React147.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React147.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error2("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error2("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState29({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect6(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect41(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue3(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error3) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React147.useSyncExternalStore !== void 0 ? React147.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React147 = require_react();
        var shim = require_shim();
        function is2(x2, y3) {
          return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef22 = React147.useRef, useEffect41 = React147.useEffect, useMemo50 = React147.useMemo, useDebugValue3 = React147.useDebugValue;
        function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual7) {
          var instRef = useRef22(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo50(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual7 !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual7(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual7 !== void 0 && isEqual7(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            };
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
              return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual7]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect41(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue3(value);
          return value;
        }
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/AccordionPanel.js
var import_react66 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Panel/Panel.js
var import_react64 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/mixins/spacings/spacings.js
function getSpacingStyles(spacing, theme2) {
  for (var _len = arguments.length, spacingKeys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    spacingKeys[_key - 2] = arguments[_key];
  }
  if (typeof spacing === "object") {
    return getResponsiveSpacings(spacing, theme2, spacingKeys);
  }
  if (typeof spacing === "string") {
    return getSimpleSpacings(spacing, theme2, spacingKeys);
  }
  return Ae([""]);
}
function isSpacingKey(key, theme2) {
  return key in theme2.spacing;
}
function getSimpleSpacings(spacing, theme2, spacingKeys) {
  return spacingKeys.reduce((acc, spacingKey) => {
    if (isSpacingKey(spacing, theme2)) {
      acc[spacingKey] = theme2.spacing[spacing];
    } else {
      acc[spacingKey] = spacing;
    }
    return acc;
  }, {});
}
function getResponsiveSpacings(responsiveSpacing, theme2, spacingKeys) {
  const breakpointKeys = Object.keys(responsiveSpacing).sort((a3, b2) => (
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(a3) - // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(b2)
  ));
  return breakpointKeys.map((breakpointKey) => Ae(["", "{", "}"], theme2.breakpoints[breakpointKey], getSimpleSpacings(
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    responsiveSpacing[breakpointKey],
    theme2,
    spacingKeys
  )));
}

// node_modules/@bigcommerce/big-design/dist/es/mixins/paddings/paddings.js
var withPaddings = () => Ae(["", ";", ";", ";", ";", ";", ";", ";"], (_ref) => {
  let {
    padding,
    theme: theme2
  } = _ref;
  return padding && getSpacingStyles(padding, theme2, "padding");
}, (_ref2) => {
  let {
    paddingTop,
    theme: theme2
  } = _ref2;
  return paddingTop && getSpacingStyles(paddingTop, theme2, "padding-top");
}, (_ref3) => {
  let {
    paddingRight,
    theme: theme2
  } = _ref3;
  return paddingRight && getSpacingStyles(paddingRight, theme2, "padding-right");
}, (_ref4) => {
  let {
    paddingBottom,
    theme: theme2
  } = _ref4;
  return paddingBottom && getSpacingStyles(paddingBottom, theme2, "padding-bottom");
}, (_ref5) => {
  let {
    paddingLeft,
    theme: theme2
  } = _ref5;
  return paddingLeft && getSpacingStyles(paddingLeft, theme2, "padding-left");
}, (_ref6) => {
  let {
    paddingVertical,
    theme: theme2
  } = _ref6;
  return paddingVertical && getSpacingStyles(paddingVertical, theme2, "padding-top", "padding-bottom");
}, (_ref7) => {
  let {
    paddingHorizontal,
    theme: theme2
  } = _ref7;
  return paddingHorizontal && getSpacingStyles(paddingHorizontal, theme2, "padding-left", "padding-right");
});
function excludePaddingProps(props) {
  const {
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    paddingVertical,
    paddingHorizontal,
    ...rest
  } = props;
  return rest;
}

// node_modules/@bigcommerce/big-design/dist/es/utils/env.js
var isClient = typeof window === "object";
var isProduction = false;

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count2, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count2 === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count2.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/@bigcommerce/big-design/dist/es/utils/localizationProvider/localizationProvider.js
function getTimeIntervals24hr() {
  const times = ["00:00"];
  for (let i3 = 1; i3 < 24; i3++) {
    times.push(`${i3}:00`);
  }
  times.push("23:59");
  return times.map((time) => ({
    value: time,
    content: time
  }));
}
var defaultTimeIntervals = getTimeIntervals24hr();
var createLocalizationProvider = (locale2) => {
  const dayFormatter = Intl.DateTimeFormat(locale2, {
    weekday: "short"
  });
  const monthFormatter = Intl.DateTimeFormat(locale2, {
    month: "long"
  });
  const monthsLong = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((month) => monthFormatter.format(new Date(0, month, 1)));
  const daysShort = [0, 1, 2, 3, 4, 5, 6].map((day) => dayFormatter.format(new Date(0, 9, day, 12)));
  const timeFormatter = Intl.DateTimeFormat(locale2, {
    hour: "numeric",
    minute: "numeric"
  });
  return {
    code: locale2,
    localize: {
      month: (n2) => monthsLong[n2],
      day: (n2) => daysShort[n2],
      ordinalNumber: (n2) => {
        var _a;
        return ((_a = en_US_default.localize) == null ? void 0 : _a.ordinalNumber(n2)) ?? n2;
      },
      era: (n2) => {
        var _a;
        return ((_a = en_US_default.localize) == null ? void 0 : _a.era(n2)) ?? n2;
      },
      quarter: (n2) => {
        var _a;
        return ((_a = en_US_default.localize) == null ? void 0 : _a.quarter(n2)) ?? n2;
      },
      dayPeriod: (n2) => {
        var _a;
        return ((_a = en_US_default.localize) == null ? void 0 : _a.dayPeriod(n2)) ?? n2;
      }
    },
    monthsLong,
    formatLong: en_US_default.formatLong,
    match: en_US_default.match,
    formatTime: timeFormatter.format
  };
};
function getTimeIntervals(localization) {
  const localizedTimeIntervals = defaultTimeIntervals.map((time) => {
    const baseDate = /* @__PURE__ */ new Date();
    const [hour, minute] = time.value.split(":");
    baseDate.setHours(parseInt(hour, 10));
    baseDate.setMinutes(parseInt(minute, 0));
    return {
      content: localization.formatTime(baseDate),
      value: time.value
    };
  });
  return localizedTimeIntervals;
}

// node_modules/@bigcommerce/big-design-icons/dist/es/components/AddCircleOutlineIcon.js
var import_react = __toESM(require_react());

// node_modules/@bigcommerce/big-design-icons/dist/es/base/index.js
function createStyledIcon(Icon56) {
  const StyledIcon = styled_components_browser_esm_default(Icon56).withConfig({
    displayName: "base__StyledIcon",
    componentId: "sc-a9u0e1-0"
  })(["vertical-align:middle;", " ", ""], (_ref) => {
    let {
      color,
      theme: theme2
    } = _ref;
    return color && {
      color: theme2.colors[color]
    };
  }, (_ref2) => {
    let {
      size,
      theme: theme2
    } = _ref2;
    return size && {
      height: typeof size === "number" ? theme2.helpers.remCalc(size) : theme2.spacing[size],
      width: typeof size === "number" ? theme2.helpers.remCalc(size) : theme2.spacing[size]
    };
  });
  StyledIcon.defaultProps = {
    theme,
    size: "xLarge"
  };
  return StyledIcon;
}

// node_modules/@bigcommerce/big-design-icons/dist/es/components/AddCircleOutlineIcon.js
var Icon = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react.default.createElement("title", {
    id: titleId
  }, title) : null, import_react.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react.default.createElement("path", {
    d: "M12 7c-.55 0-1 .45-1 1v3H8c-.55 0-1 .45-1 1s.45 1 1 1h3v3c0 .55.45 1 1 1s1-.45 1-1v-3h3c.55 0 1-.45 1-1s-.45-1-1-1h-3V8c0-.55-.45-1-1-1zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
  }));
};
var IconWithForwardedRef = (0, import_react.forwardRef)((iconProps, ref2) => import_react.default.createElement(Icon, _extends({}, iconProps, {
  svgRef: ref2
})));
var AddCircleOutlineIcon = (0, import_react.memo)(createStyledIcon(IconWithForwardedRef));
AddCircleOutlineIcon.displayName = "AddCircleOutlineIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/AddIcon.js
var import_react2 = __toESM(require_react());
var Icon2 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react2.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react2.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react2.default.createElement("title", {
    id: titleId
  }, title) : null, import_react2.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react2.default.createElement("path", {
    d: "M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z"
  }));
};
var IconWithForwardedRef2 = (0, import_react2.forwardRef)((iconProps, ref2) => import_react2.default.createElement(Icon2, _extends({}, iconProps, {
  svgRef: ref2
})));
var AddIcon = (0, import_react2.memo)(createStyledIcon(IconWithForwardedRef2));
AddIcon.displayName = "AddIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ArrowBackIcon.js
var import_react3 = __toESM(require_react());
var Icon3 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react3.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react3.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react3.default.createElement("title", {
    id: titleId
  }, title) : null, import_react3.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react3.default.createElement("path", {
    d: "M19 11H7.83l4.88-4.88c.39-.39.39-1.03 0-1.42a.996.996 0 00-1.41 0l-6.59 6.59a.996.996 0 000 1.41l6.59 6.59a.996.996 0 101.41-1.41L7.83 13H19c.55 0 1-.45 1-1s-.45-1-1-1z"
  }));
};
var IconWithForwardedRef3 = (0, import_react3.forwardRef)((iconProps, ref2) => import_react3.default.createElement(Icon3, _extends({}, iconProps, {
  svgRef: ref2
})));
var ArrowBackIcon = (0, import_react3.memo)(createStyledIcon(IconWithForwardedRef3));
ArrowBackIcon.displayName = "ArrowBackIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ArrowDownwardIcon.js
var import_react4 = __toESM(require_react());
var Icon4 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react4.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react4.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react4.default.createElement("title", {
    id: titleId
  }, title) : null, import_react4.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react4.default.createElement("path", {
    d: "M11 5v11.17l-4.88-4.88c-.39-.39-1.03-.39-1.42 0a.996.996 0 000 1.41l6.59 6.59c.39.39 1.02.39 1.41 0l6.59-6.59a.996.996 0 10-1.41-1.41L13 16.17V5c0-.55-.45-1-1-1s-1 .45-1 1z"
  }));
};
var IconWithForwardedRef4 = (0, import_react4.forwardRef)((iconProps, ref2) => import_react4.default.createElement(Icon4, _extends({}, iconProps, {
  svgRef: ref2
})));
var ArrowDownwardIcon = (0, import_react4.memo)(createStyledIcon(IconWithForwardedRef4));
ArrowDownwardIcon.displayName = "ArrowDownwardIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ArrowDropDownIcon.js
var import_react5 = __toESM(require_react());
var Icon5 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react5.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react5.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react5.default.createElement("title", {
    id: titleId
  }, title) : null, import_react5.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react5.default.createElement("path", {
    d: "M8.71 11.71l2.59 2.59c.39.39 1.02.39 1.41 0l2.59-2.59c.63-.63.18-1.71-.71-1.71H9.41c-.89 0-1.33 1.08-.7 1.71z"
  }));
};
var IconWithForwardedRef5 = (0, import_react5.forwardRef)((iconProps, ref2) => import_react5.default.createElement(Icon5, _extends({}, iconProps, {
  svgRef: ref2
})));
var ArrowDropDownIcon = (0, import_react5.memo)(createStyledIcon(IconWithForwardedRef5));
ArrowDropDownIcon.displayName = "ArrowDropDownIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ArrowForwardIcon.js
var import_react6 = __toESM(require_react());
var Icon6 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react6.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react6.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react6.default.createElement("title", {
    id: titleId
  }, title) : null, import_react6.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react6.default.createElement("path", {
    d: "M5 13h11.17l-4.88 4.88c-.39.39-.39 1.03 0 1.42.39.39 1.02.39 1.41 0l6.59-6.59a.996.996 0 000-1.41l-6.58-6.6a.996.996 0 10-1.41 1.41L16.17 11H5c-.55 0-1 .45-1 1s.45 1 1 1z"
  }));
};
var IconWithForwardedRef6 = (0, import_react6.forwardRef)((iconProps, ref2) => import_react6.default.createElement(Icon6, _extends({}, iconProps, {
  svgRef: ref2
})));
var ArrowForwardIcon = (0, import_react6.memo)(createStyledIcon(IconWithForwardedRef6));
ArrowForwardIcon.displayName = "ArrowForwardIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ArrowUpwardIcon.js
var import_react7 = __toESM(require_react());
var Icon7 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react7.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react7.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react7.default.createElement("title", {
    id: titleId
  }, title) : null, import_react7.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react7.default.createElement("path", {
    d: "M13 19V7.83l4.88 4.88c.39.39 1.03.39 1.42 0a.996.996 0 000-1.41l-6.59-6.59a.996.996 0 00-1.41 0l-6.6 6.58a.996.996 0 101.41 1.41L11 7.83V19c0 .55.45 1 1 1s1-.45 1-1z"
  }));
};
var IconWithForwardedRef7 = (0, import_react7.forwardRef)((iconProps, ref2) => import_react7.default.createElement(Icon7, _extends({}, iconProps, {
  svgRef: ref2
})));
var ArrowUpwardIcon = (0, import_react7.memo)(createStyledIcon(IconWithForwardedRef7));
ArrowUpwardIcon.displayName = "ArrowUpwardIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/AssignmentIcon.js
var import_react8 = __toESM(require_react());
var Icon8 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react8.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react8.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react8.default.createElement("title", {
    id: titleId
  }, title) : null, import_react8.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react8.default.createElement("path", {
    d: "M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm1 14H8c-.55 0-1-.45-1-1s.45-1 1-1h5c.55 0 1 .45 1 1s-.45 1-1 1zm3-4H8c-.55 0-1-.45-1-1s.45-1 1-1h8c.55 0 1 .45 1 1s-.45 1-1 1zm0-4H8c-.55 0-1-.45-1-1s.45-1 1-1h8c.55 0 1 .45 1 1s-.45 1-1 1z"
  }));
};
var IconWithForwardedRef8 = (0, import_react8.forwardRef)((iconProps, ref2) => import_react8.default.createElement(Icon8, _extends({}, iconProps, {
  svgRef: ref2
})));
var AssignmentIcon = (0, import_react8.memo)(createStyledIcon(IconWithForwardedRef8));
AssignmentIcon.displayName = "AssignmentIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/BaselineHelpIcon.js
var import_react9 = __toESM(require_react());
var Icon9 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react9.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react9.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react9.default.createElement("title", {
    id: titleId
  }, title) : null, import_react9.default.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }), import_react9.default.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"
  }));
};
var IconWithForwardedRef9 = (0, import_react9.forwardRef)((iconProps, ref2) => import_react9.default.createElement(Icon9, _extends({}, iconProps, {
  svgRef: ref2
})));
var BaselineHelpIcon = (0, import_react9.memo)(createStyledIcon(IconWithForwardedRef9));
BaselineHelpIcon.displayName = "BaselineHelpIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/BrushIcon.js
var import_react10 = __toESM(require_react());
var Icon10 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react10.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react10.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react10.default.createElement("title", {
    id: titleId
  }, title) : null, import_react10.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react10.default.createElement("path", {
    d: "M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37l-1.34-1.34a.996.996 0 00-1.41 0L9 12.25 11.75 15l8.96-8.96a.996.996 0 000-1.41z"
  }));
};
var IconWithForwardedRef10 = (0, import_react10.forwardRef)((iconProps, ref2) => import_react10.default.createElement(Icon10, _extends({}, iconProps, {
  svgRef: ref2
})));
var BrushIcon = (0, import_react10.memo)(createStyledIcon(IconWithForwardedRef10));
BrushIcon.displayName = "BrushIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/CheckCircleIcon.js
var import_react11 = __toESM(require_react());
var Icon11 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react11.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react11.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react11.default.createElement("title", {
    id: titleId
  }, title) : null, import_react11.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react11.default.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM9.29 16.29L5.7 12.7a.996.996 0 111.41-1.41L10 14.17l6.88-6.88a.996.996 0 111.41 1.41l-7.59 7.59a.996.996 0 01-1.41 0z"
  }));
};
var IconWithForwardedRef11 = (0, import_react11.forwardRef)((iconProps, ref2) => import_react11.default.createElement(Icon11, _extends({}, iconProps, {
  svgRef: ref2
})));
var CheckCircleIcon = (0, import_react11.memo)(createStyledIcon(IconWithForwardedRef11));
CheckCircleIcon.displayName = "CheckCircleIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/CheckIcon.js
var import_react12 = __toESM(require_react());
var Icon12 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react12.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react12.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react12.default.createElement("title", {
    id: titleId
  }, title) : null, import_react12.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react12.default.createElement("path", {
    d: "M9 16.17L5.53 12.7a.996.996 0 10-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 10-1.41-1.41L9 16.17z"
  }));
};
var IconWithForwardedRef12 = (0, import_react12.forwardRef)((iconProps, ref2) => import_react12.default.createElement(Icon12, _extends({}, iconProps, {
  svgRef: ref2
})));
var CheckIcon = (0, import_react12.memo)(createStyledIcon(IconWithForwardedRef12));
CheckIcon.displayName = "CheckIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ChevronLeftIcon.js
var import_react13 = __toESM(require_react());
var Icon13 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react13.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react13.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react13.default.createElement("title", {
    id: titleId
  }, title) : null, import_react13.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react13.default.createElement("path", {
    d: "M14.71 6.71a.996.996 0 00-1.41 0L8.71 11.3a.996.996 0 000 1.41l4.59 4.59a.996.996 0 101.41-1.41L10.83 12l3.88-3.88c.39-.39.38-1.03 0-1.41z"
  }));
};
var IconWithForwardedRef13 = (0, import_react13.forwardRef)((iconProps, ref2) => import_react13.default.createElement(Icon13, _extends({}, iconProps, {
  svgRef: ref2
})));
var ChevronLeftIcon = (0, import_react13.memo)(createStyledIcon(IconWithForwardedRef13));
ChevronLeftIcon.displayName = "ChevronLeftIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ChevronRightIcon.js
var import_react14 = __toESM(require_react());
var Icon14 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react14.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react14.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react14.default.createElement("title", {
    id: titleId
  }, title) : null, import_react14.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react14.default.createElement("path", {
    d: "M9.29 6.71a.996.996 0 000 1.41L13.17 12l-3.88 3.88a.996.996 0 101.41 1.41l4.59-4.59a.996.996 0 000-1.41L10.7 6.7c-.38-.38-1.02-.38-1.41.01z"
  }));
};
var IconWithForwardedRef14 = (0, import_react14.forwardRef)((iconProps, ref2) => import_react14.default.createElement(Icon14, _extends({}, iconProps, {
  svgRef: ref2
})));
var ChevronRightIcon = (0, import_react14.memo)(createStyledIcon(IconWithForwardedRef14));
ChevronRightIcon.displayName = "ChevronRightIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/CloseIcon.js
var import_react15 = __toESM(require_react());
var Icon15 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react15.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react15.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react15.default.createElement("title", {
    id: titleId
  }, title) : null, import_react15.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react15.default.createElement("path", {
    d: "M18.3 5.71a.996.996 0 00-1.41 0L12 10.59 7.11 5.7A.996.996 0 105.7 7.11L10.59 12 5.7 16.89a.996.996 0 101.41 1.41L12 13.41l4.89 4.89a.996.996 0 101.41-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z"
  }));
};
var IconWithForwardedRef15 = (0, import_react15.forwardRef)((iconProps, ref2) => import_react15.default.createElement(Icon15, _extends({}, iconProps, {
  svgRef: ref2
})));
var CloseIcon = (0, import_react15.memo)(createStyledIcon(IconWithForwardedRef15));
CloseIcon.displayName = "CloseIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/CloudUploadIcon.js
var import_react16 = __toESM(require_react());
var Icon16 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react16.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react16.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react16.default.createElement("title", {
    id: titleId
  }, title) : null, import_react16.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react16.default.createElement("path", {
    d: "M19.35 10.04A7.49 7.49 0 0012 4C9.11 4 6.6 5.64 5.35 8.04A5.994 5.994 0 000 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l4.65-4.65c.2-.2.51-.2.71 0L17 13h-3z"
  }));
};
var IconWithForwardedRef16 = (0, import_react16.forwardRef)((iconProps, ref2) => import_react16.default.createElement(Icon16, _extends({}, iconProps, {
  svgRef: ref2
})));
var CloudUploadIcon = (0, import_react16.memo)(createStyledIcon(IconWithForwardedRef16));
CloudUploadIcon.displayName = "CloudUploadIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/CodeIcon.js
var import_react17 = __toESM(require_react());
var Icon17 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react17.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react17.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react17.default.createElement("title", {
    id: titleId
  }, title) : null, import_react17.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react17.default.createElement("path", {
    d: "M8.7 15.9L4.8 12l3.9-3.9a.984.984 0 000-1.4.984.984 0 00-1.4 0l-4.59 4.59a.996.996 0 000 1.41l4.59 4.6c.39.39 1.01.39 1.4 0a.984.984 0 000-1.4zm6.6 0l3.9-3.9-3.9-3.9a.984.984 0 010-1.4.984.984 0 011.4 0l4.59 4.59c.39.39.39 1.02 0 1.41l-4.59 4.6a.984.984 0 01-1.4 0 .984.984 0 010-1.4z"
  }));
};
var IconWithForwardedRef17 = (0, import_react17.forwardRef)((iconProps, ref2) => import_react17.default.createElement(Icon17, _extends({}, iconProps, {
  svgRef: ref2
})));
var CodeIcon = (0, import_react17.memo)(createStyledIcon(IconWithForwardedRef17));
CodeIcon.displayName = "CodeIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ContentCopyIcon.js
var import_react18 = __toESM(require_react());
var Icon18 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react18.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react18.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react18.default.createElement("title", {
    id: titleId
  }, title) : null, import_react18.default.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }), import_react18.default.createElement("path", {
    d: "M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z"
  }));
};
var IconWithForwardedRef18 = (0, import_react18.forwardRef)((iconProps, ref2) => import_react18.default.createElement(Icon18, _extends({}, iconProps, {
  svgRef: ref2
})));
var ContentCopyIcon = (0, import_react18.memo)(createStyledIcon(IconWithForwardedRef18));
ContentCopyIcon.displayName = "ContentCopyIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/DeleteIcon.js
var import_react19 = __toESM(require_react());
var Icon19 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react19.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react19.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react19.default.createElement("title", {
    id: titleId
  }, title) : null, import_react19.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react19.default.createElement("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z"
  }));
};
var IconWithForwardedRef19 = (0, import_react19.forwardRef)((iconProps, ref2) => import_react19.default.createElement(Icon19, _extends({}, iconProps, {
  svgRef: ref2
})));
var DeleteIcon = (0, import_react19.memo)(createStyledIcon(IconWithForwardedRef19));
DeleteIcon.displayName = "DeleteIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/DragIndicatorIcon.js
var import_react20 = __toESM(require_react());
var Icon20 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react20.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react20.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react20.default.createElement("title", {
    id: titleId
  }, title) : null, import_react20.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react20.default.createElement("path", {
    d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }));
};
var IconWithForwardedRef20 = (0, import_react20.forwardRef)((iconProps, ref2) => import_react20.default.createElement(Icon20, _extends({}, iconProps, {
  svgRef: ref2
})));
var DragIndicatorIcon = (0, import_react20.memo)(createStyledIcon(IconWithForwardedRef20));
DragIndicatorIcon.displayName = "DragIndicatorIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/EditIcon.js
var import_react21 = __toESM(require_react());
var Icon21 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react21.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react21.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react21.default.createElement("title", {
    id: titleId
  }, title) : null, import_react21.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react21.default.createElement("path", {
    d: "M3 17.46v3.04c0 .28.22.5.5.5h3.04c.13 0 .26-.05.35-.15L17.81 9.94l-3.75-3.75L3.15 17.1c-.1.1-.15.22-.15.36zM20.71 7.04a.996.996 0 000-1.41l-2.34-2.34a.996.996 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
  }));
};
var IconWithForwardedRef21 = (0, import_react21.forwardRef)((iconProps, ref2) => import_react21.default.createElement(Icon21, _extends({}, iconProps, {
  svgRef: ref2
})));
var EditIcon = (0, import_react21.memo)(createStyledIcon(IconWithForwardedRef21));
EditIcon.displayName = "EditIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ErrorIcon.js
var import_react22 = __toESM(require_react());
var Icon22 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react22.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react22.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react22.default.createElement("title", {
    id: titleId
  }, title) : null, import_react22.default.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 11c-.55 0-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1 4h-2v-2h2v2z"
  }));
};
var IconWithForwardedRef22 = (0, import_react22.forwardRef)((iconProps, ref2) => import_react22.default.createElement(Icon22, _extends({}, iconProps, {
  svgRef: ref2
})));
var ErrorIcon = (0, import_react22.memo)(createStyledIcon(IconWithForwardedRef22));
ErrorIcon.displayName = "ErrorIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ExpandLessIcon.js
var import_react23 = __toESM(require_react());
var Icon23 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react23.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react23.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react23.default.createElement("title", {
    id: titleId
  }, title) : null, import_react23.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react23.default.createElement("path", {
    d: "M11.29 8.71L6.7 13.3a.996.996 0 101.41 1.41L12 10.83l3.88 3.88a.996.996 0 101.41-1.41L12.7 8.71a.996.996 0 00-1.41 0z"
  }));
};
var IconWithForwardedRef23 = (0, import_react23.forwardRef)((iconProps, ref2) => import_react23.default.createElement(Icon23, _extends({}, iconProps, {
  svgRef: ref2
})));
var ExpandLessIcon = (0, import_react23.memo)(createStyledIcon(IconWithForwardedRef23));
ExpandLessIcon.displayName = "ExpandLessIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ExpandMoreIcon.js
var import_react24 = __toESM(require_react());
var Icon24 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react24.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react24.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react24.default.createElement("title", {
    id: titleId
  }, title) : null, import_react24.default.createElement("path", {
    d: "M24 24H0V0h24v24z",
    fill: "none",
    opacity: 0.87
  }), import_react24.default.createElement("path", {
    d: "M15.88 9.29L12 13.17 8.12 9.29a.996.996 0 10-1.41 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59a.996.996 0 000-1.41c-.39-.38-1.03-.39-1.42 0z"
  }));
};
var IconWithForwardedRef24 = (0, import_react24.forwardRef)((iconProps, ref2) => import_react24.default.createElement(Icon24, _extends({}, iconProps, {
  svgRef: ref2
})));
var ExpandMoreIcon = (0, import_react24.memo)(createStyledIcon(IconWithForwardedRef24));
ExpandMoreIcon.displayName = "ExpandMoreIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/FileCopyIcon.js
var import_react25 = __toESM(require_react());
var Icon25 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react25.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react25.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react25.default.createElement("title", {
    id: titleId
  }, title) : null, import_react25.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react25.default.createElement("path", {
    d: "M15 1H4c-1.1 0-2 .9-2 2v13c0 .55.45 1 1 1s1-.45 1-1V4c0-.55.45-1 1-1h10c.55 0 1-.45 1-1s-.45-1-1-1zm.59 4.59l4.83 4.83c.37.37.58.88.58 1.41V21c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h6.17c.53 0 1.04.21 1.42.59zM15 12h4.5L14 6.5V11c0 .55.45 1 1 1z"
  }));
};
var IconWithForwardedRef25 = (0, import_react25.forwardRef)((iconProps, ref2) => import_react25.default.createElement(Icon25, _extends({}, iconProps, {
  svgRef: ref2
})));
var FileCopyIcon = (0, import_react25.memo)(createStyledIcon(IconWithForwardedRef25));
FileCopyIcon.displayName = "FileCopyIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/FilterListIcon.js
var import_react26 = __toESM(require_react());
var Icon26 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react26.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react26.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react26.default.createElement("title", {
    id: titleId
  }, title) : null, import_react26.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react26.default.createElement("path", {
    d: "M11 18h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM3 7c0 .55.45 1 1 1h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1zm4 6h10c.55 0 1-.45 1-1s-.45-1-1-1H7c-.55 0-1 .45-1 1s.45 1 1 1z"
  }));
};
var IconWithForwardedRef26 = (0, import_react26.forwardRef)((iconProps, ref2) => import_react26.default.createElement(Icon26, _extends({}, iconProps, {
  svgRef: ref2
})));
var FilterListIcon = (0, import_react26.memo)(createStyledIcon(IconWithForwardedRef26));
FilterListIcon.displayName = "FilterListIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/FolderIcon.js
var import_react27 = __toESM(require_react());
var Icon27 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react27.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react27.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react27.default.createElement("title", {
    id: titleId
  }, title) : null, import_react27.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react27.default.createElement("path", {
    d: "M10.59 4.59C10.21 4.21 9.7 4 9.17 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-1.41-1.41z"
  }));
};
var IconWithForwardedRef27 = (0, import_react27.forwardRef)((iconProps, ref2) => import_react27.default.createElement(Icon27, _extends({}, iconProps, {
  svgRef: ref2
})));
var FolderIcon = (0, import_react27.memo)(createStyledIcon(IconWithForwardedRef27));
FolderIcon.displayName = "FolderIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/GetAppIcon.js
var import_react28 = __toESM(require_react());
var Icon28 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react28.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react28.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react28.default.createElement("title", {
    id: titleId
  }, title) : null, import_react28.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react28.default.createElement("path", {
    d: "M16.59 9H15V4c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v5H7.41c-.89 0-1.34 1.08-.71 1.71l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.63-.63.19-1.71-.7-1.71zM5 19c0 .55.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1H6c-.55 0-1 .45-1 1z"
  }));
};
var IconWithForwardedRef28 = (0, import_react28.forwardRef)((iconProps, ref2) => import_react28.default.createElement(Icon28, _extends({}, iconProps, {
  svgRef: ref2
})));
var GetAppIcon = (0, import_react28.memo)(createStyledIcon(IconWithForwardedRef28));
GetAppIcon.displayName = "GetAppIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/HomeIcon.js
var import_react29 = __toESM(require_react());
var Icon29 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react29.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react29.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react29.default.createElement("title", {
    id: titleId
  }, title) : null, import_react29.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react29.default.createElement("path", {
    d: "M10 19v-5h4v5c0 .55.45 1 1 1h3c.55 0 1-.45 1-1v-7h1.7c.46 0 .68-.57.33-.87L12.67 3.6c-.38-.34-.96-.34-1.34 0l-8.36 7.53c-.34.3-.13.87.33.87H5v7c0 .55.45 1 1 1h3c.55 0 1-.45 1-1z"
  }));
};
var IconWithForwardedRef29 = (0, import_react29.forwardRef)((iconProps, ref2) => import_react29.default.createElement(Icon29, _extends({}, iconProps, {
  svgRef: ref2
})));
var HomeIcon = (0, import_react29.memo)(createStyledIcon(IconWithForwardedRef29));
HomeIcon.displayName = "HomeIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/InfoIcon.js
var import_react30 = __toESM(require_react());
var Icon30 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react30.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react30.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react30.default.createElement("title", {
    id: titleId
  }, title) : null, import_react30.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react30.default.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 15c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1-8h-2V7h2v2z"
  }));
};
var IconWithForwardedRef30 = (0, import_react30.forwardRef)((iconProps, ref2) => import_react30.default.createElement(Icon30, _extends({}, iconProps, {
  svgRef: ref2
})));
var InfoIcon = (0, import_react30.memo)(createStyledIcon(IconWithForwardedRef30));
InfoIcon.displayName = "InfoIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/InsertDriveFileIcon.js
var import_react31 = __toESM(require_react());
var Icon31 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react31.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react31.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react31.default.createElement("title", {
    id: titleId
  }, title) : null, import_react31.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react31.default.createElement("path", {
    d: "M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8.83c0-.53-.21-1.04-.59-1.41l-4.83-4.83c-.37-.38-.88-.59-1.41-.59H6zm7 6V3.5L18.5 9H14c-.55 0-1-.45-1-1z"
  }));
};
var IconWithForwardedRef31 = (0, import_react31.forwardRef)((iconProps, ref2) => import_react31.default.createElement(Icon31, _extends({}, iconProps, {
  svgRef: ref2
})));
var InsertDriveFileIcon = (0, import_react31.memo)(createStyledIcon(IconWithForwardedRef31));
InsertDriveFileIcon.displayName = "InsertDriveFileIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/InvertColorsIcon.js
var import_react32 = __toESM(require_react());
var Icon32 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react32.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react32.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react32.default.createElement("title", {
    id: titleId
  }, title) : null, import_react32.default.createElement("path", {
    d: "M24 0H0v24h24V0z",
    fill: "none"
  }), import_react32.default.createElement("path", {
    d: "M6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58s4.1-.78 5.66-2.34c3.12-3.12 3.12-8.19 0-11.31l-4.95-4.95a.996.996 0 00-1.41 0L6.34 7.93zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"
  }));
};
var IconWithForwardedRef32 = (0, import_react32.forwardRef)((iconProps, ref2) => import_react32.default.createElement(Icon32, _extends({}, iconProps, {
  svgRef: ref2
})));
var InvertColorsIcon = (0, import_react32.memo)(createStyledIcon(IconWithForwardedRef32));
InvertColorsIcon.displayName = "InvertColorsIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/KeyboardDoubleArrowLeftIcon.js
var import_react33 = __toESM(require_react());
var Icon33 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react33.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react33.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react33.default.createElement("title", {
    id: titleId
  }, title) : null, import_react33.default.createElement("g", {
    fill: "none"
  }, import_react33.default.createElement("path", {
    d: "M0 0h24v24H0z"
  }), import_react33.default.createElement("path", {
    d: "M0 0h24v24H0z"
  })), import_react33.default.createElement("path", {
    d: "M18.29 17.29a.996.996 0 000-1.41L14.42 12l3.88-3.88a.996.996 0 10-1.41-1.41L12.3 11.3a.996.996 0 000 1.41l4.59 4.59c.38.38 1.01.38 1.4-.01z"
  }), import_react33.default.createElement("path", {
    d: "M11.7 17.29a.996.996 0 000-1.41L7.83 12l3.88-3.88a.996.996 0 10-1.41-1.41L5.71 11.3a.996.996 0 000 1.41l4.59 4.59c.38.38 1.01.38 1.4-.01z"
  }));
};
var IconWithForwardedRef33 = (0, import_react33.forwardRef)((iconProps, ref2) => import_react33.default.createElement(Icon33, _extends({}, iconProps, {
  svgRef: ref2
})));
var KeyboardDoubleArrowLeftIcon = (0, import_react33.memo)(createStyledIcon(IconWithForwardedRef33));
KeyboardDoubleArrowLeftIcon.displayName = "KeyboardDoubleArrowLeftIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/LanguageIcon.js
var import_react34 = __toESM(require_react());
var Icon34 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react34.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react34.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react34.default.createElement("title", {
    id: titleId
  }, title) : null, import_react34.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react34.default.createElement("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95a15.65 15.65 0 00-1.38-3.56A8.03 8.03 0 0118.92 8zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2s.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56A7.987 7.987 0 015.08 16zm2.95-8H5.08a7.987 7.987 0 014.33-3.56A15.65 15.65 0 008.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2s.07-1.35.16-2h4.68c.09.65.16 1.32.16 2s-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95a8.03 8.03 0 01-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2s-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"
  }));
};
var IconWithForwardedRef34 = (0, import_react34.forwardRef)((iconProps, ref2) => import_react34.default.createElement(Icon34, _extends({}, iconProps, {
  svgRef: ref2
})));
var LanguageIcon = (0, import_react34.memo)(createStyledIcon(IconWithForwardedRef34));
LanguageIcon.displayName = "LanguageIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/MenuIcon.js
var import_react35 = __toESM(require_react());
var Icon35 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react35.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react35.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react35.default.createElement("title", {
    id: titleId
  }, title) : null, import_react35.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react35.default.createElement("path", {
    d: "M4 18h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zm0-5h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zM3 7c0 .55.45 1 1 1h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1z"
  }));
};
var IconWithForwardedRef35 = (0, import_react35.forwardRef)((iconProps, ref2) => import_react35.default.createElement(Icon35, _extends({}, iconProps, {
  svgRef: ref2
})));
var MenuIcon = (0, import_react35.memo)(createStyledIcon(IconWithForwardedRef35));
MenuIcon.displayName = "MenuIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/MoreHorizIcon.js
var import_react36 = __toESM(require_react());
var Icon36 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react36.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react36.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react36.default.createElement("title", {
    id: titleId
  }, title) : null, import_react36.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react36.default.createElement("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }));
};
var IconWithForwardedRef36 = (0, import_react36.forwardRef)((iconProps, ref2) => import_react36.default.createElement(Icon36, _extends({}, iconProps, {
  svgRef: ref2
})));
var MoreHorizIcon = (0, import_react36.memo)(createStyledIcon(IconWithForwardedRef36));
MoreHorizIcon.displayName = "MoreHorizIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/NotificationsIcon.js
var import_react37 = __toESM(require_react());
var Icon37 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react37.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react37.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react37.default.createElement("title", {
    id: titleId
  }, title) : null, import_react37.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react37.default.createElement("path", {
    d: "M12 22c1.1 0 2-.9 2-2h-4a2 2 0 002 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-1.29 1.29c-.63.63-.19 1.71.7 1.71h13.17c.89 0 1.34-1.08.71-1.71L18 16z"
  }));
};
var IconWithForwardedRef37 = (0, import_react37.forwardRef)((iconProps, ref2) => import_react37.default.createElement(Icon37, _extends({}, iconProps, {
  svgRef: ref2
})));
var NotificationsIcon = (0, import_react37.memo)(createStyledIcon(IconWithForwardedRef37));
NotificationsIcon.displayName = "NotificationsIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/OpenInNewIcon.js
var import_react38 = __toESM(require_react());
var Icon38 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react38.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react38.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react38.default.createElement("title", {
    id: titleId
  }, title) : null, import_react38.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react38.default.createElement("path", {
    d: "M18 19H6c-.55 0-1-.45-1-1V6c0-.55.45-1 1-1h5c.55 0 1-.45 1-1s-.45-1-1-1H5a2 2 0 00-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-6c0-.55-.45-1-1-1s-1 .45-1 1v5c0 .55-.45 1-1 1zM14 4c0 .55.45 1 1 1h2.59l-9.13 9.13a.996.996 0 101.41 1.41L19 6.41V9c0 .55.45 1 1 1s1-.45 1-1V4c0-.55-.45-1-1-1h-5c-.55 0-1 .45-1 1z"
  }));
};
var IconWithForwardedRef38 = (0, import_react38.forwardRef)((iconProps, ref2) => import_react38.default.createElement(Icon38, _extends({}, iconProps, {
  svgRef: ref2
})));
var OpenInNewIcon = (0, import_react38.memo)(createStyledIcon(IconWithForwardedRef38));
OpenInNewIcon.displayName = "OpenInNewIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/PublicIcon.js
var import_react39 = __toESM(require_react());
var Icon39 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react39.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react39.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react39.default.createElement("title", {
    id: titleId
  }, title) : null, import_react39.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react39.default.createElement("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"
  }));
};
var IconWithForwardedRef39 = (0, import_react39.forwardRef)((iconProps, ref2) => import_react39.default.createElement(Icon39, _extends({}, iconProps, {
  svgRef: ref2
})));
var PublicIcon = (0, import_react39.memo)(createStyledIcon(IconWithForwardedRef39));
PublicIcon.displayName = "PublicIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/ReceiptIcon.js
var import_react40 = __toESM(require_react());
var Icon40 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react40.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react40.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react40.default.createElement("title", {
    id: titleId
  }, title) : null, import_react40.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react40.default.createElement("path", {
    d: "M21 2.21a.47.47 0 00-.35.15l-.79.79c-.2.2-.51.2-.71 0l-.79-.79c-.2-.2-.51-.2-.71 0l-.79.79c-.2.2-.51.2-.71 0l-.79-.79c-.2-.2-.51-.2-.71 0l-.79.79c-.2.2-.51.2-.71 0l-.79-.79c-.2-.2-.51-.2-.71 0l-.79.79c-.2.2-.51.2-.71 0l-.8-.8c-.2-.2-.51-.2-.71 0l-.79.8c-.2.2-.51.2-.71 0l-.79-.8c-.2-.2-.51-.2-.71 0l-.79.8c-.2.2-.51.2-.71 0l-.79-.8A.5.5 0 003 2.21V21.8c.13 0 .26-.05.35-.15l.79-.79c.2-.2.51-.2.71 0l.79.79c.2.2.51.2.71 0l.79-.79c.2-.2.51-.2.71 0l.79.79c.2.2.51.2.71 0l.79-.79c.2-.2.51-.2.71 0l.79.79c.2.2.51.2.71 0l.79-.79c.2-.2.51-.2.71 0l.79.79c.2.2.51.2.71 0l.79-.79c.2-.2.51-.2.71 0l.79.79c.2.2.51.2.71 0l.79-.79c.2-.2.51-.2.71 0l.79.79c.1.1.23.15.35.15V2.21zM17 17H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-4H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-4H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z"
  }));
};
var IconWithForwardedRef40 = (0, import_react40.forwardRef)((iconProps, ref2) => import_react40.default.createElement(Icon40, _extends({}, iconProps, {
  svgRef: ref2
})));
var ReceiptIcon = (0, import_react40.memo)(createStyledIcon(IconWithForwardedRef40));
ReceiptIcon.displayName = "ReceiptIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/RedoIcon.js
var import_react41 = __toESM(require_react());
var Icon41 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react41.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react41.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react41.default.createElement("title", {
    id: titleId
  }, title) : null, import_react41.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react41.default.createElement("path", {
    d: "M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.16 0-7.74 2.42-9.44 5.93-.32.67.04 1.47.75 1.71.59.2 1.23-.08 1.5-.64 1.3-2.66 4.03-4.5 7.19-4.5 1.95 0 3.73.72 5.12 1.88l-1.91 1.91c-.63.63-.19 1.71.7 1.71H21c.55 0 1-.45 1-1V9.41c0-.89-1.08-1.34-1.71-.71l-1.89 1.9z"
  }));
};
var IconWithForwardedRef41 = (0, import_react41.forwardRef)((iconProps, ref2) => import_react41.default.createElement(Icon41, _extends({}, iconProps, {
  svgRef: ref2
})));
var RedoIcon = (0, import_react41.memo)(createStyledIcon(IconWithForwardedRef41));
RedoIcon.displayName = "RedoIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/RemoveCircleOutlineIcon.js
var import_react42 = __toESM(require_react());
var Icon42 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react42.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react42.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react42.default.createElement("title", {
    id: titleId
  }, title) : null, import_react42.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react42.default.createElement("path", {
    d: "M7 12c0 .55.45 1 1 1h8c.55 0 1-.45 1-1s-.45-1-1-1H8c-.55 0-1 .45-1 1zm5-10C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
  }));
};
var IconWithForwardedRef42 = (0, import_react42.forwardRef)((iconProps, ref2) => import_react42.default.createElement(Icon42, _extends({}, iconProps, {
  svgRef: ref2
})));
var RemoveCircleOutlineIcon = (0, import_react42.memo)(createStyledIcon(IconWithForwardedRef42));
RemoveCircleOutlineIcon.displayName = "RemoveCircleOutlineIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/RemoveIcon.js
var import_react43 = __toESM(require_react());
var Icon43 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react43.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react43.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react43.default.createElement("title", {
    id: titleId
  }, title) : null, import_react43.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react43.default.createElement("path", {
    d: "M18 13H6c-.55 0-1-.45-1-1s.45-1 1-1h12c.55 0 1 .45 1 1s-.45 1-1 1z"
  }));
};
var IconWithForwardedRef43 = (0, import_react43.forwardRef)((iconProps, ref2) => import_react43.default.createElement(Icon43, _extends({}, iconProps, {
  svgRef: ref2
})));
var RemoveIcon = (0, import_react43.memo)(createStyledIcon(IconWithForwardedRef43));
RemoveIcon.displayName = "RemoveIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/RestoreIcon.js
var import_react44 = __toESM(require_react());
var Icon44 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react44.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react44.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react44.default.createElement("title", {
    id: titleId
  }, title) : null, import_react44.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react44.default.createElement("path", {
    d: "M13.25 3a9.003 9.003 0 00-9.26 9H2.2c-.45 0-.67.54-.35.85l2.79 2.8c.2.2.51.2.71 0l2.79-2.8c.32-.31.09-.85-.35-.85h-1.8c0-3.9 3.18-7.05 7.1-7 3.72.05 6.85 3.18 6.9 6.9.05 3.91-3.1 7.1-7 7.1-1.61 0-3.1-.55-4.28-1.48a.994.994 0 00-1.32.08c-.42.43-.39 1.13.08 1.5a8.931 8.931 0 005.52 1.9c5.05 0 9.14-4.17 9-9.26-.13-4.69-4.05-8.61-8.74-8.74zm-.51 5c-.41 0-.75.34-.75.75v3.68c0 .35.19.68.49.86l3.12 1.85c.36.21.82.09 1.03-.26.21-.36.09-.82-.26-1.03l-2.88-1.71v-3.4c0-.4-.33-.74-.75-.74z"
  }));
};
var IconWithForwardedRef44 = (0, import_react44.forwardRef)((iconProps, ref2) => import_react44.default.createElement(Icon44, _extends({}, iconProps, {
  svgRef: ref2
})));
var RestoreIcon = (0, import_react44.memo)(createStyledIcon(IconWithForwardedRef44));
RestoreIcon.displayName = "RestoreIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/SearchIcon.js
var import_react45 = __toESM(require_react());
var Icon45 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react45.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react45.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react45.default.createElement("title", {
    id: titleId
  }, title) : null, import_react45.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react45.default.createElement("path", {
    d: "M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }));
};
var IconWithForwardedRef45 = (0, import_react45.forwardRef)((iconProps, ref2) => import_react45.default.createElement(Icon45, _extends({}, iconProps, {
  svgRef: ref2
})));
var SearchIcon = (0, import_react45.memo)(createStyledIcon(IconWithForwardedRef45));
SearchIcon.displayName = "SearchIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/SettingsIcon.js
var import_react46 = __toESM(require_react());
var Icon46 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react46.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react46.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react46.default.createElement("title", {
    id: titleId
  }, title) : null, import_react46.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react46.default.createElement("path", {
    d: "M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65A.488.488 0 0014 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"
  }));
};
var IconWithForwardedRef46 = (0, import_react46.forwardRef)((iconProps, ref2) => import_react46.default.createElement(Icon46, _extends({}, iconProps, {
  svgRef: ref2
})));
var SettingsIcon = (0, import_react46.memo)(createStyledIcon(IconWithForwardedRef46));
SettingsIcon.displayName = "SettingsIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/StarBorderIcon.js
var import_react47 = __toESM(require_react());
var Icon47 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react47.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react47.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react47.default.createElement("title", {
    id: titleId
  }, title) : null, import_react47.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react47.default.createElement("path", {
    d: "M19.65 9.04l-4.84-.42-1.89-4.45c-.34-.81-1.5-.81-1.84 0L9.19 8.63l-4.83.41c-.88.07-1.24 1.17-.57 1.75l3.67 3.18-1.1 4.72c-.2.86.73 1.54 1.49 1.08l4.15-2.5 4.15 2.51c.76.46 1.69-.22 1.49-1.08l-1.1-4.73 3.67-3.18c.67-.58.32-1.68-.56-1.75zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
  }));
};
var IconWithForwardedRef47 = (0, import_react47.forwardRef)((iconProps, ref2) => import_react47.default.createElement(Icon47, _extends({}, iconProps, {
  svgRef: ref2
})));
var StarBorderIcon = (0, import_react47.memo)(createStyledIcon(IconWithForwardedRef47));
StarBorderIcon.displayName = "StarBorderIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/StarHalfIcon.js
var import_react48 = __toESM(require_react());
var Icon48 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react48.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react48.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react48.default.createElement("title", {
    id: titleId
  }, title) : null, import_react48.default.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none"
  }), import_react48.default.createElement("path", {
    d: "M19.65 9.04l-4.84-.42-1.89-4.45c-.34-.81-1.5-.81-1.84 0L9.19 8.63l-4.83.41c-.88.07-1.24 1.17-.57 1.75l3.67 3.18-1.1 4.72c-.2.86.73 1.54 1.49 1.08l4.15-2.5 4.15 2.51c.76.46 1.69-.22 1.49-1.08l-1.1-4.73 3.67-3.18c.67-.58.32-1.68-.56-1.75zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
  }));
};
var IconWithForwardedRef48 = (0, import_react48.forwardRef)((iconProps, ref2) => import_react48.default.createElement(Icon48, _extends({}, iconProps, {
  svgRef: ref2
})));
var StarHalfIcon = (0, import_react48.memo)(createStyledIcon(IconWithForwardedRef48));
StarHalfIcon.displayName = "StarHalfIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/StarIcon.js
var import_react49 = __toESM(require_react());
var Icon49 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react49.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react49.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react49.default.createElement("title", {
    id: titleId
  }, title) : null, import_react49.default.createElement("path", {
    d: "M12 17.27l4.15 2.51c.76.46 1.69-.22 1.49-1.08l-1.1-4.72 3.67-3.18c.67-.58.31-1.68-.57-1.75l-4.83-.41-1.89-4.46c-.34-.81-1.5-.81-1.84 0L9.19 8.63l-4.83.41c-.88.07-1.24 1.17-.57 1.75l3.67 3.18-1.1 4.72c-.2.86.73 1.54 1.49 1.08l4.15-2.5z"
  }));
};
var IconWithForwardedRef49 = (0, import_react49.forwardRef)((iconProps, ref2) => import_react49.default.createElement(Icon49, _extends({}, iconProps, {
  svgRef: ref2
})));
var StarIcon = (0, import_react49.memo)(createStyledIcon(IconWithForwardedRef49));
StarIcon.displayName = "StarIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/StoreIcon.js
var import_react50 = __toESM(require_react());
var Icon50 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react50.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react50.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react50.default.createElement("title", {
    id: titleId
  }, title) : null, import_react50.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react50.default.createElement("path", {
    d: "M5 6h14c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1 .45-1 1s.45 1 1 1zm15.16 1.8c-.09-.46-.5-.8-.98-.8H4.82c-.48 0-.89.34-.98.8l-1 5c-.12.62.35 1.2.98 1.2H4v5c0 .55.45 1 1 1h8c.55 0 1-.45 1-1v-5h4v5c0 .55.45 1 1 1s1-.45 1-1v-5h.18c.63 0 1.1-.58.98-1.2l-1-5zM12 18H6v-4h6v4z"
  }));
};
var IconWithForwardedRef50 = (0, import_react50.forwardRef)((iconProps, ref2) => import_react50.default.createElement(Icon50, _extends({}, iconProps, {
  svgRef: ref2
})));
var StoreIcon = (0, import_react50.memo)(createStyledIcon(IconWithForwardedRef50));
StoreIcon.displayName = "StoreIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/SwapHorizIcon.js
var import_react51 = __toESM(require_react());
var Icon51 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react51.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react51.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react51.default.createElement("title", {
    id: titleId
  }, title) : null, import_react51.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react51.default.createElement("path", {
    d: "M6.14 11.86l-2.78 2.79c-.19.2-.19.51 0 .71l2.78 2.79c.31.32.85.09.85-.35V16H13c.55 0 1-.45 1-1s-.45-1-1-1H6.99v-1.79c0-.45-.54-.67-.85-.35zm14.51-3.21l-2.78-2.79c-.31-.32-.85-.09-.85.35V8H11c-.55 0-1 .45-1 1s.45 1 1 1h6.01v1.79c0 .45.54.67.85.35l2.78-2.79c.2-.19.2-.51.01-.7z"
  }));
};
var IconWithForwardedRef51 = (0, import_react51.forwardRef)((iconProps, ref2) => import_react51.default.createElement(Icon51, _extends({}, iconProps, {
  svgRef: ref2
})));
var SwapHorizIcon = (0, import_react51.memo)(createStyledIcon(IconWithForwardedRef51));
SwapHorizIcon.displayName = "SwapHorizIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/UndoIcon.js
var import_react52 = __toESM(require_react());
var Icon52 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react52.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react52.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react52.default.createElement("title", {
    id: titleId
  }, title) : null, import_react52.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react52.default.createElement("path", {
    d: "M12.5 8c-2.65 0-5.05.99-6.9 2.6L3.71 8.71C3.08 8.08 2 8.52 2 9.41V15c0 .55.45 1 1 1h5.59c.89 0 1.34-1.08.71-1.71l-1.91-1.91c1.39-1.16 3.16-1.88 5.12-1.88 3.16 0 5.89 1.84 7.19 4.5.27.56.91.84 1.5.64.71-.23 1.07-1.04.75-1.72C20.23 10.42 16.65 8 12.5 8z"
  }));
};
var IconWithForwardedRef52 = (0, import_react52.forwardRef)((iconProps, ref2) => import_react52.default.createElement(Icon52, _extends({}, iconProps, {
  svgRef: ref2
})));
var UndoIcon = (0, import_react52.memo)(createStyledIcon(IconWithForwardedRef52));
UndoIcon.displayName = "UndoIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/VisibilityOffIcon.js
var import_react53 = __toESM(require_react());
var Icon53 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react53.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react53.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react53.default.createElement("title", {
    id: titleId
  }, title) : null, import_react53.default.createElement("path", {
    d: "M0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0z",
    fill: "none"
  }), import_react53.default.createElement("path", {
    d: "M12 6.5c2.76 0 5 2.24 5 5 0 .51-.1 1-.24 1.46l3.06 3.06c1.39-1.23 2.49-2.77 3.18-4.53C21.27 7.11 17 4 12 4c-1.27 0-2.49.2-3.64.57l2.17 2.17c.47-.14.96-.24 1.47-.24zM2.71 3.16a.996.996 0 000 1.41l1.97 1.97A11.892 11.892 0 001 11.5C2.73 15.89 7 19 12 19c1.52 0 2.97-.3 4.31-.82l2.72 2.72a.996.996 0 101.41-1.41L4.13 3.16c-.39-.39-1.03-.39-1.42 0zM12 16.5c-2.76 0-5-2.24-5-5 0-.77.18-1.5.49-2.14l1.57 1.57c-.03.18-.06.37-.06.57 0 1.66 1.34 3 3 3 .2 0 .38-.03.57-.07L14.14 16c-.65.32-1.37.5-2.14.5zm2.97-5.33a2.97 2.97 0 00-2.64-2.64l2.64 2.64z"
  }));
};
var IconWithForwardedRef53 = (0, import_react53.forwardRef)((iconProps, ref2) => import_react53.default.createElement(Icon53, _extends({}, iconProps, {
  svgRef: ref2
})));
var VisibilityOffIcon = (0, import_react53.memo)(createStyledIcon(IconWithForwardedRef53));
VisibilityOffIcon.displayName = "VisibilityOffIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/VisibilityIcon.js
var import_react54 = __toESM(require_react());
var Icon54 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react54.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react54.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react54.default.createElement("title", {
    id: titleId
  }, title) : null, import_react54.default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), import_react54.default.createElement("path", {
    d: "M12 4C7 4 2.73 7.11 1 11.5 2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4zm0 12.5c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"
  }));
};
var IconWithForwardedRef54 = (0, import_react54.forwardRef)((iconProps, ref2) => import_react54.default.createElement(Icon54, _extends({}, iconProps, {
  svgRef: ref2
})));
var VisibilityIcon = (0, import_react54.memo)(createStyledIcon(IconWithForwardedRef54));
VisibilityIcon.displayName = "VisibilityIcon";

// node_modules/@bigcommerce/big-design-icons/dist/es/components/WarningIcon.js
var import_react55 = __toESM(require_react());
var Icon55 = (_ref) => {
  let {
    svgRef,
    title,
    theme: theme2,
    ...props
  } = _ref;
  const uniqueTitleId = (0, import_react55.useId)();
  const titleId = title ? props.titleId || uniqueTitleId : void 0;
  const ariaHidden = titleId ? void 0 : true;
  return import_react55.default.createElement("svg", _extends({
    "aria-hidden": ariaHidden,
    "aria-labelledby": titleId,
    fill: "currentColor",
    height: 24,
    ref: svgRef,
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 24 24",
    width: 24
  }, props), title ? import_react55.default.createElement("title", {
    id: titleId
  }, title) : null, import_react55.default.createElement("path", {
    d: "M4.47 21h15.06c1.54 0 2.5-1.67 1.73-3L13.73 4.99c-.77-1.33-2.69-1.33-3.46 0L2.74 18c-.77 1.33.19 3 1.73 3zM12 14c-.55 0-1-.45-1-1v-2c0-.55.45-1 1-1s1 .45 1 1v2c0 .55-.45 1-1 1zm1 4h-2v-2h2v2z"
  }));
};
var IconWithForwardedRef55 = (0, import_react55.forwardRef)((iconProps, ref2) => import_react55.default.createElement(Icon55, _extends({}, iconProps, {
  svgRef: ref2
})));
var WarningIcon = (0, import_react55.memo)(createStyledIcon(IconWithForwardedRef55));
WarningIcon.displayName = "WarningIcon";

// node_modules/@bigcommerce/big-design/dist/es/utils/messagingHelpers.js
var import_react56 = __toESM(require_react());
var getMessagingIcon = (type, condensed) => {
  const size = condensed ? "large" : "xLarge";
  switch (type) {
    case "success":
      return import_react56.default.createElement(CheckCircleIcon, {
        color: "success",
        size
      });
    case "error":
      return import_react56.default.createElement(ErrorIcon, {
        color: "danger",
        size
      });
    case "warning":
      return import_react56.default.createElement(WarningIcon, {
        color: "warning50",
        size
      });
    case "info":
      return import_react56.default.createElement(InfoIcon, {
        color: "primary60",
        size
      });
  }
};
var getBorderStyle = (type, theme2) => Ae(["", ";", ";", ";", ";"], type === "success" && Ae(["border-left:", " solid ", ";"], theme2.spacing.xxSmall, theme2.colors.success), type === "error" && Ae(["border-left:", " solid ", ";"], theme2.spacing.xxSmall, theme2.colors.danger), type === "warning" && Ae(["border-left:", " solid ", ";"], theme2.spacing.xxSmall, theme2.colors.warning50), type === "info" && Ae(["border-left:", " solid ", ";"], theme2.spacing.xxSmall, theme2.colors.primary60));
var getActionVariant = (variant) => variant === "primary" ? "secondary" : variant;

// node_modules/@bigcommerce/big-design/dist/es/utils/treeHelpers.js
function depthFirstSearch(nodes, predicate) {
  let greedy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  let list = [];
  for (const node of nodes) {
    if (predicate(node)) {
      if (greedy) {
        return node;
      }
      list.push(node);
    }
    if (node.children && node.children.length > 0) {
      if (greedy) {
        return depthFirstSearch(node.children, predicate, greedy);
      }
      const nestedDfs = depthFirstSearch(node.children, predicate, greedy);
      if (nestedDfs) {
        list = list.concat(nestedDfs);
      }
    }
  }
  return greedy ? null : list;
}

// node_modules/@bigcommerce/big-design/dist/es/utils/typedMemo.js
var import_react57 = __toESM(require_react());
var typedMemo = import_react57.memo;

// node_modules/@bigcommerce/big-design/dist/es/utils/warning/warning.js
var warning = (message) => {
  if (!isProduction) {
    const text = `Warning: ${message}`;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x2) {
    }
  }
};

// node_modules/@bigcommerce/big-design/dist/es/components/Button/Button.js
var import_react62 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressCircle/ProgressCircle.js
var import_react58 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressCircle/constants.js
var CIRCLE_DIMENSIONS = {
  large: 80,
  medium: 48,
  small: 32,
  xSmall: 24,
  xxSmall: 16
};
var CIRCLE_STROKE_WIDTHS = {
  large: 8,
  medium: 4,
  small: 4,
  xSmall: 3,
  xxSmall: 2
};
var CIRCLE_CIRCUMFERENCES = {
  large: (CIRCLE_DIMENSIONS.large / 2 - CIRCLE_STROKE_WIDTHS.large / 2) * 2 * Math.PI,
  medium: (CIRCLE_DIMENSIONS.medium / 2 - CIRCLE_STROKE_WIDTHS.medium / 2) * 2 * Math.PI,
  small: (CIRCLE_DIMENSIONS.small / 2 - CIRCLE_STROKE_WIDTHS.small / 2) * 2 * Math.PI,
  xSmall: (CIRCLE_DIMENSIONS.xSmall / 2 - CIRCLE_STROKE_WIDTHS.xSmall / 2) * 2 * Math.PI,
  xxSmall: (CIRCLE_DIMENSIONS.xxSmall / 2 - CIRCLE_STROKE_WIDTHS.xxSmall / 2) * 2 * Math.PI
};

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressCircle/styled.js
var StyledProgressCircle = styled_components_browser_esm_default.svg.withConfig({
  displayName: "styled__StyledProgressCircle",
  componentId: "sc-n3drku-0"
})(["", ""], (_ref) => {
  let {
    size,
    theme: theme2
  } = _ref;
  return Ae(["height:", ";width:", ";"], theme2.helpers.remCalc(getDimensions(size)), theme2.helpers.remCalc(getDimensions(size)));
});
var StyledCircle = styled_components_browser_esm_default.circle.attrs((_ref2) => {
  let {
    size,
    theme: theme2
  } = _ref2;
  return {
    // rem not usable for circle svg cx, cy, and r values in Safari 14
    cx: theme2.helpers.emCalc(getDimensions(size) / 2),
    cy: theme2.helpers.emCalc(getDimensions(size) / 2),
    r: theme2.helpers.emCalc(getDimensions(size) / 2 - getStrokeWidth(size) / 2)
  };
}).withConfig({
  displayName: "styled__StyledCircle",
  componentId: "sc-n3drku-1"
})(["fill:transparent;stroke-width:", ";stroke:", ";"], (_ref3) => {
  let {
    size,
    theme: theme2
  } = _ref3;
  return theme2.helpers.remCalc(getStrokeWidth(size));
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.colors.secondary20;
});
var StyledCircleFiller = styled_components_browser_esm_default(StyledCircle).withConfig({
  displayName: "styled__StyledCircleFiller",
  componentId: "sc-n3drku-2"
})(["stroke-dasharray:", ";stroke:", ";transform-origin:50% 50%;", ";"], (_ref5) => {
  let {
    size
  } = _ref5;
  return getStrokeDashArray(size);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.colors.primary;
}, (_ref7) => {
  let {
    percent,
    size
  } = _ref7;
  return typeof percent === "number" ? Ae(["stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], typeof percent === "number" ? `${fillLength(percent, size)}` : 0) : Ae(["animation:", " 1s ease-out infinite;stroke-dashoffset:", ";transform:rotate(-90deg);transition:stroke-dashoffset 0.35s;"], spin(size), fillLength(0, size));
});
var StyledText = styled_components_browser_esm_default.text.attrs(() => ({
  dominantBaseline: "central",
  textAnchor: "middle",
  x: "50%",
  y: "50%"
})).withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-n3drku-3"
})(["font-size:", ";font-weight:", ";"], (_ref8) => {
  let {
    size,
    theme: theme2
  } = _ref8;
  return size === "large" ? theme2.typography.fontSize.large : theme2.typography.fontSize.small;
}, (_ref9) => {
  let {
    size,
    theme: theme2
  } = _ref9;
  return size === "large" ? theme2.typography.fontWeight.semiBold : theme2.typography.fontWeight.regular;
});
var spin = (size) => We(["0%{stroke-dashoffset:", ";transform:rotate(-90deg);}50%{stroke-dashoffset:", ";}100%{stroke-dashoffset:", ";transform:rotate(270deg);}"], fillLength(0, size) * -1, fillLength(37.5, size) * -1, fillLength(0, size) * -1);
function getDimensions() {
  let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "medium";
  return CIRCLE_DIMENSIONS[size];
}
function getStrokeDashArray() {
  let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "medium";
  return `${CIRCLE_CIRCUMFERENCES[size]} ${CIRCLE_CIRCUMFERENCES[size]}`;
}
function getStrokeWidth() {
  let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "medium";
  return CIRCLE_STROKE_WIDTHS[size];
}
function fillLength(percent) {
  let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "medium";
  return CIRCLE_CIRCUMFERENCES[size] - percent / 100 * CIRCLE_CIRCUMFERENCES[size];
}
StyledProgressCircle.defaultProps = {
  theme
};
StyledCircle.defaultProps = {
  theme
};
StyledCircleFiller.defaultProps = {
  theme
};
StyledText.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressCircle/ProgressCircle.js
var ProgressCircle = typedMemo((_ref) => {
  let {
    error: error2,
    percent,
    size = "medium"
  } = _ref;
  const dimensions = CIRCLE_DIMENSIONS[size];
  const renderedError = (0, import_react58.useMemo)(() => {
    return import_react58.default.createElement(ErrorIcon, {
      "aria-valuemax": 100,
      "aria-valuemin": 0,
      "aria-valuenow": percent || 0,
      "aria-valuetext": "Error",
      color: "danger",
      role: "progressbar",
      size: dimensions
    });
  }, [percent, dimensions]);
  const renderedSuccess = (0, import_react58.useMemo)(() => {
    return import_react58.default.createElement(CheckCircleIcon, {
      "aria-valuemax": 100,
      "aria-valuemin": 0,
      "aria-valuenow": 100,
      color: "success",
      role: "progressbar",
      size: dimensions
    });
  }, [dimensions]);
  const renderedCircle = (0, import_react58.useMemo)(() => {
    if (typeof percent !== "number") {
      return import_react58.default.createElement(StyledProgressCircle, {
        role: "progressbar",
        size
      }, import_react58.default.createElement(StyledCircle, {
        size
      }), import_react58.default.createElement(StyledCircleFiller, {
        size
      }));
    }
    if (percent === 100) {
      return renderedSuccess;
    }
    return import_react58.default.createElement(StyledProgressCircle, {
      "aria-valuemax": 100,
      "aria-valuemin": 0,
      "aria-valuenow": percent,
      role: "progressbar",
      size
    }, import_react58.default.createElement(StyledCircle, {
      size
    }), import_react58.default.createElement(StyledCircleFiller, {
      percent,
      size
    }), (size === "large" || size === "medium") && import_react58.default.createElement(StyledText, {
      size
    }, percent ? Math.floor(percent) : 0, "%"));
  }, [percent, size, renderedSuccess]);
  return error2 ? renderedError : renderedCircle;
});

// node_modules/@bigcommerce/big-design/dist/es/mixins/display/display.js
var withDisplay = () => Ae(["", ";"], (_ref) => {
  let {
    display,
    theme: theme2
  } = _ref;
  return display && getDisplayStyles(display, theme2, "display");
});
var getDisplayStyles = (displayProp, theme2, cssKey) => {
  if (typeof displayProp === "object") {
    return getResponsiveDisplay(displayProp, theme2, cssKey);
  }
  if (typeof displayProp === "string" || typeof displayProp === "number") {
    return getSimpleDisplay(displayProp, cssKey);
  }
  return [];
};
var getSimpleDisplay = (displayProp, cssKey) => Ae(["", ":", ""], cssKey, displayProp);
var getResponsiveDisplay = (displayProp, theme2, cssKey) => {
  const breakpointKeys = Object.keys(displayProp).sort((firstBreakpoint, secondBreakpoint) => (
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(firstBreakpoint) - // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(secondBreakpoint)
  ));
  return breakpointKeys.map((breakpointKey) => Ae(
    ["", "{", " ", "}"],
    theme2.breakpoints[breakpointKey],
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
    "",
    getSimpleDisplay(displayProp[breakpointKey], cssKey)
  ));
};

// node_modules/@bigcommerce/big-design/dist/es/mixins/margins/margins.js
var withMargins = () => Ae(["", ";", ";", ";", ";", ";", ";", ";"], (_ref) => {
  let {
    margin,
    theme: theme2
  } = _ref;
  return margin && getSpacingStyles(margin, theme2, "margin");
}, (_ref2) => {
  let {
    marginTop,
    theme: theme2
  } = _ref2;
  return marginTop && getSpacingStyles(marginTop, theme2, "margin-top");
}, (_ref3) => {
  let {
    marginRight,
    theme: theme2
  } = _ref3;
  return marginRight && getSpacingStyles(marginRight, theme2, "margin-right");
}, (_ref4) => {
  let {
    marginBottom,
    theme: theme2
  } = _ref4;
  return marginBottom && getSpacingStyles(marginBottom, theme2, "margin-bottom");
}, (_ref5) => {
  let {
    marginLeft,
    theme: theme2
  } = _ref5;
  return marginLeft && getSpacingStyles(marginLeft, theme2, "margin-left");
}, (_ref6) => {
  let {
    marginVertical,
    theme: theme2
  } = _ref6;
  return marginVertical && getSpacingStyles(marginVertical, theme2, "margin-top", "margin-bottom");
}, (_ref7) => {
  let {
    marginHorizontal,
    theme: theme2
  } = _ref7;
  return marginHorizontal && getSpacingStyles(marginHorizontal, theme2, "margin-left", "margin-right");
});
function excludeMarginProps(props) {
  const {
    margin,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    marginVertical,
    marginHorizontal,
    ...rest
  } = props;
  return rest;
}

// node_modules/@bigcommerce/big-design/dist/es/mixins/transitions/transitions.js
var Timings = {
  short: "150ms"
};
var Easings = {
  hover: "ease-out"
};
var withTransition = function(properties) {
  let duration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Timings.short;
  let ease2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Easings.hover;
  return Ae(["transition:all ", " ", ";transition-property:", ";"], duration, ease2, properties.join(", "));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/Flex.js
var import_react60 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Box/Box.js
var import_react59 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Box/styled.js
var StyledBox = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledBox",
  componentId: "sc-sj5f1m-0"
})(["", " ", " ", " box-sizing:border-box;", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";"], withDisplay(), withMargins(), withPaddings(), (_ref) => {
  let {
    clearfix
  } = _ref;
  return clearfix && clearFix();
}, (_ref2) => {
  let {
    backgroundColor,
    theme: theme2
  } = _ref2;
  return backgroundColor && Ae(["background-color:", ";"], theme2.colors[backgroundColor]);
}, (_ref3) => {
  let {
    shadow,
    theme: theme2
  } = _ref3;
  return shadow && theme2.shadow[shadow];
}, (_ref4) => {
  let {
    border,
    theme: theme2
  } = _ref4;
  return border && Ae(["border:", ";"], theme2.border[border]);
}, (_ref5) => {
  let {
    borderTop,
    theme: theme2
  } = _ref5;
  return borderTop && Ae(["border-top:", ";"], theme2.border[borderTop]);
}, (_ref6) => {
  let {
    borderRight,
    theme: theme2
  } = _ref6;
  return borderRight && Ae(["border-right:", ";"], theme2.border[borderRight]);
}, (_ref7) => {
  let {
    borderBottom,
    theme: theme2
  } = _ref7;
  return borderBottom && Ae(["border-bottom:", ";"], theme2.border[borderBottom]);
}, (_ref8) => {
  let {
    borderLeft,
    theme: theme2
  } = _ref8;
  return borderLeft && Ae(["border-left:", ";"], theme2.border[borderLeft]);
}, (_ref9) => {
  let {
    borderRadius,
    theme: theme2
  } = _ref9;
  return borderRadius && Ae(["border-radius:", ";"], theme2.borderRadius[borderRadius]);
}, (_ref10) => {
  let {
    zIndex,
    theme: theme2
  } = _ref10;
  return zIndex && Ae(["z-index:", ";"], theme2.zIndex[zIndex]);
});
StyledBox.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Box/Box.js
var RawBox = (props) => import_react59.default.createElement(StyledBox, _extends({
  ref: props.forwardedRef
}, props));
var Box = (0, import_react59.memo)((0, import_react59.forwardRef)((props, ref2) => import_react59.default.createElement(RawBox, _extends({}, props, {
  forwardedRef: ref2
}))));
Box.displayName = "Box";

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/withFlex.js
var withFlexedContainer = () => Ae(["", ";", ";", ";", ";", ";", ";", ";", ";"], (_ref) => {
  let {
    alignContent,
    theme: theme2
  } = _ref;
  return alignContent && getFlexedStyles(alignContent, theme2, "align-content");
}, (_ref2) => {
  let {
    alignItems,
    theme: theme2
  } = _ref2;
  return alignItems && getFlexedStyles(alignItems, theme2, "align-items");
}, (_ref3) => {
  let {
    flexDirection,
    theme: theme2
  } = _ref3;
  return flexDirection && getFlexedStyles(flexDirection, theme2, "flex-direction");
}, (_ref4) => {
  let {
    flexGap,
    theme: theme2
  } = _ref4;
  return flexGap && getFlexedStyles(flexGap, theme2, "gap");
}, (_ref5) => {
  let {
    flexColumnGap,
    theme: theme2
  } = _ref5;
  return flexColumnGap && getFlexedStyles(flexColumnGap, theme2, "column-gap");
}, (_ref6) => {
  let {
    flexRowGap,
    theme: theme2
  } = _ref6;
  return flexRowGap && getFlexedStyles(flexRowGap, theme2, "row-gap");
}, (_ref7) => {
  let {
    flexWrap,
    theme: theme2
  } = _ref7;
  return flexWrap && getFlexedStyles(flexWrap, theme2, "flex-wrap");
}, (_ref8) => {
  let {
    justifyContent,
    theme: theme2
  } = _ref8;
  return justifyContent && getFlexedStyles(justifyContent, theme2, "justify-content");
});
var withFlexedItems = () => Ae(["", ";", ";", ";", ";", ";"], (_ref9) => {
  let {
    alignSelf,
    theme: theme2
  } = _ref9;
  return alignSelf && getFlexedStyles(alignSelf, theme2, "align-self");
}, (_ref10) => {
  let {
    flexBasis,
    theme: theme2
  } = _ref10;
  return flexBasis && getFlexedStyles(flexBasis, theme2, "flex-basis");
}, (_ref11) => {
  let {
    flexGrow,
    theme: theme2
  } = _ref11;
  return typeof flexGrow !== "undefined" && getFlexedStyles(flexGrow, theme2, "flex-grow");
}, (_ref12) => {
  let {
    flexOrder,
    theme: theme2
  } = _ref12;
  return typeof flexOrder !== "undefined" && getFlexedStyles(flexOrder, theme2, "order");
}, (_ref13) => {
  let {
    flexShrink,
    theme: theme2
  } = _ref13;
  return typeof flexShrink !== "undefined" && getFlexedStyles(flexShrink, theme2, "flex-shrink");
});
var getFlexedStyles = (flexedProp, theme2, cssKey) => {
  if (typeof flexedProp === "object") {
    return getResponsiveFlex(flexedProp, theme2, cssKey);
  }
  if (typeof flexedProp === "string" || typeof flexedProp === "number") {
    return getSimpleFlex(flexedProp, cssKey);
  }
  return [];
};
var getSimpleFlex = (flexedProp, cssKey) => Ae(["", ":", ""], cssKey, flexedProp);
var getResponsiveFlex = (flexedProp, theme2, cssKey) => {
  const breakpointKeys = Object.keys(flexedProp).sort((firstBreakpoint, secondBreakpoint) => (
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(firstBreakpoint) - // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(secondBreakpoint)
  ));
  return breakpointKeys.map((breakpointKey) => Ae(
    ["", "{", " ", "}"],
    theme2.breakpoints[breakpointKey],
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
    "",
    getSimpleFlex(flexedProp[breakpointKey], cssKey)
  ));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/styled.js
var StyledFlex = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledFlex",
  componentId: "sc-hcvk8l-0"
})(["", " display:flex;", ""], withFlexedContainer(), withDisplay());
StyledFlex.defaultProps = {
  alignContent: "stretch",
  alignItems: "stretch",
  flexDirection: {
    mobile: "column",
    tablet: "row"
  },
  flexWrap: "nowrap",
  justifyContent: "flex-start",
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/Flex.js
var RawFlex = (_ref) => {
  let {
    as,
    forwardedRef,
    ...rest
  } = _ref;
  return import_react60.default.createElement(StyledFlex, _extends({
    forwardedAs: as,
    ref: forwardedRef
  }, rest));
};
var Flex = (0, import_react60.forwardRef)((props, ref2) => import_react60.default.createElement(RawFlex, _extends({}, props, {
  forwardedRef: ref2
})));

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/Item/Item.js
var import_react61 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/Item/styled.js
var StyledFlexItem = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledFlexItem",
  componentId: "sc-smjqtt-0"
})(["", ""], withFlexedItems());
StyledFlexItem.defaultProps = {
  alignSelf: "auto",
  flexBasis: "auto",
  flexGrow: 0,
  flexOrder: 0,
  flexShrink: 1,
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Flex/Item/Item.js
var RawFlexItem = (_ref) => {
  let {
    as,
    forwardedRef,
    ...props
  } = _ref;
  return import_react61.default.createElement(StyledFlexItem, _extends({
    forwardedAs: as,
    ref: forwardedRef
  }, props));
};
var FlexItem = (0, import_react61.forwardRef)((props, ref2) => import_react61.default.createElement(RawFlexItem, _extends({}, props, {
  forwardedRef: ref2
})));

// node_modules/@bigcommerce/big-design/dist/es/components/Button/styled.js
var StyledButton = styled_components_browser_esm_default.button.withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-3yq204-0"
})(["", " &&{", ";}align-items:center;appearance:none;border:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-flex;flex:none;font-size:", ";font-weight:", ";height:", ";justify-content:center;line-height:", ";outline:none;padding:", ";position:relative;text-align:center;text-decoration:none;user-select:none;vertical-align:middle;white-space:nowrap;width:", ";&:focus{outline:none;}&[disabled]{border-color:", ";pointer-events:none;}& + .bd-button{margin-top:", ";margin-left:", ";", "{margin-top:", ";margin-left:", ";}}", "{width:auto;", ";}", ";", ";", ""], withTransition(["background-color", "border-color", "box-shadow", "color"]), withMargins(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.border.box;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.white;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.typography.fontSize.medium;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.typography.fontWeight.regular;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return addValues(theme2.spacing.xxLarge, theme2.spacing.xxSmall);
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.lineHeight.xLarge;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return `0 ${theme2.spacing.medium}`;
}, (_ref9) => {
  let {
    mobileWidth
  } = _ref9;
  return mobileWidth === "auto" ? "auto" : "100%";
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.colors.secondary30;
}, (_ref11) => {
  let {
    mobileWidth,
    theme: theme2
  } = _ref11;
  return mobileWidth === "100%" && theme2.spacing.xSmall;
}, (_ref12) => {
  let {
    mobileWidth,
    theme: theme2
  } = _ref12;
  return mobileWidth === "auto" && theme2.spacing.xSmall;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.breakpoints.tablet;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.spacing.none;
}, (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.spacing.xSmall;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.breakpoints.tablet;
}, (_ref17) => {
  let {
    iconOnly: icon,
    theme: theme2
  } = _ref17;
  return icon && Ae(["padding:0;min-width:", ";"], addValues(theme2.spacing.xxLarge, theme2.spacing.xxSmall));
}, (_ref18) => {
  let {
    iconLeft,
    theme: theme2
  } = _ref18;
  return iconLeft && Ae(["padding-left:", ";"], theme2.spacing.xSmall);
}, (_ref19) => {
  let {
    iconRight,
    theme: theme2
  } = _ref19;
  return iconRight && Ae(["padding-right:", ";"], theme2.spacing.xSmall);
}, (props) => getButtonStyles(props));
var ContentWrapper = styled_components_browser_esm_default.span.attrs({}).withConfig({
  displayName: "styled__ContentWrapper",
  componentId: "sc-3yq204-1"
})(["align-content:center;align-items:center;display:inline-grid;grid-auto-flow:column;grid-gap:", ";", ";"], (_ref20) => {
  let {
    theme: theme2
  } = _ref20;
  return theme2.spacing.xSmall;
}, (_ref21) => {
  let {
    isLoading
  } = _ref21;
  return isLoading && Ae(["visibility:hidden;"]);
});
var LoadingSpinnerWrapper = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__LoadingSpinnerWrapper",
  componentId: "sc-3yq204-2"
})(["position:absolute;"]);
var ButtonPrimary = Ae(["background-color:", ";border-color:", ";font-weight:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{background-color:", ";}"], (_ref22) => {
  let {
    theme: theme2
  } = _ref22;
  return theme2.colors.primary;
}, (_ref23) => {
  let {
    theme: theme2
  } = _ref23;
  return theme2.colors.primary;
}, (_ref24) => {
  let {
    theme: theme2
  } = _ref24;
  return theme2.typography.fontWeight.semiBold;
}, (_ref25) => {
  let {
    theme: theme2
  } = _ref25;
  return theme2.colors.primary60;
}, (_ref26) => {
  let {
    theme: theme2
  } = _ref26;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, (_ref27) => {
  let {
    theme: theme2
  } = _ref27;
  return theme2.colors.primary50;
}, (_ref28) => {
  let {
    theme: theme2
  } = _ref28;
  return theme2.colors.secondary30;
});
var ButtonPrimaryDestructive = Ae(["background-color:", ";border-color:", ";font-weight:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{background-color:", ";}"], (_ref29) => {
  let {
    theme: theme2
  } = _ref29;
  return theme2.colors.danger;
}, (_ref30) => {
  let {
    theme: theme2
  } = _ref30;
  return theme2.colors.danger;
}, (_ref31) => {
  let {
    theme: theme2
  } = _ref31;
  return theme2.typography.fontWeight.semiBold;
}, (_ref32) => {
  let {
    theme: theme2
  } = _ref32;
  return theme2.colors.danger60;
}, (_ref33) => {
  let {
    theme: theme2
  } = _ref33;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.danger20}`;
}, (_ref34) => {
  let {
    theme: theme2
  } = _ref34;
  return theme2.colors.danger50;
}, (_ref35) => {
  let {
    theme: theme2
  } = _ref35;
  return theme2.colors.secondary30;
});
var ButtonSecondary = Ae(["background-color:transparent;border-color:", ";color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{color:", ";}"], (_ref36) => {
  let {
    theme: theme2
  } = _ref36;
  return theme2.colors.primary;
}, (_ref37) => {
  let {
    theme: theme2
  } = _ref37;
  return theme2.colors.primary;
}, (_ref38) => {
  let {
    theme: theme2
  } = _ref38;
  return theme2.colors.primary20;
}, (_ref39) => {
  let {
    theme: theme2
  } = _ref39;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, (_ref40) => {
  let {
    theme: theme2
  } = _ref40;
  return theme2.colors.primary10;
}, (_ref41) => {
  let {
    theme: theme2
  } = _ref41;
  return theme2.colors.secondary30;
});
var ButtonSecondaryDestructive = Ae(["background-color:transparent;border-color:", ";color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{color:", ";}"], (_ref42) => {
  let {
    theme: theme2
  } = _ref42;
  return theme2.colors.danger;
}, (_ref43) => {
  let {
    theme: theme2
  } = _ref43;
  return theme2.colors.danger;
}, (_ref44) => {
  let {
    theme: theme2
  } = _ref44;
  return theme2.colors.danger20;
}, (_ref45) => {
  let {
    theme: theme2
  } = _ref45;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.danger20}`;
}, (_ref46) => {
  let {
    theme: theme2
  } = _ref46;
  return theme2.colors.danger10;
}, (_ref47) => {
  let {
    theme: theme2
  } = _ref47;
  return theme2.colors.secondary30;
});
var ButtonSubtle = Ae(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{border-color:transparent;color:", ";}"], (_ref48) => {
  let {
    theme: theme2
  } = _ref48;
  return theme2.colors.primary;
}, (_ref49) => {
  let {
    theme: theme2
  } = _ref49;
  return theme2.colors.primary20;
}, (_ref50) => {
  let {
    theme: theme2
  } = _ref50;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, (_ref51) => {
  let {
    theme: theme2
  } = _ref51;
  return theme2.colors.primary10;
}, (_ref52) => {
  let {
    theme: theme2
  } = _ref52;
  return theme2.colors.secondary30;
});
var ButtonSubtleDestructive = Ae(["background-color:transparent;border-color:transparent;color:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{border-color:transparent;color:", ";}"], (_ref53) => {
  let {
    theme: theme2
  } = _ref53;
  return theme2.colors.danger;
}, (_ref54) => {
  let {
    theme: theme2
  } = _ref54;
  return theme2.colors.danger20;
}, (_ref55) => {
  let {
    theme: theme2
  } = _ref55;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.danger20}`;
}, (_ref56) => {
  let {
    theme: theme2
  } = _ref56;
  return theme2.colors.danger10;
}, (_ref57) => {
  let {
    theme: theme2
  } = _ref57;
  return theme2.colors.secondary30;
});
function getButtonStyles(props) {
  const {
    actionType,
    variant
  } = props;
  switch (variant) {
    case "primary":
      return actionType === "destructive" ? ButtonPrimaryDestructive : ButtonPrimary;
    case "secondary":
      return actionType === "destructive" ? ButtonSecondaryDestructive : ButtonSecondary;
    case "subtle":
      return actionType === "destructive" ? ButtonSubtleDestructive : ButtonSubtle;
  }
}
StyledButton.defaultProps = {
  theme
};
ContentWrapper.defaultProps = {
  theme
};
LoadingSpinnerWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Button/Button.js
var LoadingSpinner = () => import_react62.default.createElement(LoadingSpinnerWrapper, {
  alignItems: "center"
}, import_react62.default.createElement(ProgressCircle, {
  size: "xxSmall"
}));
var RawButton = (0, import_react62.memo)((_ref) => {
  let {
    forwardedRef,
    isLoading,
    disabled,
    ...props
  } = _ref;
  return import_react62.default.createElement(StyledButton, _extends({
    className: "bd-button"
  }, props, {
    disabled: isLoading || disabled,
    ref: forwardedRef
  }), isLoading ? import_react62.default.createElement(LoadingSpinner, null) : null, import_react62.default.createElement(ContentWrapper, {
    isLoading
  }, !props.iconOnly && props.iconLeft, props.iconOnly, !props.iconOnly && props.children, !props.iconOnly && props.iconRight));
});
var StyleableButton = (0, import_react62.forwardRef)((props, ref2) => import_react62.default.createElement(RawButton, _extends({}, props, {
  forwardedRef: ref2
})));
var Button = (0, import_react62.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react62.default.createElement(RawButton, _extends({}, props, {
    forwardedRef: ref2
  }));
});
var defaultProps = {
  actionType: "normal",
  isLoading: false,
  mobileWidth: "100%",
  variant: "primary"
};
Button.displayName = "Button";
Button.defaultProps = {
  ...defaultProps
};
StyleableButton.displayName = "StyleableButton";
StyleableButton.defaultProps = {
  ...defaultProps
};

// node_modules/@bigcommerce/big-design/dist/es/components/Typography/Typography.js
var import_react63 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Typography/styled.js
var commonTextStyles = (props) => Ae(["color:", ";margin:0 0 ", ";", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return props.color ? theme2.colors[props.color] : theme2.colors.secondary70;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.medium;
}, props.ellipsis && ellipsis());
var textModifiers = (props) => Ae(["", " ", " ", " ", " ", " ", " ", ""], (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return props.bold && Ae(["font-weight:", ";"], theme2.typography.fontWeight.semiBold);
}, () => props.italic && Ae(["font-style:italic;"]), () => props.underline && Ae(["text-decoration:underline;"]), () => props.strikethrough && Ae(["text-decoration:line-through;"]), () => props.capitalize && Ae(["text-transform:capitalize;"]), () => props.lowercase && Ae(["text-transform:lowercase;"]), () => props.uppercase && Ae(["text-transform:uppercase;"]));
var StyledH0 = styled_components_browser_esm_default.h1.withConfig({
  displayName: "styled__StyledH0",
  componentId: "sc-tqnj75-0"
})(["", ";font-size:", ";font-weight:", ";line-height:", ";margin:0 0 ", ";", ";"], (props) => commonTextStyles(props), (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.typography.fontSize.xxxLarge;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.typography.fontWeight.extraLight;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.lineHeight.xxxLarge;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.xLarge;
}, withMargins());
var StyledH1 = styled_components_browser_esm_default.h1.withConfig({
  displayName: "styled__StyledH1",
  componentId: "sc-tqnj75-1"
})(["", ";font-size:", ";font-weight:", ";line-height:", ";margin:0 0 ", ";", ";"], (props) => commonTextStyles(props), (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.typography.fontSize.xxLarge;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.typography.fontWeight.light;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.lineHeight.xxLarge;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.spacing.xLarge;
}, withMargins());
var StyledH2 = styled_components_browser_esm_default.h2.withConfig({
  displayName: "styled__StyledH2",
  componentId: "sc-tqnj75-2"
})(["", ";font-size:", ";font-weight:", ";line-height:", ";", ";"], (props) => commonTextStyles(props), (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.typography.fontSize.xLarge;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.typography.fontWeight.regular;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.lineHeight.xLarge;
}, withMargins());
var StyledH3 = styled_components_browser_esm_default.h3.withConfig({
  displayName: "styled__StyledH3",
  componentId: "sc-tqnj75-3"
})(["", ";font-size:", ";font-weight:", ";line-height:", ";margin:0 0 ", ";", ";"], (props) => commonTextStyles(props), (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.typography.fontSize.large;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.typography.fontWeight.regular;
}, (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.lineHeight.large;
}, (_ref18) => {
  let {
    theme: theme2
  } = _ref18;
  return theme2.spacing.small;
}, withMargins());
var StyledH4 = styled_components_browser_esm_default.h4.withConfig({
  displayName: "styled__StyledH4",
  componentId: "sc-tqnj75-4"
})(["", ";font-size:", ";font-weight:", ";line-height:", ";margin:0 0 ", ";", ";"], (props) => commonTextStyles(props), (_ref19) => {
  let {
    theme: theme2
  } = _ref19;
  return theme2.typography.fontSize.medium;
}, (_ref20) => {
  let {
    theme: theme2
  } = _ref20;
  return theme2.typography.fontWeight.semiBold;
}, (_ref21) => {
  let {
    theme: theme2
  } = _ref21;
  return theme2.lineHeight.medium;
}, (_ref22) => {
  let {
    theme: theme2
  } = _ref22;
  return theme2.spacing.xSmall;
}, withMargins());
var StyledText2 = styled_components_browser_esm_default.p.withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-tqnj75-5"
})(["", " font-size:", ";font-weight:", ";line-height:", ";", " &:last-child{margin-bottom:0;}", ";"], (props) => commonTextStyles(props), (_ref23) => {
  let {
    theme: theme2
  } = _ref23;
  return theme2.typography.fontSize.medium;
}, (_ref24) => {
  let {
    theme: theme2
  } = _ref24;
  return theme2.typography.fontWeight.regular;
}, (_ref25) => {
  let {
    theme: theme2
  } = _ref25;
  return theme2.lineHeight.medium;
}, (props) => textModifiers(props), withMargins());
var StyledSmall = styled_components_browser_esm_default.p.withConfig({
  displayName: "styled__StyledSmall",
  componentId: "sc-tqnj75-6"
})(["", ";color:", ";font-size:", ";font-weight:", ";line-height:", ";margin:0 0 ", ";", " &:last-child{margin-bottom:0;}", ";"], (props) => commonTextStyles(props), (_ref26) => {
  let {
    color,
    theme: theme2
  } = _ref26;
  return color ? theme2.colors[color] : theme2.colors.secondary60;
}, (_ref27) => {
  let {
    theme: theme2
  } = _ref27;
  return theme2.typography.fontSize.small;
}, (_ref28) => {
  let {
    theme: theme2
  } = _ref28;
  return theme2.typography.fontWeight.regular;
}, (_ref29) => {
  let {
    theme: theme2
  } = _ref29;
  return theme2.lineHeight.small;
}, (_ref30) => {
  let {
    theme: theme2
  } = _ref30;
  return theme2.spacing.small;
}, (props) => textModifiers(props), withMargins());
var StyledHR = styled_components_browser_esm_default.hr.withConfig({
  displayName: "styled__StyledHR",
  componentId: "sc-tqnj75-7"
})(["", ";border:0;border-bottom:1px solid ", ";"], withMargins(), (_ref31) => {
  let {
    color,
    theme: theme2
  } = _ref31;
  return color && color in theme2.colors ? theme2.colors[color] : theme2.colors.secondary30;
});
StyledH0.defaultProps = {
  theme
};
StyledH1.defaultProps = {
  theme
};
StyledH2.defaultProps = {
  theme
};
StyledH3.defaultProps = {
  theme
};
StyledH4.defaultProps = {
  theme
};
StyledText2.defaultProps = {
  theme
};
StyledSmall.defaultProps = {
  theme
};
StyledHR.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Typography/Typography.js
var validHeadingTags = /* @__PURE__ */ new Set(["h1", "h2", "h3", "h4", "h5", "h6"]);
var StyleableText = StyledText2;
var StyleableSmall = StyledSmall;
var StyleableH0 = StyledH0;
var StyleableH1 = StyledH1;
var StyleableH2 = StyledH2;
var StyleableH3 = StyledH3;
var StyleableH4 = StyledH4;
var StyleableHR = StyledHR;
var Text = (0, import_react63.memo)((_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react63.default.createElement(StyleableText, props);
});
var Small = (0, import_react63.memo)((_ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react63.default.createElement(StyleableSmall, props);
});
var HR = (0, import_react63.memo)((_ref3) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref3;
  return import_react63.default.createElement(StyleableHR, props);
});
var H0 = (0, import_react63.memo)((_ref4) => {
  let {
    className,
    style: style2,
    as,
    ...props
  } = _ref4;
  return import_react63.default.createElement(StyleableH0, _extends({
    as: getHeadingTag("h1", as)
  }, props));
});
var H1 = (0, import_react63.memo)((_ref5) => {
  let {
    className,
    style: style2,
    as,
    ...props
  } = _ref5;
  return import_react63.default.createElement(StyleableH1, _extends({
    as: getHeadingTag("h1", as)
  }, props));
});
var H2 = (0, import_react63.memo)((_ref6) => {
  let {
    className,
    style: style2,
    as,
    ...props
  } = _ref6;
  return import_react63.default.createElement(StyleableH2, _extends({
    as: getHeadingTag("h2", as)
  }, props));
});
var H3 = (0, import_react63.memo)((_ref7) => {
  let {
    className,
    style: style2,
    as,
    ...props
  } = _ref7;
  return import_react63.default.createElement(StyleableH3, _extends({
    as: getHeadingTag("h3", as)
  }, props));
});
var H4 = (0, import_react63.memo)((_ref8) => {
  let {
    className,
    style: style2,
    as,
    ...props
  } = _ref8;
  return import_react63.default.createElement(StyleableH4, _extends({
    as: getHeadingTag("h4", as)
  }, props));
});
var getHeadingTag = (defaultTag, tag) => {
  return tag && validHeadingTags.has(tag) ? tag : defaultTag;
};
Text.displayName = "Text";
Small.displayName = "Small";
HR.displayName = "HR";
H0.displayName = "H0";
H1.displayName = "H1";
H2.displayName = "H2";
H3.displayName = "H3";
H4.displayName = "H4";

// node_modules/@bigcommerce/big-design/dist/es/components/Panel/styled.js
var StyledPanel = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledPanel",
  componentId: "sc-1h6ef3q-0"
})(["border-radius:", ";", "{border-radius:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.borderRadius.none;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.breakpoints.tablet;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.borderRadius.normal;
});
var StyledH22 = styled_components_browser_esm_default(StyleableH2).withConfig({
  displayName: "styled__StyledH2",
  componentId: "sc-1h6ef3q-1"
})(["flex-grow:1;& ~ .bd-button{width:auto;margin-top:0;}"]);
StyledPanel.defaultProps = {
  theme
};
StyledH22.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Panel/Panel.js
var RawPanel = (0, import_react64.memo)((_ref) => {
  let {
    forwardedRef,
    ...props
  } = _ref;
  const filteredProps = excludePaddingProps(props);
  const {
    action,
    children,
    description,
    header,
    headerId,
    ...rest
  } = filteredProps;
  const renderHeader = () => {
    if (!header && !action) {
      return null;
    }
    if (typeof header !== "string") {
      return null;
    }
    return import_react64.default.createElement(Flex, {
      flexDirection: "row"
    }, Boolean(header) && import_react64.default.createElement(StyledH22, {
      id: headerId,
      marginBottom: description ? "xxSmall" : "medium"
    }, header), action && import_react64.default.createElement(Button, action, action.text));
  };
  const renderDescription = () => {
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return import_react64.default.createElement(Text, {
        color: "secondary60"
      }, description);
    }
    if ((0, import_react64.isValidElement)(description)) {
      return description;
    }
    warning("description must be either a string or a ReactNode.");
  };
  return import_react64.default.createElement(StyledPanel, _extends({
    marginBottom: "medium"
  }, rest, {
    backgroundColor: "white",
    padding: {
      mobile: "medium",
      tablet: "xLarge"
    },
    ref: forwardedRef,
    shadow: "raised"
  }), renderHeader(), renderDescription(), children);
});
var Panel = (0, import_react64.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react64.default.createElement(RawPanel, _extends({}, props, {
    forwardedRef: ref2
  }));
});
Panel.displayName = "Panel";

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/Accordion/Accordion.js
var import_react65 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Button/private.js
var StyleableButton2 = StyleableButton;
var MessagingButton = styled_components_browser_esm_default(StyleableButton).withConfig({
  displayName: "private__MessagingButton",
  componentId: "sc-hxlq00-0"
})(["background-color:transparent;border:", ";color:", ";height:auto;min-width:auto;padding:", ";&:active{background-color:", ";}&:focus{box-shadow:", ";}&:hover:not(:active){background-color:", ";}&[disabled]{color:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.border.none;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary70;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.none;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.colors.primary20;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.colors.primary10;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.colors.secondary30;
});
MessagingButton.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/Accordion/styled.js
var StyledAccordionButton = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledAccordionButton",
  componentId: "sc-3xdlqx-0"
})(["border-top:", ";border-radius:0;padding:", ";text-align:left;width:100%;span{width:100%;color:", ";grid-template-columns:", ";}", " &:focus{z-index:", ";}.collapse-icon{", " ", "}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.border.box;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.xLarge;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.secondary70;
}, (_ref4) => {
  let {
    iconLeft,
    theme: theme2
  } = _ref4;
  return iconLeft ? `${theme2.spacing.xLarge} 1fr ${theme2.spacing.medium}` : `1fr ${theme2.spacing.medium}`;
}, (_ref5) => {
  let {
    isExpanded
  } = _ref5;
  return isExpanded && Ae(["border-bottom:", ";"], (_ref6) => {
    let {
      theme: theme2
    } = _ref6;
    return theme2.border.box;
  });
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.zIndex.fixed;
}, withTransition(["transform"]), (_ref8) => {
  let {
    isExpanded
  } = _ref8;
  return isExpanded && Ae(["transform:rotate(-180deg);"]);
});
var StyledAccordionContent = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledAccordionContent",
  componentId: "sc-3xdlqx-1"
})(["padding:", "};padding-left:", ";"], (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.spacing.xLarge;
}, (_ref10) => {
  let {
    iconLeft,
    theme: theme2
  } = _ref10;
  return iconLeft ? remCalc(60) : `${theme2.spacing.xLarge}`;
});
StyledAccordionButton.defaultProps = {
  theme
};
StyledAccordionContent.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/Accordion/Accordion.js
var Accordion = (0, import_react65.memo)((_ref) => {
  let {
    children,
    header,
    iconLeft,
    isExpanded,
    onClick
  } = _ref;
  const accordionId = (0, import_react65.useId)();
  const accordionItemId = (0, import_react65.useId)();
  return import_react65.default.createElement(import_react65.default.Fragment, null, import_react65.default.createElement(StyledAccordionButton, {
    "aria-controls": accordionItemId,
    "aria-expanded": isExpanded,
    iconLeft,
    iconRight: import_react65.default.createElement(ExpandMoreIcon, {
      className: "collapse-icon",
      color: "secondary70"
    }),
    id: accordionId,
    isExpanded,
    onClick,
    type: "button",
    variant: "subtle"
  }, header), import_react65.default.createElement(StyledAccordionContent, {
    "aria-labelledby": accordionId,
    display: isExpanded ? "block" : "none",
    hidden: !isExpanded,
    iconLeft,
    id: accordionItemId,
    role: "region"
  }, children));
});

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/styled.js
var StyledAccordionPanelWrapper = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledAccordionPanelWrapper",
  componentId: "sc-1hscw1m-0"
})(["flex-direction:column;margin-bottom:-", ";margin-left:-", ";margin-right:-", ";", "{margin-bottom:-", ";margin-left:-", ";margin-right:-", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.medium;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.medium;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.medium;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.breakpoints.tablet;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.xLarge;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.xLarge;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.xLarge;
});
StyledAccordionPanelWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/AccordionPanel.js
var AccordionPanel = (0, import_react66.memo)((_ref) => {
  let {
    header,
    panels
  } = _ref;
  return import_react66.default.createElement(Panel, {
    header
  }, import_react66.default.createElement(StyledAccordionPanelWrapper, null, panels.map((panel, index) => import_react66.default.createElement(Accordion, _extends({}, panel, {
    key: index
  })))));
});

// node_modules/@bigcommerce/big-design/dist/es/components/AccordionPanel/useAccordionPanel.js
var import_react67 = __toESM(require_react());
var useAccordionPanel = (initialPanels) => {
  const [expandedPanels, setExpandedPanels] = (0, import_react67.useState)(() => {
    return initialPanels.map((_ref) => {
      let {
        defaultExpanded
      } = _ref;
      return defaultExpanded ?? false;
    });
  });
  const handleOnClick = (panelIndex) => () => {
    setExpandedPanels(expandedPanels.map((isExpanded, index) => index === panelIndex ? !isExpanded : isExpanded));
  };
  return {
    panels: expandedPanels.map((isExpanded, index) => ({
      ...initialPanels[index],
      isExpanded,
      onClick: handleOnClick(index)
    }))
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/Alert/Alert.js
var import_react71 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/Grid.js
var import_react68 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/withGrid.js
var withGridedContainer = () => Ae(["", ";", ";", ";", ";", ";", ";", ";", ";", ";", ";"], (_ref) => {
  let {
    gridAreas,
    theme: theme2
  } = _ref;
  return gridAreas && getGridedStyles(gridAreas, theme2, "grid-template-areas");
}, (_ref2) => {
  let {
    gridAutoColumns,
    theme: theme2
  } = _ref2;
  return gridAutoColumns && getGridedStyles(gridAutoColumns, theme2, "grid-auto-columns");
}, (_ref3) => {
  let {
    gridAutoFlow,
    theme: theme2
  } = _ref3;
  return gridAutoFlow && getGridedStyles(gridAutoFlow, theme2, "grid-auto-flow");
}, (_ref4) => {
  let {
    gridAutoRows,
    theme: theme2
  } = _ref4;
  return gridAutoRows && getGridedStyles(gridAutoRows, theme2, "grid-auto-rows");
}, (_ref5) => {
  let {
    gridColumns,
    theme: theme2
  } = _ref5;
  return gridColumns && getGridedStyles(gridColumns, theme2, "grid-template-columns");
}, (_ref6) => {
  let {
    gridGap,
    theme: theme2
  } = _ref6;
  return gridGap && getGridedStyles(gridGap, theme2, "gap");
}, (_ref7) => {
  let {
    gridColumnGap,
    theme: theme2
  } = _ref7;
  return gridColumnGap && getGridedStyles(gridColumnGap, theme2, "column-gap");
}, (_ref8) => {
  let {
    gridRows,
    theme: theme2
  } = _ref8;
  return gridRows && getGridedStyles(gridRows, theme2, "grid-template-rows");
}, (_ref9) => {
  let {
    gridRowGap,
    theme: theme2
  } = _ref9;
  return gridRowGap && getGridedStyles(gridRowGap, theme2, "row-gap");
}, (_ref10) => {
  let {
    gridTemplate,
    theme: theme2
  } = _ref10;
  return gridTemplate && getGridedStyles(gridTemplate, theme2, "grid-template");
});
var withGridedItems = () => Ae(["", ";", ";", ";", ";", ";", ";", ";"], (_ref11) => {
  let {
    gridArea,
    theme: theme2
  } = _ref11;
  return gridArea && getGridedStyles(gridArea, theme2, "grid-area");
}, (_ref12) => {
  let {
    gridColumn,
    theme: theme2
  } = _ref12;
  return gridColumn && getGridedStyles(gridColumn, theme2, "grid-column");
}, (_ref13) => {
  let {
    gridColumnEnd,
    theme: theme2
  } = _ref13;
  return gridColumnEnd && getGridedStyles(gridColumnEnd, theme2, "grid-column-end");
}, (_ref14) => {
  let {
    gridColumnStart,
    theme: theme2
  } = _ref14;
  return gridColumnStart && getGridedStyles(gridColumnStart, theme2, "grid-column-start");
}, (_ref15) => {
  let {
    gridRow,
    theme: theme2
  } = _ref15;
  return gridRow && getGridedStyles(gridRow, theme2, "grid-row");
}, (_ref16) => {
  let {
    gridRowEnd,
    theme: theme2
  } = _ref16;
  return gridRowEnd && getGridedStyles(gridRowEnd, theme2, "grid-row-end");
}, (_ref17) => {
  let {
    gridRowStart,
    theme: theme2
  } = _ref17;
  return gridRowStart && getGridedStyles(gridRowStart, theme2, "grid-row-start");
});
var getGridedStyles = (gridedProp, theme2, cssKey) => {
  if (typeof gridedProp === "object") {
    return getResponsiveGrid(gridedProp, theme2, cssKey);
  }
  if (typeof gridedProp === "string" || typeof gridedProp === "number") {
    return getSimpleGrid(gridedProp, cssKey);
  }
  return [];
};
var getSimpleGrid = (gridedProp, cssKey) => Ae(["", ":", ""], cssKey, gridedProp);
var getResponsiveGrid = (gridedProp, theme2, cssKey) => {
  const breakpointKeys = Object.keys(gridedProp).sort((firstBreakpoint, secondBreakpoint) => (
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(firstBreakpoint) - // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(secondBreakpoint)
  ));
  return breakpointKeys.map((breakpointKey) => Ae(
    ["", "{", " ", "}"],
    theme2.breakpoints[breakpointKey],
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
    "",
    getSimpleGrid(gridedProp[breakpointKey], cssKey)
  ));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/styled.js
var StyledGrid = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledGrid",
  componentId: "sc-sv7ojr-0"
})(["", " display:grid;", ""], withGridedContainer(), withDisplay());
StyledGrid.defaultProps = {
  theme,
  gridGap: theme.spacing.medium
};

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/Grid.js
var RawGrid = (_ref) => {
  let {
    as,
    forwardedRef,
    ...rest
  } = _ref;
  return import_react68.default.createElement(StyledGrid, _extends({
    forwardedAs: as,
    ref: forwardedRef
  }, rest));
};
var Grid = (0, import_react68.forwardRef)((props, ref2) => import_react68.default.createElement(RawGrid, _extends({}, props, {
  forwardedRef: ref2
})));

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/Item/Item.js
var import_react69 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/Item/styled.js
var StyledGridItem = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledGridItem",
  componentId: "sc-9gcq2s-0"
})(["", ""], withGridedItems());

// node_modules/@bigcommerce/big-design/dist/es/components/Grid/Item/Item.js
var GridItem = (_ref) => {
  let {
    as,
    ...rest
  } = _ref;
  return import_react69.default.createElement(StyledGridItem, _extends({
    forwardedAs: as
  }, rest));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Link/Link.js
var import_react70 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Link/styled.js
var StyledLink = styled_components_browser_esm_default.a.withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-n9mww9-0"
})(["", ";", " ", ";color:", ";cursor:pointer;font-size:", ";font-weight:", ";text-decoration:none;&:active{color:", ";}&:hover:not(:active){color:", ";}", ""], withMargins(), withTransition(["color"], "70ms"), (props) => props.ellipsis && ellipsis(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.primary;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.typography.fontSize.medium;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.typography.fontWeight.regular;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.colors.primary70;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.colors.primary70;
}, (_ref6) => {
  let {
    isExternal,
    theme: theme2
  } = _ref6;
  return isExternal && Ae(["display:inline-flex;align-items:center;svg{flex-shrink:0;margin-left:", ";}"], theme2.spacing.xxSmall);
});
StyledLink.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Link/Link.js
var StyleableLink = (0, import_react70.memo)((props) => import_react70.default.createElement(StyledLink, props));
var Link = (0, import_react70.forwardRef)((_ref, ref2) => {
  let {
    children,
    external,
    ...props
  } = _ref;
  const isExternal = external && props.target === "_blank";
  return import_react70.default.createElement(StyleableLink, _extends({}, props, {
    forwardedRef: ref2,
    isExternal
  }), isExternal ? import_react70.default.createElement("span", null, children) : children, isExternal && import_react70.default.createElement(OpenInNewIcon, {
    size: "medium"
  }));
});
Link.displayName = "Link";

// node_modules/@bigcommerce/big-design/dist/es/components/Alert/styled.js
var StyledAlert = styled_components_browser_esm_default(Grid).withConfig({
  displayName: "styled__StyledAlert",
  componentId: "sc-136bu5l-0"
})(["", " animation:", " .5s ease-in-out;background-color:", ";grid-gap:", ";max-width:", ";padding:", ";position:fixed;right:", ";top:", ";z-index:", ";", " ", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.shadow.floating;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.keyframes.fadeIn;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.white;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.spacing.small;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.helpers.remCalc(456);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.small;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.medium;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.spacing.medium;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.zIndex.fixed;
}, (_ref10) => {
  let {
    onClose
  } = _ref10;
  return onClose ? Ae(["grid-template-areas:'icon messages close';grid-template-columns:", ";"], (_ref11) => {
    let {
      theme: theme2
    } = _ref11;
    return `${theme2.spacing.xLarge} 1fr ${theme2.spacing.large}`;
  }) : Ae(["grid-template-areas:'icon messages';grid-template-columns:", ";"], (_ref12) => {
    let {
      theme: theme2
    } = _ref12;
    return `${theme2.spacing.xLarge} 1fr`;
  });
}, (_ref13) => {
  let {
    theme: theme2,
    type
  } = _ref13;
  return type && getBorderStyle(type, theme2);
});
var StyledHeader = styled_components_browser_esm_default(StyleableH4).withConfig({
  displayName: "styled__StyledHeader",
  componentId: "sc-136bu5l-1"
})(["line-height:", ";margin-bottom:", ";"], (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.spacing.medium;
}, (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.spacing.xxSmall;
});
var StyledMessageItem = styled_components_browser_esm_default(StyleableSmall).attrs({
  as: "span"
}).withConfig({
  displayName: "styled__StyledMessageItem",
  componentId: "sc-136bu5l-2"
})(["color:", ";vertical-align:middle;"], (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.colors.secondary70;
});
var StyledLink2 = styled_components_browser_esm_default(Link).withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-136bu5l-3"
})(["font-size:", ";vertical-align:middle;"], (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.typography.fontSize.small;
});
StyledAlert.defaultProps = {
  theme
};
StyledHeader.defaultProps = {
  theme
};
StyledMessageItem.defaultProps = {
  theme
};
StyledLink2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Alert/Alert.js
var Alert = (0, import_react71.memo)((_ref) => {
  let {
    className,
    style: style2,
    header,
    ...props
  } = _ref;
  const filteredProps = excludePaddingProps(props);
  const icon = (0, import_react71.useMemo)(() => props.type && getMessagingIcon(props.type), [props.type]);
  const renderedMessages = (0, import_react71.useMemo)(() => props.messages.map((_ref2, index) => {
    let {
      text,
      link
    } = _ref2;
    return import_react71.default.createElement(Box, {
      key: index
    }, import_react71.default.createElement(StyledMessageItem, null, text), " ", link && import_react71.default.createElement(StyledLink2, link, link.text));
  }), [props.messages]);
  const renderedHeader = (0, import_react71.useMemo)(() => header && import_react71.default.createElement(StyledHeader, null, header), [header]);
  return import_react71.default.createElement(StyledAlert, _extends({}, filteredProps, {
    role: "alert"
  }), import_react71.default.createElement(GridItem, {
    gridArea: "icon"
  }, icon), import_react71.default.createElement(GridItem, {
    gridArea: "messages"
  }, renderedHeader, renderedMessages), props.onClose && import_react71.default.createElement(GridItem, null, import_react71.default.createElement(MessagingButton, {
    iconOnly: import_react71.default.createElement(CloseIcon, {
      size: "large"
    }),
    onClick: props.onClose
  })));
});
Alert.defaultProps = {
  messages: [],
  type: "success"
};

// node_modules/@bigcommerce/big-design/dist/es/components/Badge/Badge.js
var import_react72 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Badge/styled.js
var StyledBadge = styled_components_browser_esm_default.span.withConfig({
  displayName: "styled__StyledBadge",
  componentId: "sc-1oik56k-0"
})(["", ";color:", ";border-radius:", ";display:inline-block;font-size:", ";font-weight:", ";line-height:", ";text-align:center;text-transform:uppercase;padding:0 ", ";", " ", " ", " ", " ", ""], withMargins(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.helpers.remCalc(12);
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.typography.fontWeight.semiBold;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.lineHeight.small;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.xSmall;
}, (_ref7) => {
  let {
    theme: theme2,
    variant
  } = _ref7;
  return variant === "secondary" && Ae(["background-color:", ";"], theme2.colors.secondary60);
}, (_ref8) => {
  let {
    theme: theme2,
    variant
  } = _ref8;
  return variant === "success" && Ae(["background-color:", ";"], theme2.colors.success50);
}, (_ref9) => {
  let {
    theme: theme2,
    variant
  } = _ref9;
  return variant === "warning" && Ae(["color:", ";background-color:", ";"], theme2.colors.secondary70, theme2.colors.warning40);
}, (_ref10) => {
  let {
    theme: theme2,
    variant
  } = _ref10;
  return variant === "danger" && Ae(["background-color:", ";"], theme2.colors.danger40);
}, (_ref11) => {
  let {
    theme: theme2,
    variant
  } = _ref11;
  return variant === "primary" && Ae(["background-color:", ";"], theme2.colors.primary40);
});
StyledBadge.defaultProps = {
  theme,
  variant: "secondary"
};

// node_modules/@bigcommerce/big-design/dist/es/components/Badge/Badge.js
var Badge = (0, import_react72.memo)((_ref) => {
  let {
    className,
    style: style2,
    label,
    ...props
  } = _ref;
  return typeof label === "string" ? import_react72.default.createElement(StyledBadge, props, label) : null;
});
Badge.displayName = "Badge";

// node_modules/@bigcommerce/big-design/dist/es/components/ButtonGroup/ButtonGroup.js
var import_react97 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/hooks/useComponentSize.js
var import_react74 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/hooks/useRafState.js
var import_react73 = __toESM(require_react());
var useRafState = (initialState) => {
  const frame = (0, import_react73.useRef)(0);
  const [state, setState] = (0, import_react73.useState)(initialState);
  const setRafState = (0, import_react73.useCallback)((value) => {
    cancelAnimationFrame(frame.current);
    frame.current = requestAnimationFrame(() => {
      setState(value);
    });
  }, []);
  (0, import_react73.useEffect)(() => () => cancelAnimationFrame(frame.current), []);
  return [state, setRafState];
};

// node_modules/@bigcommerce/big-design/dist/es/hooks/useComponentSize.js
var getSize = (element) => ({
  height: element ? element.offsetHeight : 0,
  width: element ? element.offsetWidth : 0
});
var useComponentSize = (ref2) => {
  const [size, setSize] = useRafState(getSize(ref2.current));
  const handleResize = (0, import_react74.useCallback)(() => {
    if (ref2.current) {
      setSize(getSize(ref2.current));
    }
  }, [ref2, setSize]);
  (0, import_react74.useEffect)(() => {
    if (!ref2.current) {
      return;
    }
    handleResize();
    if (typeof MutationObserver === "function" && ref2.current instanceof Node) {
      const observer = new MutationObserver(handleResize);
      observer.observe(ref2.current, {
        childList: true
      });
      return () => {
        observer.disconnect();
      };
    }
  }, [ref2, handleResize]);
  return size;
};

// node_modules/@bigcommerce/big-design/dist/es/hooks/useDidUpdate.js
var import_react75 = __toESM(require_react());
var useDidUpdate = (effect2) => {
  const isInitialRender = (0, import_react75.useRef)(true);
  (0, import_react75.useEffect)(() => {
    if (isInitialRender.current) {
      isInitialRender.current = false;
    } else {
      effect2();
    }
  }, [effect2]);
};

// node_modules/@bigcommerce/big-design/dist/es/hooks/useEventCallback.js
var import_react76 = __toESM(require_react());
function useEventCallback(fn) {
  const ref2 = (0, import_react76.useRef)(fn);
  (0, import_react76.useEffect)(() => {
    ref2.current = fn;
  });
  return (0, import_react76.useCallback)(function() {
    const fun = ref2.current;
    return fun(...arguments);
  }, []);
}

// node_modules/@bigcommerce/big-design/dist/es/hooks/useIsomorphicLayoutEffect.js
var import_react77 = __toESM(require_react());
var useIsomorphicLayoutEffect = isClient ? import_react77.useLayoutEffect : import_react77.useEffect;

// node_modules/@bigcommerce/big-design/dist/es/hooks/useWindowResizeListener.js
var import_react78 = __toESM(require_react());
var useWindowResizeListener = (callback) => {
  (0, import_react78.useEffect)(() => {
    window.addEventListener("resize", callback);
    return () => {
      window.removeEventListener("resize", callback);
    };
  }, [callback]);
};

// node_modules/@bigcommerce/big-design/dist/es/hooks/useWindowSize.js
var useWindowSize = () => {
  const [state, setState] = useRafState({
    height: isClient ? window.innerHeight : -1,
    width: isClient ? window.innerWidth : -1
  });
  const resizeHandler = () => {
    setState({
      height: window.innerHeight,
      width: window.innerWidth
    });
  };
  useWindowResizeListener(resizeHandler);
  if (!isClient) {
    return state;
  }
  return state;
};

// node_modules/downshift/dist/downshift.esm.js
var import_prop_types = __toESM(require_prop_types());
var import_react79 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());

// node_modules/compute-scroll-into-view/dist/index.js
var e = (e4) => "object" == typeof e4 && null != e4 && 1 === e4.nodeType;
var t = (e4, t4) => (!t4 || "hidden" !== e4) && ("visible" !== e4 && "clip" !== e4);
var n = (e4, n2) => {
  if (e4.clientHeight < e4.scrollHeight || e4.clientWidth < e4.scrollWidth) {
    let l2 = getComputedStyle(e4, null);
    return t(l2.overflowY, n2) || t(l2.overflowX, n2) || ((e5) => {
      let t4 = ((e6) => {
        if (!e6.ownerDocument || !e6.ownerDocument.defaultView)
          return null;
        try {
          return e6.ownerDocument.defaultView.frameElement;
        } catch (e7) {
          return null;
        }
      })(e5);
      return !!t4 && (t4.clientHeight < e5.scrollHeight || t4.clientWidth < e5.scrollWidth);
    })(e4);
  }
  return false;
};
var l = (e4, t4, n2, l2, i3, o2, r2, d3) => o2 < e4 && r2 > t4 || o2 > e4 && r2 < t4 ? 0 : o2 <= e4 && d3 <= n2 || r2 >= t4 && d3 >= n2 ? o2 - e4 - l2 : r2 > t4 && d3 < n2 || o2 < e4 && d3 > n2 ? r2 - t4 + i3 : 0;
var i = (e4) => {
  let t4 = e4.parentElement;
  return null == t4 ? e4.getRootNode().host || null : t4;
};
var o = (t4, o2) => {
  var r2, d3, h3, f, u2, s3;
  if ("undefined" == typeof document)
    return [];
  let { scrollMode: a3, block: c2, inline: g, boundary: m3, skipOverflowHiddenElements: p } = o2, w2 = "function" == typeof m3 ? m3 : (e4) => e4 !== m3;
  if (!e(t4))
    throw new TypeError("Invalid target");
  let W = document.scrollingElement || document.documentElement, H6 = [], b2 = t4;
  for (; e(b2) && w2(b2); ) {
    if (b2 = i(b2), b2 === W) {
      H6.push(b2);
      break;
    }
    null != b2 && b2 === document.body && n(b2) && !n(document.documentElement) || null != b2 && n(b2, p) && H6.push(b2);
  }
  let v = null != (d3 = null == (r2 = window.visualViewport) ? void 0 : r2.width) ? d3 : innerWidth, y3 = null != (f = null == (h3 = window.visualViewport) ? void 0 : h3.height) ? f : innerHeight, E2 = null != (u2 = window.scrollX) ? u2 : pageXOffset, M3 = null != (s3 = window.scrollY) ? s3 : pageYOffset, { height: x2, width: I2, top: C, right: R2, bottom: T2, left: V } = t4.getBoundingClientRect(), k2 = "start" === c2 || "nearest" === c2 ? C : "end" === c2 ? T2 : C + x2 / 2, B2 = "center" === g ? V + I2 / 2 : "end" === g ? R2 : V, D2 = [];
  for (let e4 = 0; e4 < H6.length; e4++) {
    let t5 = H6[e4], { height: n2, width: i3, top: o3, right: r3, bottom: d4, left: h4 } = t5.getBoundingClientRect();
    if ("if-needed" === a3 && C >= 0 && V >= 0 && T2 <= y3 && R2 <= v && C >= o3 && T2 <= d4 && V >= h4 && R2 <= r3)
      return D2;
    let f2 = getComputedStyle(t5), u3 = parseInt(f2.borderLeftWidth, 10), s4 = parseInt(f2.borderTopWidth, 10), m4 = parseInt(f2.borderRightWidth, 10), p2 = parseInt(f2.borderBottomWidth, 10), w3 = 0, b3 = 0, O2 = "offsetWidth" in t5 ? t5.offsetWidth - t5.clientWidth - u3 - m4 : 0, X2 = "offsetHeight" in t5 ? t5.offsetHeight - t5.clientHeight - s4 - p2 : 0, Y2 = "offsetWidth" in t5 ? 0 === t5.offsetWidth ? 0 : i3 / t5.offsetWidth : 0, L2 = "offsetHeight" in t5 ? 0 === t5.offsetHeight ? 0 : n2 / t5.offsetHeight : 0;
    if (W === t5)
      w3 = "start" === c2 ? k2 : "end" === c2 ? k2 - y3 : "nearest" === c2 ? l(M3, M3 + y3, y3, s4, p2, M3 + k2, M3 + k2 + x2, x2) : k2 - y3 / 2, b3 = "start" === g ? B2 : "center" === g ? B2 - v / 2 : "end" === g ? B2 - v : l(E2, E2 + v, v, u3, m4, E2 + B2, E2 + B2 + I2, I2), w3 = Math.max(0, w3 + M3), b3 = Math.max(0, b3 + E2);
    else {
      w3 = "start" === c2 ? k2 - o3 - s4 : "end" === c2 ? k2 - d4 + p2 + X2 : "nearest" === c2 ? l(o3, d4, n2, s4, p2 + X2, k2, k2 + x2, x2) : k2 - (o3 + n2 / 2) + X2 / 2, b3 = "start" === g ? B2 - h4 - u3 : "center" === g ? B2 - (h4 + i3 / 2) + O2 / 2 : "end" === g ? B2 - r3 + m4 + O2 : l(h4, r3, i3, u3, m4 + O2, B2, B2 + I2, I2);
      let { scrollLeft: e5, scrollTop: f3 } = t5;
      w3 = Math.max(0, Math.min(f3 + w3 / L2, t5.scrollHeight - n2 / L2 + X2)), b3 = Math.max(0, Math.min(e5 + b3 / Y2, t5.scrollWidth - i3 / Y2 + O2)), k2 += f3 - w3, B2 += e5 - b3;
    }
    D2.push({ el: t5, top: w3, left: b3 });
  }
  return D2;
};

// node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t4) {
    for (var s3, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
      s3 = arguments[i3];
      for (var p in s3)
        if (Object.prototype.hasOwnProperty.call(s3, p))
          t4[p] = s3[p];
    }
    return t4;
  };
  return __assign.apply(this, arguments);
};

// node_modules/downshift/dist/downshift.esm.js
var idCounter = 0;
function cbToCb(cb) {
  return typeof cb === "function" ? cb : noop;
}
function noop() {
}
function scrollIntoView(node, menuNode) {
  if (!node) {
    return;
  }
  var actions = o(node, {
    boundary: menuNode,
    block: "nearest",
    scrollMode: "if-needed"
  });
  actions.forEach(function(_ref) {
    var el = _ref.el, top = _ref.top, left = _ref.left;
    el.scrollTop = top;
    el.scrollLeft = left;
  });
}
function isOrContainsNode(parent, child, environment) {
  var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);
  return result;
}
function debounce(fn, time) {
  var timeoutId;
  function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
  }
  function wrapper() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    cancel();
    timeoutId = setTimeout(function() {
      timeoutId = null;
      fn.apply(void 0, args);
    }, time);
  }
  wrapper.cancel = cancel;
  return wrapper;
}
function callAllEventHandlers() {
  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }
  return function(event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    return fns.some(function(fn) {
      if (fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return event.preventDownshiftDefault || event.hasOwnProperty("nativeEvent") && event.nativeEvent.preventDownshiftDefault;
    });
  };
}
function handleRefs() {
  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    refs[_key4] = arguments[_key4];
  }
  return function(node) {
    refs.forEach(function(ref2) {
      if (typeof ref2 === "function") {
        ref2(node);
      } else if (ref2) {
        ref2.current = node;
      }
    });
  };
}
function generateId() {
  return String(idCounter++);
}
function getA11yStatusMessage$1(_ref2) {
  var isOpen = _ref2.isOpen, resultCount = _ref2.resultCount, previousResultCount = _ref2.previousResultCount;
  if (!isOpen) {
    return "";
  }
  if (!resultCount) {
    return "No results are available.";
  }
  if (resultCount !== previousResultCount) {
    return resultCount + " result" + (resultCount === 1 ? " is" : "s are") + " available, use up and down arrow keys to navigate. Press Enter key to select.";
  }
  return "";
}
function unwrapArray(arg, defaultValue) {
  arg = Array.isArray(arg) ? (
    /* istanbul ignore next (preact) */
    arg[0]
  ) : arg;
  if (!arg && defaultValue) {
    return defaultValue;
  } else {
    return arg;
  }
}
function isDOMElement(element) {
  return typeof element.type === "string";
}
function getElementProps(element) {
  return element.props;
}
function requiredProp(fnName, propName) {
  console.error('The property "' + propName + '" is required in "' + fnName + '"');
}
var stateKeys = ["highlightedIndex", "inputValue", "isOpen", "selectedItem", "type"];
function pickState(state) {
  if (state === void 0) {
    state = {};
  }
  var result = {};
  stateKeys.forEach(function(k2) {
    if (state.hasOwnProperty(k2)) {
      result[k2] = state[k2];
    }
  });
  return result;
}
function getState(state, props) {
  return Object.keys(state).reduce(function(prevState, key) {
    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];
    return prevState;
  }, {});
}
function isControlledProp(props, key) {
  return props[key] !== void 0;
}
function normalizeArrowKey(event) {
  var key = event.key, keyCode = event.keyCode;
  if (keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0) {
    return "Arrow" + key;
  }
  return key;
}
function isPlainObject(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
  if (circular === void 0) {
    circular = true;
  }
  if (itemCount === 0) {
    return -1;
  }
  var itemsLastIndex = itemCount - 1;
  if (typeof baseIndex !== "number" || baseIndex < 0 || baseIndex >= itemCount) {
    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
  }
  var newIndex = baseIndex + moveAmount;
  if (newIndex < 0) {
    newIndex = circular ? itemsLastIndex : 0;
  } else if (newIndex > itemsLastIndex) {
    newIndex = circular ? 0 : itemsLastIndex;
  }
  var nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);
  if (nonDisabledNewIndex === -1) {
    return baseIndex >= itemCount ? -1 : baseIndex;
  }
  return nonDisabledNewIndex;
}
function getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
  var currentElementNode = getItemNodeFromIndex(baseIndex);
  if (!currentElementNode || !currentElementNode.hasAttribute("disabled")) {
    return baseIndex;
  }
  if (moveAmount > 0) {
    for (var index = baseIndex + 1; index < itemCount; index++) {
      if (!getItemNodeFromIndex(index).hasAttribute("disabled")) {
        return index;
      }
    }
  } else {
    for (var _index = baseIndex - 1; _index >= 0; _index--) {
      if (!getItemNodeFromIndex(_index).hasAttribute("disabled")) {
        return _index;
      }
    }
  }
  if (circular) {
    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);
  }
  return -1;
}
function targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {
  if (checkActiveElement === void 0) {
    checkActiveElement = true;
  }
  return downshiftElements.some(function(contextNode) {
    return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));
  });
}
var validateControlledUnchanged = noop;
if (true) {
  validateControlledUnchanged = function validateControlledUnchanged2(state, prevProps, nextProps) {
    var warningDescription = "This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props";
    Object.keys(state).forEach(function(propKey) {
      if (prevProps[propKey] !== void 0 && nextProps[propKey] === void 0) {
        console.error('downshift: A component has changed the controlled prop "' + propKey + '" to be uncontrolled. ' + warningDescription);
      } else if (prevProps[propKey] === void 0 && nextProps[propKey] !== void 0) {
        console.error('downshift: A component has changed the uncontrolled prop "' + propKey + '" to be controlled. ' + warningDescription);
      }
    });
  };
}
var cleanupStatus = debounce(function(documentProp) {
  getStatusDiv(documentProp).textContent = "";
}, 500);
function setStatus(status, documentProp) {
  var div = getStatusDiv(documentProp);
  if (!status) {
    return;
  }
  div.textContent = status;
  cleanupStatus(documentProp);
}
function getStatusDiv(documentProp) {
  if (documentProp === void 0) {
    documentProp = document;
  }
  var statusDiv = documentProp.getElementById("a11y-status-message");
  if (statusDiv) {
    return statusDiv;
  }
  statusDiv = documentProp.createElement("div");
  statusDiv.setAttribute("id", "a11y-status-message");
  statusDiv.setAttribute("role", "status");
  statusDiv.setAttribute("aria-live", "polite");
  statusDiv.setAttribute("aria-relevant", "additions text");
  Object.assign(statusDiv.style, {
    border: "0",
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    width: "1px"
  });
  documentProp.body.appendChild(statusDiv);
  return statusDiv;
}
var unknown = true ? "__autocomplete_unknown__" : 0;
var mouseUp = true ? "__autocomplete_mouseup__" : 1;
var itemMouseEnter = true ? "__autocomplete_item_mouseenter__" : 2;
var keyDownArrowUp = true ? "__autocomplete_keydown_arrow_up__" : 3;
var keyDownArrowDown = true ? "__autocomplete_keydown_arrow_down__" : 4;
var keyDownEscape = true ? "__autocomplete_keydown_escape__" : 5;
var keyDownEnter = true ? "__autocomplete_keydown_enter__" : 6;
var keyDownHome = true ? "__autocomplete_keydown_home__" : 7;
var keyDownEnd = true ? "__autocomplete_keydown_end__" : 8;
var clickItem = true ? "__autocomplete_click_item__" : 9;
var blurInput = true ? "__autocomplete_blur_input__" : 10;
var changeInput = true ? "__autocomplete_change_input__" : 11;
var keyDownSpaceButton = true ? "__autocomplete_keydown_space_button__" : 12;
var clickButton = true ? "__autocomplete_click_button__" : 13;
var blurButton = true ? "__autocomplete_blur_button__" : 14;
var controlledPropUpdatedSelectedItem = true ? "__autocomplete_controlled_prop_updated_selected_item__" : 15;
var touchEnd = true ? "__autocomplete_touchend__" : 16;
var stateChangeTypes$3 = Object.freeze({
  __proto__: null,
  unknown,
  mouseUp,
  itemMouseEnter,
  keyDownArrowUp,
  keyDownArrowDown,
  keyDownEscape,
  keyDownEnter,
  keyDownHome,
  keyDownEnd,
  clickItem,
  blurInput,
  changeInput,
  keyDownSpaceButton,
  clickButton,
  blurButton,
  controlledPropUpdatedSelectedItem,
  touchEnd
});
var _excluded$4 = ["refKey", "ref"];
var _excluded2$3 = ["onClick", "onPress", "onKeyDown", "onKeyUp", "onBlur"];
var _excluded3$2 = ["onKeyDown", "onBlur", "onChange", "onInput", "onChangeText"];
var _excluded4$1 = ["refKey", "ref"];
var _excluded5 = ["onMouseMove", "onMouseDown", "onClick", "onPress", "index", "item"];
var Downshift = function() {
  var Downshift2 = function(_Component) {
    _inheritsLoose(Downshift3, _Component);
    function Downshift3(_props) {
      var _this;
      _this = _Component.call(this, _props) || this;
      _this.id = _this.props.id || "downshift-" + generateId();
      _this.menuId = _this.props.menuId || _this.id + "-menu";
      _this.labelId = _this.props.labelId || _this.id + "-label";
      _this.inputId = _this.props.inputId || _this.id + "-input";
      _this.getItemId = _this.props.getItemId || function(index) {
        return _this.id + "-item-" + index;
      };
      _this.input = null;
      _this.items = [];
      _this.itemCount = null;
      _this.previousResultCount = 0;
      _this.timeoutIds = [];
      _this.internalSetTimeout = function(fn, time) {
        var id = setTimeout(function() {
          _this.timeoutIds = _this.timeoutIds.filter(function(i3) {
            return i3 !== id;
          });
          fn();
        }, time);
        _this.timeoutIds.push(id);
      };
      _this.setItemCount = function(count2) {
        _this.itemCount = count2;
      };
      _this.unsetItemCount = function() {
        _this.itemCount = null;
      };
      _this.setHighlightedIndex = function(highlightedIndex, otherStateToSet) {
        if (highlightedIndex === void 0) {
          highlightedIndex = _this.props.defaultHighlightedIndex;
        }
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(_extends({
          highlightedIndex
        }, otherStateToSet));
      };
      _this.clearSelection = function(cb) {
        _this.internalSetState({
          selectedItem: null,
          inputValue: "",
          highlightedIndex: _this.props.defaultHighlightedIndex,
          isOpen: _this.props.defaultIsOpen
        }, cb);
      };
      _this.selectItem = function(item, otherStateToSet, cb) {
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(_extends({
          isOpen: _this.props.defaultIsOpen,
          highlightedIndex: _this.props.defaultHighlightedIndex,
          selectedItem: item,
          inputValue: _this.props.itemToString(item)
        }, otherStateToSet), cb);
      };
      _this.selectItemAtIndex = function(itemIndex, otherStateToSet, cb) {
        var item = _this.items[itemIndex];
        if (item == null) {
          return;
        }
        _this.selectItem(item, otherStateToSet, cb);
      };
      _this.selectHighlightedItem = function(otherStateToSet, cb) {
        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);
      };
      _this.internalSetState = function(stateToSet, cb) {
        var isItemSelected, onChangeArg;
        var onStateChangeArg = {};
        var isStateToSetFunction = typeof stateToSet === "function";
        if (!isStateToSetFunction && stateToSet.hasOwnProperty("inputValue")) {
          _this.props.onInputValueChange(stateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), stateToSet));
        }
        return _this.setState(function(state) {
          state = _this.getState(state);
          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;
          newStateToSet = _this.props.stateReducer(state, newStateToSet);
          isItemSelected = newStateToSet.hasOwnProperty("selectedItem");
          var nextState = {};
          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
            onChangeArg = newStateToSet.selectedItem;
          }
          newStateToSet.type = newStateToSet.type || unknown;
          Object.keys(newStateToSet).forEach(function(key) {
            if (state[key] !== newStateToSet[key]) {
              onStateChangeArg[key] = newStateToSet[key];
            }
            if (key === "type") {
              return;
            }
            newStateToSet[key];
            if (!isControlledProp(_this.props, key)) {
              nextState[key] = newStateToSet[key];
            }
          });
          if (isStateToSetFunction && newStateToSet.hasOwnProperty("inputValue")) {
            _this.props.onInputValueChange(newStateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), newStateToSet));
          }
          return nextState;
        }, function() {
          cbToCb(cb)();
          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;
          if (hasMoreStateThanType) {
            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());
          }
          if (isItemSelected) {
            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());
          }
          if (onChangeArg !== void 0) {
            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());
          }
          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());
        });
      };
      _this.rootRef = function(node) {
        return _this._rootNode = node;
      };
      _this.getRootProps = function(_temp, _temp2) {
        var _extends2;
        var _ref = _temp === void 0 ? {} : _temp, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey, ref2 = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);
        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
        _this.getRootProps.called = true;
        _this.getRootProps.refKey = refKey;
        _this.getRootProps.suppressRefError = suppressRefError;
        var _this$getState = _this.getState(), isOpen = _this$getState.isOpen;
        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref2, _this.rootRef), _extends2.role = "combobox", _extends2["aria-expanded"] = isOpen, _extends2["aria-haspopup"] = "listbox", _extends2["aria-owns"] = isOpen ? _this.menuId : null, _extends2["aria-labelledby"] = _this.labelId, _extends2), rest);
      };
      _this.keyDownHandlers = {
        ArrowDown: function ArrowDown(event) {
          var _this2 = this;
          event.preventDefault();
          if (this.getState().isOpen) {
            var amount = event.shiftKey ? 5 : 1;
            this.moveHighlightedIndex(amount, {
              type: keyDownArrowDown
            });
          } else {
            this.internalSetState({
              isOpen: true,
              type: keyDownArrowDown
            }, function() {
              var itemCount = _this2.getItemCount();
              if (itemCount > 0) {
                var _this2$getState = _this2.getState(), highlightedIndex = _this2$getState.highlightedIndex;
                var nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, function(index) {
                  return _this2.getItemNodeFromIndex(index);
                });
                _this2.setHighlightedIndex(nextHighlightedIndex, {
                  type: keyDownArrowDown
                });
              }
            });
          }
        },
        ArrowUp: function ArrowUp(event) {
          var _this3 = this;
          event.preventDefault();
          if (this.getState().isOpen) {
            var amount = event.shiftKey ? -5 : -1;
            this.moveHighlightedIndex(amount, {
              type: keyDownArrowUp
            });
          } else {
            this.internalSetState({
              isOpen: true,
              type: keyDownArrowUp
            }, function() {
              var itemCount = _this3.getItemCount();
              if (itemCount > 0) {
                var _this3$getState = _this3.getState(), highlightedIndex = _this3$getState.highlightedIndex;
                var nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, function(index) {
                  return _this3.getItemNodeFromIndex(index);
                });
                _this3.setHighlightedIndex(nextHighlightedIndex, {
                  type: keyDownArrowUp
                });
              }
            });
          }
        },
        Enter: function Enter(event) {
          if (event.which === 229) {
            return;
          }
          var _this$getState2 = this.getState(), isOpen = _this$getState2.isOpen, highlightedIndex = _this$getState2.highlightedIndex;
          if (isOpen && highlightedIndex != null) {
            event.preventDefault();
            var item = this.items[highlightedIndex];
            var itemNode = this.getItemNodeFromIndex(highlightedIndex);
            if (item == null || itemNode && itemNode.hasAttribute("disabled")) {
              return;
            }
            this.selectHighlightedItem({
              type: keyDownEnter
            });
          }
        },
        Escape: function Escape(event) {
          event.preventDefault();
          this.reset(_extends({
            type: keyDownEscape
          }, !this.state.isOpen && {
            selectedItem: null,
            inputValue: ""
          }));
        }
      };
      _this.buttonKeyDownHandlers = _extends({}, _this.keyDownHandlers, {
        " ": function _(event) {
          event.preventDefault();
          this.toggleMenu({
            type: keyDownSpaceButton
          });
        }
      });
      _this.inputKeyDownHandlers = _extends({}, _this.keyDownHandlers, {
        Home: function Home(event) {
          var _this4 = this;
          var _this$getState3 = this.getState(), isOpen = _this$getState3.isOpen;
          if (!isOpen) {
            return;
          }
          event.preventDefault();
          var itemCount = this.getItemCount();
          if (itemCount <= 0 || !isOpen) {
            return;
          }
          var newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, function(index) {
            return _this4.getItemNodeFromIndex(index);
          }, false);
          this.setHighlightedIndex(newHighlightedIndex, {
            type: keyDownHome
          });
        },
        End: function End(event) {
          var _this5 = this;
          var _this$getState4 = this.getState(), isOpen = _this$getState4.isOpen;
          if (!isOpen) {
            return;
          }
          event.preventDefault();
          var itemCount = this.getItemCount();
          if (itemCount <= 0 || !isOpen) {
            return;
          }
          var newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, function(index) {
            return _this5.getItemNodeFromIndex(index);
          }, false);
          this.setHighlightedIndex(newHighlightedIndex, {
            type: keyDownEnd
          });
        }
      });
      _this.getToggleButtonProps = function(_temp3) {
        var _ref3 = _temp3 === void 0 ? {} : _temp3, onClick = _ref3.onClick;
        _ref3.onPress;
        var onKeyDown = _ref3.onKeyDown, onKeyUp = _ref3.onKeyUp, onBlur = _ref3.onBlur, rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$3);
        var _this$getState5 = _this.getState(), isOpen = _this$getState5.isOpen;
        var enabledEventHandlers = {
          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),
          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),
          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),
          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)
        };
        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;
        return _extends({
          type: "button",
          role: "button",
          "aria-label": isOpen ? "close menu" : "open menu",
          "aria-haspopup": true,
          "data-toggle": true
        }, eventHandlers, rest);
      };
      _this.buttonHandleKeyUp = function(event) {
        event.preventDefault();
      };
      _this.buttonHandleKeyDown = function(event) {
        var key = normalizeArrowKey(event);
        if (_this.buttonKeyDownHandlers[key]) {
          _this.buttonKeyDownHandlers[key].call(_assertThisInitialized(_this), event);
        }
      };
      _this.buttonHandleClick = function(event) {
        event.preventDefault();
        if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {
          event.target.focus();
        }
        if (false) {
          _this.toggleMenu({
            type: clickButton
          });
        } else {
          _this.internalSetTimeout(function() {
            return _this.toggleMenu({
              type: clickButton
            });
          });
        }
      };
      _this.buttonHandleBlur = function(event) {
        var blurTarget = event.target;
        _this.internalSetTimeout(function() {
          if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget) {
            _this.reset({
              type: blurButton
            });
          }
        });
      };
      _this.getLabelProps = function(props) {
        return _extends({
          htmlFor: _this.inputId,
          id: _this.labelId
        }, props);
      };
      _this.getInputProps = function(_temp4) {
        var _ref4 = _temp4 === void 0 ? {} : _temp4, onKeyDown = _ref4.onKeyDown, onBlur = _ref4.onBlur, onChange = _ref4.onChange, onInput = _ref4.onInput;
        _ref4.onChangeText;
        var rest = _objectWithoutPropertiesLoose(_ref4, _excluded3$2);
        var onChangeKey;
        var eventHandlers = {};
        {
          onChangeKey = "onChange";
        }
        var _this$getState6 = _this.getState(), inputValue = _this$getState6.inputValue, isOpen = _this$getState6.isOpen, highlightedIndex = _this$getState6.highlightedIndex;
        if (!rest.disabled) {
          var _eventHandlers;
          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);
        }
        return _extends({
          "aria-autocomplete": "list",
          "aria-activedescendant": isOpen && typeof highlightedIndex === "number" && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,
          "aria-controls": isOpen ? _this.menuId : null,
          "aria-labelledby": _this.labelId,
          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
          // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
          autoComplete: "off",
          value: inputValue,
          id: _this.inputId
        }, eventHandlers, rest);
      };
      _this.inputHandleKeyDown = function(event) {
        var key = normalizeArrowKey(event);
        if (key && _this.inputKeyDownHandlers[key]) {
          _this.inputKeyDownHandlers[key].call(_assertThisInitialized(_this), event);
        }
      };
      _this.inputHandleChange = function(event) {
        _this.internalSetState({
          type: changeInput,
          isOpen: true,
          inputValue: event.target.value,
          highlightedIndex: _this.props.defaultHighlightedIndex
        });
      };
      _this.inputHandleBlur = function() {
        _this.internalSetTimeout(function() {
          var downshiftButtonIsActive = _this.props.environment.document && !!_this.props.environment.document.activeElement && !!_this.props.environment.document.activeElement.dataset && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);
          if (!_this.isMouseDown && !downshiftButtonIsActive) {
            _this.reset({
              type: blurInput
            });
          }
        });
      };
      _this.menuRef = function(node) {
        _this._menuNode = node;
      };
      _this.getMenuProps = function(_temp5, _temp6) {
        var _extends3;
        var _ref5 = _temp5 === void 0 ? {} : _temp5, _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref2 = _ref5.ref, props = _objectWithoutPropertiesLoose(_ref5, _excluded4$1);
        var _ref6 = _temp6 === void 0 ? {} : _temp6, _ref6$suppressRefErro = _ref6.suppressRefError, suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;
        _this.getMenuProps.called = true;
        _this.getMenuProps.refKey = refKey;
        _this.getMenuProps.suppressRefError = suppressRefError;
        return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref2, _this.menuRef), _extends3.role = "listbox", _extends3["aria-labelledby"] = props && props["aria-label"] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);
      };
      _this.getItemProps = function(_temp7) {
        var _enabledEventHandlers;
        var _ref7 = _temp7 === void 0 ? {} : _temp7, onMouseMove = _ref7.onMouseMove, onMouseDown = _ref7.onMouseDown, onClick = _ref7.onClick;
        _ref7.onPress;
        var index = _ref7.index, _ref7$item = _ref7.item, item = _ref7$item === void 0 ? false ? (
          /* istanbul ignore next */
          void 0
        ) : requiredProp("getItemProps", "item") : _ref7$item, rest = _objectWithoutPropertiesLoose(_ref7, _excluded5);
        if (index === void 0) {
          _this.items.push(item);
          index = _this.items.indexOf(item);
        } else {
          _this.items[index] = item;
        }
        var onSelectKey = "onClick";
        var customClickHandler = onClick;
        var enabledEventHandlers = (_enabledEventHandlers = {
          // onMouseMove is used over onMouseEnter here. onMouseMove
          // is only triggered on actual mouse movement while onMouseEnter
          // can fire on DOM changes, interrupting keyboard navigation
          onMouseMove: callAllEventHandlers(onMouseMove, function() {
            if (index === _this.getState().highlightedIndex) {
              return;
            }
            _this.setHighlightedIndex(index, {
              type: itemMouseEnter
            });
            _this.avoidScrolling = true;
            _this.internalSetTimeout(function() {
              return _this.avoidScrolling = false;
            }, 250);
          }),
          onMouseDown: callAllEventHandlers(onMouseDown, function(event) {
            event.preventDefault();
          })
        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function() {
          _this.selectItemAtIndex(index, {
            type: clickItem
          });
        }), _enabledEventHandlers);
        var eventHandlers = rest.disabled ? {
          onMouseDown: enabledEventHandlers.onMouseDown
        } : enabledEventHandlers;
        return _extends({
          id: _this.getItemId(index),
          role: "option",
          "aria-selected": _this.getState().highlightedIndex === index
        }, eventHandlers, rest);
      };
      _this.clearItems = function() {
        _this.items = [];
      };
      _this.reset = function(otherStateToSet, cb) {
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(function(_ref8) {
          var selectedItem = _ref8.selectedItem;
          return _extends({
            isOpen: _this.props.defaultIsOpen,
            highlightedIndex: _this.props.defaultHighlightedIndex,
            inputValue: _this.props.itemToString(selectedItem)
          }, otherStateToSet);
        }, cb);
      };
      _this.toggleMenu = function(otherStateToSet, cb) {
        if (otherStateToSet === void 0) {
          otherStateToSet = {};
        }
        otherStateToSet = pickState(otherStateToSet);
        _this.internalSetState(function(_ref9) {
          var isOpen = _ref9.isOpen;
          return _extends({
            isOpen: !isOpen
          }, isOpen && {
            highlightedIndex: _this.props.defaultHighlightedIndex
          }, otherStateToSet);
        }, function() {
          var _this$getState7 = _this.getState(), isOpen = _this$getState7.isOpen, highlightedIndex = _this$getState7.highlightedIndex;
          if (isOpen) {
            if (_this.getItemCount() > 0 && typeof highlightedIndex === "number") {
              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);
            }
          }
          cbToCb(cb)();
        });
      };
      _this.openMenu = function(cb) {
        _this.internalSetState({
          isOpen: true
        }, cb);
      };
      _this.closeMenu = function(cb) {
        _this.internalSetState({
          isOpen: false
        }, cb);
      };
      _this.updateStatus = debounce(function() {
        var state = _this.getState();
        var item = _this.items[state.highlightedIndex];
        var resultCount = _this.getItemCount();
        var status = _this.props.getA11yStatusMessage(_extends({
          itemToString: _this.props.itemToString,
          previousResultCount: _this.previousResultCount,
          resultCount,
          highlightedItem: item
        }, state));
        _this.previousResultCount = resultCount;
        setStatus(status, _this.props.environment.document);
      }, 200);
      var _this$props = _this.props, defaultHighlightedIndex = _this$props.defaultHighlightedIndex, _this$props$initialHi = _this$props.initialHighlightedIndex, _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi, defaultIsOpen = _this$props.defaultIsOpen, _this$props$initialIs = _this$props.initialIsOpen, _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs, _this$props$initialIn = _this$props.initialInputValue, _inputValue = _this$props$initialIn === void 0 ? "" : _this$props$initialIn, _this$props$initialSe = _this$props.initialSelectedItem, _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;
      var _state = _this.getState({
        highlightedIndex: _highlightedIndex,
        isOpen: _isOpen,
        inputValue: _inputValue,
        selectedItem: _selectedItem
      });
      if (_state.selectedItem != null && _this.props.initialInputValue === void 0) {
        _state.inputValue = _this.props.itemToString(_state.selectedItem);
      }
      _this.state = _state;
      return _this;
    }
    var _proto = Downshift3.prototype;
    _proto.internalClearTimeouts = function internalClearTimeouts() {
      this.timeoutIds.forEach(function(id) {
        clearTimeout(id);
      });
      this.timeoutIds = [];
    };
    _proto.getState = function getState$1(stateToMerge) {
      if (stateToMerge === void 0) {
        stateToMerge = this.state;
      }
      return getState(stateToMerge, this.props);
    };
    _proto.getItemCount = function getItemCount() {
      var itemCount = this.items.length;
      if (this.itemCount != null) {
        itemCount = this.itemCount;
      } else if (this.props.itemCount !== void 0) {
        itemCount = this.props.itemCount;
      }
      return itemCount;
    };
    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {
      return this.props.environment.document.getElementById(this.getItemId(index));
    };
    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {
      {
        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);
        this.props.scrollIntoView(node, this._menuNode);
      }
    };
    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {
      var _this6 = this;
      var itemCount = this.getItemCount();
      var _this$getState8 = this.getState(), highlightedIndex = _this$getState8.highlightedIndex;
      if (itemCount > 0) {
        var nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, function(index) {
          return _this6.getItemNodeFromIndex(index);
        });
        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);
      }
    };
    _proto.getStateAndHelpers = function getStateAndHelpers() {
      var _this$getState9 = this.getState(), highlightedIndex = _this$getState9.highlightedIndex, inputValue = _this$getState9.inputValue, selectedItem = _this$getState9.selectedItem, isOpen = _this$getState9.isOpen;
      var itemToString2 = this.props.itemToString;
      var id = this.id;
      var getRootProps = this.getRootProps, getToggleButtonProps = this.getToggleButtonProps, getLabelProps = this.getLabelProps, getMenuProps = this.getMenuProps, getInputProps = this.getInputProps, getItemProps = this.getItemProps, openMenu = this.openMenu, closeMenu = this.closeMenu, toggleMenu = this.toggleMenu, selectItem = this.selectItem, selectItemAtIndex = this.selectItemAtIndex, selectHighlightedItem = this.selectHighlightedItem, setHighlightedIndex = this.setHighlightedIndex, clearSelection = this.clearSelection, clearItems = this.clearItems, reset = this.reset, setItemCount = this.setItemCount, unsetItemCount = this.unsetItemCount, setState = this.internalSetState;
      return {
        // prop getters
        getRootProps,
        getToggleButtonProps,
        getLabelProps,
        getMenuProps,
        getInputProps,
        getItemProps,
        // actions
        reset,
        openMenu,
        closeMenu,
        toggleMenu,
        selectItem,
        selectItemAtIndex,
        selectHighlightedItem,
        setHighlightedIndex,
        clearSelection,
        clearItems,
        setItemCount,
        unsetItemCount,
        setState,
        // props
        itemToString: itemToString2,
        // derived
        id,
        // state
        highlightedIndex,
        inputValue,
        isOpen,
        selectedItem
      };
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this7 = this;
      if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
      }
      {
        var onMouseDown = function onMouseDown2() {
          _this7.isMouseDown = true;
        };
        var onMouseUp = function onMouseUp2(event) {
          _this7.isMouseDown = false;
          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment);
          if (!contextWithinDownshift && _this7.getState().isOpen) {
            _this7.reset({
              type: mouseUp
            }, function() {
              return _this7.props.onOuterClick(_this7.getStateAndHelpers());
            });
          }
        };
        var onTouchStart = function onTouchStart2() {
          _this7.isTouchMove = false;
        };
        var onTouchMove = function onTouchMove2() {
          _this7.isTouchMove = true;
        };
        var onTouchEnd = function onTouchEnd2(event) {
          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment, false);
          if (!_this7.isTouchMove && !contextWithinDownshift && _this7.getState().isOpen) {
            _this7.reset({
              type: touchEnd
            }, function() {
              return _this7.props.onOuterClick(_this7.getStateAndHelpers());
            });
          }
        };
        var environment = this.props.environment;
        environment.addEventListener("mousedown", onMouseDown);
        environment.addEventListener("mouseup", onMouseUp);
        environment.addEventListener("touchstart", onTouchStart);
        environment.addEventListener("touchmove", onTouchMove);
        environment.addEventListener("touchend", onTouchEnd);
        this.cleanup = function() {
          _this7.internalClearTimeouts();
          _this7.updateStatus.cancel();
          environment.removeEventListener("mousedown", onMouseDown);
          environment.removeEventListener("mouseup", onMouseUp);
          environment.removeEventListener("touchstart", onTouchStart);
          environment.removeEventListener("touchmove", onTouchMove);
          environment.removeEventListener("touchend", onTouchEnd);
        };
      }
    };
    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {
      var _ref10 = this.props.highlightedIndex === void 0 ? this.getState() : this.props, currentHighlightedIndex = _ref10.highlightedIndex;
      var _ref11 = prevProps.highlightedIndex === void 0 ? prevState : prevProps, prevHighlightedIndex = _ref11.highlightedIndex;
      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;
      var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;
      return scrollWhenOpen || scrollWhenNavigating;
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
      if (true) {
        validateControlledUnchanged(this.state, prevProps, this.props);
        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
        }
      }
      if (isControlledProp(this.props, "selectedItem") && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
        this.internalSetState({
          type: controlledPropUpdatedSelectedItem,
          inputValue: this.props.itemToString(this.props.selectedItem)
        });
      }
      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {
        this.scrollHighlightedItemIntoView();
      }
      {
        this.updateStatus();
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cleanup();
    };
    _proto.render = function render() {
      var children = unwrapArray(this.props.children, noop);
      this.clearItems();
      this.getRootProps.called = false;
      this.getRootProps.refKey = void 0;
      this.getRootProps.suppressRefError = void 0;
      this.getMenuProps.called = false;
      this.getMenuProps.refKey = void 0;
      this.getMenuProps.suppressRefError = void 0;
      this.getLabelProps.called = false;
      this.getInputProps.called = false;
      var element = unwrapArray(children(this.getStateAndHelpers()));
      if (!element) {
        return null;
      }
      if (this.getRootProps.called || this.props.suppressRefError) {
        if (!this.getRootProps.suppressRefError && !this.props.suppressRefError) {
          validateGetRootPropsCalledCorrectly(element, this.getRootProps);
        }
        return element;
      } else if (isDOMElement(element)) {
        return (0, import_react79.cloneElement)(element, this.getRootProps(getElementProps(element)));
      }
      if (true) {
        throw new Error("downshift: If you return a non-DOM element, you must apply the getRootProps function");
      }
      return void 0;
    };
    return Downshift3;
  }(import_react79.Component);
  Downshift2.defaultProps = {
    defaultHighlightedIndex: null,
    defaultIsOpen: false,
    getA11yStatusMessage: getA11yStatusMessage$1,
    itemToString: function itemToString2(i3) {
      if (i3 == null) {
        return "";
      }
      if (isPlainObject(i3) && !i3.hasOwnProperty("toString")) {
        console.warn("downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.", "The object that was passed:", i3);
      }
      return String(i3);
    },
    onStateChange: noop,
    onInputValueChange: noop,
    onUserAction: noop,
    onChange: noop,
    onSelect: noop,
    onOuterClick: noop,
    selectedItemChanged: function selectedItemChanged2(prevItem, item) {
      return prevItem !== item;
    },
    environment: (
      /* istanbul ignore next (ssr) */
      typeof window === "undefined" ? {} : window
    ),
    stateReducer: function stateReducer2(state, stateToSet) {
      return stateToSet;
    },
    suppressRefError: false,
    scrollIntoView
  };
  Downshift2.stateChangeTypes = stateChangeTypes$3;
  return Downshift2;
}();
true ? Downshift.propTypes = {
  children: import_prop_types.default.func,
  defaultHighlightedIndex: import_prop_types.default.number,
  defaultIsOpen: import_prop_types.default.bool,
  initialHighlightedIndex: import_prop_types.default.number,
  initialSelectedItem: import_prop_types.default.any,
  initialInputValue: import_prop_types.default.string,
  initialIsOpen: import_prop_types.default.bool,
  getA11yStatusMessage: import_prop_types.default.func,
  itemToString: import_prop_types.default.func,
  onChange: import_prop_types.default.func,
  onSelect: import_prop_types.default.func,
  onStateChange: import_prop_types.default.func,
  onInputValueChange: import_prop_types.default.func,
  onUserAction: import_prop_types.default.func,
  onOuterClick: import_prop_types.default.func,
  selectedItemChanged: import_prop_types.default.func,
  stateReducer: import_prop_types.default.func,
  itemCount: import_prop_types.default.number,
  id: import_prop_types.default.string,
  environment: import_prop_types.default.shape({
    addEventListener: import_prop_types.default.func,
    removeEventListener: import_prop_types.default.func,
    document: import_prop_types.default.shape({
      getElementById: import_prop_types.default.func,
      activeElement: import_prop_types.default.any,
      body: import_prop_types.default.any
    })
  }),
  suppressRefError: import_prop_types.default.bool,
  scrollIntoView: import_prop_types.default.func,
  // things we keep in state for uncontrolled components
  // but can accept as props for controlled components
  /* eslint-disable react/no-unused-prop-types */
  selectedItem: import_prop_types.default.any,
  isOpen: import_prop_types.default.bool,
  inputValue: import_prop_types.default.string,
  highlightedIndex: import_prop_types.default.number,
  labelId: import_prop_types.default.string,
  inputId: import_prop_types.default.string,
  menuId: import_prop_types.default.string,
  getItemId: import_prop_types.default.func
  /* eslint-enable react/no-unused-prop-types */
} : void 0;
function validateGetMenuPropsCalledCorrectly(node, _ref12) {
  var refKey = _ref12.refKey;
  if (!node) {
    console.error('downshift: The ref prop "' + refKey + '" from getMenuProps was not applied correctly on your menu element.');
  }
}
function validateGetRootPropsCalledCorrectly(element, _ref13) {
  var refKey = _ref13.refKey;
  var refKeySpecified = refKey !== "ref";
  var isComposite = !isDOMElement(element);
  if (isComposite && !refKeySpecified && !(0, import_react_is.isForwardRef)(element)) {
    console.error("downshift: You returned a non-DOM element. You must specify a refKey in getRootProps");
  } else if (!isComposite && refKeySpecified) {
    console.error('downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified "' + refKey + '"');
  }
  if (!(0, import_react_is.isForwardRef)(element) && !getElementProps(element)[refKey]) {
    console.error('downshift: You must apply the ref prop "' + refKey + '" from getRootProps onto your root element.');
  }
}
var _excluded$3 = ["isInitialMount", "highlightedIndex", "items", "environment"];
var dropdownDefaultStateValues = {
  highlightedIndex: -1,
  isOpen: false,
  selectedItem: null,
  inputValue: ""
};
function callOnChangeProps(action, state, newState) {
  var props = action.props, type = action.type;
  var changes = {};
  Object.keys(state).forEach(function(key) {
    invokeOnChangeHandler(key, action, state, newState);
    if (newState[key] !== state[key]) {
      changes[key] = newState[key];
    }
  });
  if (props.onStateChange && Object.keys(changes).length) {
    props.onStateChange(_extends({
      type
    }, changes));
  }
}
function invokeOnChangeHandler(key, action, state, newState) {
  var props = action.props, type = action.type;
  var handler = "on" + capitalizeString(key) + "Change";
  if (props[handler] && newState[key] !== void 0 && newState[key] !== state[key]) {
    props[handler](_extends({
      type
    }, newState));
  }
}
function stateReducer(s3, a3) {
  return a3.changes;
}
function getA11ySelectionMessage(selectionParameters) {
  var selectedItem = selectionParameters.selectedItem, itemToStringLocal = selectionParameters.itemToString;
  return selectedItem ? itemToStringLocal(selectedItem) + " has been selected." : "";
}
var updateA11yStatus = debounce(function(getA11yMessage, document2) {
  setStatus(getA11yMessage(), document2);
}, 200);
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react79.useLayoutEffect : import_react79.useEffect;
function useElementIds(_ref) {
  var _ref$id = _ref.id, id = _ref$id === void 0 ? "downshift-" + generateId() : _ref$id, labelId = _ref.labelId, menuId = _ref.menuId, getItemId = _ref.getItemId, toggleButtonId = _ref.toggleButtonId, inputId = _ref.inputId;
  var elementIdsRef = (0, import_react79.useRef)({
    labelId: labelId || id + "-label",
    menuId: menuId || id + "-menu",
    getItemId: getItemId || function(index) {
      return id + "-item-" + index;
    },
    toggleButtonId: toggleButtonId || id + "-toggle-button",
    inputId: inputId || id + "-input"
  });
  return elementIdsRef.current;
}
function getItemAndIndex(itemProp, indexProp, items, errorMessage) {
  var item, index;
  if (itemProp === void 0) {
    if (indexProp === void 0) {
      throw new Error(errorMessage);
    }
    item = items[indexProp];
    index = indexProp;
  } else {
    index = indexProp === void 0 ? items.indexOf(itemProp) : indexProp;
    item = itemProp;
  }
  return [item, index];
}
function itemToString(item) {
  return item ? String(item) : "";
}
function isAcceptedCharacterKey(key) {
  return /^\S{1}$/.test(key);
}
function capitalizeString(string) {
  return "" + string.slice(0, 1).toUpperCase() + string.slice(1);
}
function useLatestRef(val) {
  var ref2 = (0, import_react79.useRef)(val);
  ref2.current = val;
  return ref2;
}
function useEnhancedReducer(reducer2, initialState, props) {
  var prevStateRef = (0, import_react79.useRef)();
  var actionRef = (0, import_react79.useRef)();
  var enhancedReducer = (0, import_react79.useCallback)(function(state2, action2) {
    actionRef.current = action2;
    state2 = getState(state2, action2.props);
    var changes = reducer2(state2, action2);
    var newState = action2.props.stateReducer(state2, _extends({}, action2, {
      changes
    }));
    return newState;
  }, [reducer2]);
  var _useReducer = (0, import_react79.useReducer)(enhancedReducer, initialState), state = _useReducer[0], dispatch = _useReducer[1];
  var propsRef = useLatestRef(props);
  var dispatchWithProps = (0, import_react79.useCallback)(function(action2) {
    return dispatch(_extends({
      props: propsRef.current
    }, action2));
  }, [propsRef]);
  var action = actionRef.current;
  (0, import_react79.useEffect)(function() {
    if (action && prevStateRef.current && prevStateRef.current !== state) {
      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);
    }
    prevStateRef.current = state;
  }, [state, props, action]);
  return [state, dispatchWithProps];
}
function useControlledReducer$1(reducer2, initialState, props) {
  var _useEnhancedReducer = useEnhancedReducer(reducer2, initialState, props), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];
  return [getState(state, props), dispatch];
}
var defaultProps$3 = {
  itemToString,
  stateReducer,
  getA11ySelectionMessage,
  scrollIntoView,
  environment: (
    /* istanbul ignore next (ssr) */
    typeof window === "undefined" ? {} : window
  )
};
function getDefaultValue$1(props, propKey, defaultStateValues2) {
  if (defaultStateValues2 === void 0) {
    defaultStateValues2 = dropdownDefaultStateValues;
  }
  var defaultValue = props["default" + capitalizeString(propKey)];
  if (defaultValue !== void 0) {
    return defaultValue;
  }
  return defaultStateValues2[propKey];
}
function getInitialValue$1(props, propKey, defaultStateValues2) {
  if (defaultStateValues2 === void 0) {
    defaultStateValues2 = dropdownDefaultStateValues;
  }
  var value = props[propKey];
  if (value !== void 0) {
    return value;
  }
  var initialValue = props["initial" + capitalizeString(propKey)];
  if (initialValue !== void 0) {
    return initialValue;
  }
  return getDefaultValue$1(props, propKey, defaultStateValues2);
}
function getInitialState$2(props) {
  var selectedItem = getInitialValue$1(props, "selectedItem");
  var isOpen = getInitialValue$1(props, "isOpen");
  var highlightedIndex = getInitialValue$1(props, "highlightedIndex");
  var inputValue = getInitialValue$1(props, "inputValue");
  return {
    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,
    isOpen,
    selectedItem,
    inputValue
  };
}
function getHighlightedIndexOnOpen(props, state, offset3) {
  var items = props.items, initialHighlightedIndex = props.initialHighlightedIndex, defaultHighlightedIndex = props.defaultHighlightedIndex;
  var selectedItem = state.selectedItem, highlightedIndex = state.highlightedIndex;
  if (items.length === 0) {
    return -1;
  }
  if (initialHighlightedIndex !== void 0 && highlightedIndex === initialHighlightedIndex) {
    return initialHighlightedIndex;
  }
  if (defaultHighlightedIndex !== void 0) {
    return defaultHighlightedIndex;
  }
  if (selectedItem) {
    return items.indexOf(selectedItem);
  }
  if (offset3 === 0) {
    return -1;
  }
  return offset3 < 0 ? items.length - 1 : 0;
}
function useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {
  var mouseAndTouchTrackersRef = (0, import_react79.useRef)({
    isMouseDown: false,
    isTouchMove: false
  });
  (0, import_react79.useEffect)(function() {
    if ((environment == null ? void 0 : environment.addEventListener) == null) {
      return;
    }
    var onMouseDown = function onMouseDown2() {
      mouseAndTouchTrackersRef.current.isMouseDown = true;
    };
    var onMouseUp = function onMouseUp2(event) {
      mouseAndTouchTrackersRef.current.isMouseDown = false;
      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref2) {
        return ref2.current;
      }), environment)) {
        handleBlur();
      }
    };
    var onTouchStart = function onTouchStart2() {
      mouseAndTouchTrackersRef.current.isTouchMove = false;
    };
    var onTouchMove = function onTouchMove2() {
      mouseAndTouchTrackersRef.current.isTouchMove = true;
    };
    var onTouchEnd = function onTouchEnd2(event) {
      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref2) {
        return ref2.current;
      }), environment, false)) {
        handleBlur();
      }
    };
    environment.addEventListener("mousedown", onMouseDown);
    environment.addEventListener("mouseup", onMouseUp);
    environment.addEventListener("touchstart", onTouchStart);
    environment.addEventListener("touchmove", onTouchMove);
    environment.addEventListener("touchend", onTouchEnd);
    return function cleanup() {
      environment.removeEventListener("mousedown", onMouseDown);
      environment.removeEventListener("mouseup", onMouseUp);
      environment.removeEventListener("touchstart", onTouchStart);
      environment.removeEventListener("touchmove", onTouchMove);
      environment.removeEventListener("touchend", onTouchEnd);
    };
  }, [isOpen, environment]);
  return mouseAndTouchTrackersRef;
}
var useGetterPropsCalledChecker = function useGetterPropsCalledChecker2() {
  return noop;
};
if (true) {
  useGetterPropsCalledChecker = function useGetterPropsCalledChecker3() {
    var isInitialMountRef = (0, import_react79.useRef)(true);
    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {
      propKeys[_key] = arguments[_key];
    }
    var getterPropsCalledRef = (0, import_react79.useRef)(propKeys.reduce(function(acc, propKey) {
      acc[propKey] = {};
      return acc;
    }, {}));
    (0, import_react79.useEffect)(function() {
      Object.keys(getterPropsCalledRef.current).forEach(function(propKey) {
        var propCallInfo = getterPropsCalledRef.current[propKey];
        if (isInitialMountRef.current) {
          if (!Object.keys(propCallInfo).length) {
            console.error("downshift: You forgot to call the " + propKey + " getter function on your component / element.");
            return;
          }
        }
        var suppressRefError = propCallInfo.suppressRefError, refKey = propCallInfo.refKey, elementRef = propCallInfo.elementRef;
        if ((!elementRef || !elementRef.current) && !suppressRefError) {
          console.error('downshift: The ref prop "' + refKey + '" from ' + propKey + " was not applied correctly on your element.");
        }
      });
      isInitialMountRef.current = false;
    });
    var setGetterPropCallInfo = (0, import_react79.useCallback)(function(propKey, suppressRefError, refKey, elementRef) {
      getterPropsCalledRef.current[propKey] = {
        suppressRefError,
        refKey,
        elementRef
      };
    }, []);
    return setGetterPropCallInfo;
  };
}
function useA11yMessageSetter(getA11yMessage, dependencyArray, _ref2) {
  var isInitialMount = _ref2.isInitialMount, highlightedIndex = _ref2.highlightedIndex, items = _ref2.items, environment = _ref2.environment, rest = _objectWithoutPropertiesLoose(_ref2, _excluded$3);
  (0, import_react79.useEffect)(function() {
    if (isInitialMount || false) {
      return;
    }
    updateA11yStatus(function() {
      return getA11yMessage(_extends({
        highlightedIndex,
        highlightedItem: items[highlightedIndex],
        resultCount: items.length
      }, rest));
    }, environment.document);
  }, dependencyArray);
}
function useScrollIntoView(_ref3) {
  var highlightedIndex = _ref3.highlightedIndex, isOpen = _ref3.isOpen, itemRefs = _ref3.itemRefs, getItemNodeFromIndex = _ref3.getItemNodeFromIndex, menuElement = _ref3.menuElement, scrollIntoViewProp = _ref3.scrollIntoView;
  var shouldScrollRef = (0, import_react79.useRef)(true);
  useIsomorphicLayoutEffect2(function() {
    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {
      return;
    }
    if (shouldScrollRef.current === false) {
      shouldScrollRef.current = true;
    } else {
      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);
    }
  }, [highlightedIndex]);
  return shouldScrollRef;
}
var useControlPropsValidator = noop;
if (true) {
  useControlPropsValidator = function useControlPropsValidator2(_ref4) {
    var isInitialMount = _ref4.isInitialMount, props = _ref4.props, state = _ref4.state;
    var prevPropsRef = (0, import_react79.useRef)(props);
    (0, import_react79.useEffect)(function() {
      if (isInitialMount) {
        return;
      }
      validateControlledUnchanged(state, prevPropsRef.current, props);
      prevPropsRef.current = props;
    }, [state, props, isInitialMount]);
  };
}
function getChangesOnSelection(props, highlightedIndex, inputValue) {
  var _props$items;
  if (inputValue === void 0) {
    inputValue = true;
  }
  var shouldSelect = ((_props$items = props.items) == null ? void 0 : _props$items.length) && highlightedIndex >= 0;
  return _extends({
    isOpen: false,
    highlightedIndex: -1
  }, shouldSelect && _extends({
    selectedItem: props.items[highlightedIndex],
    isOpen: getDefaultValue$1(props, "isOpen"),
    highlightedIndex: getDefaultValue$1(props, "highlightedIndex")
  }, inputValue && {
    inputValue: props.itemToString(props.items[highlightedIndex])
  }));
}
function downshiftCommonReducer(state, action, stateChangeTypes2) {
  var type = action.type, props = action.props;
  var changes;
  switch (type) {
    case stateChangeTypes2.ItemMouseMove:
      changes = {
        highlightedIndex: action.disabled ? -1 : action.index
      };
      break;
    case stateChangeTypes2.MenuMouseLeave:
      changes = {
        highlightedIndex: -1
      };
      break;
    case stateChangeTypes2.ToggleButtonClick:
    case stateChangeTypes2.FunctionToggleMenu:
      changes = {
        isOpen: !state.isOpen,
        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case stateChangeTypes2.FunctionOpenMenu:
      changes = {
        isOpen: true,
        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case stateChangeTypes2.FunctionCloseMenu:
      changes = {
        isOpen: false
      };
      break;
    case stateChangeTypes2.FunctionSetHighlightedIndex:
      changes = {
        highlightedIndex: action.highlightedIndex
      };
      break;
    case stateChangeTypes2.FunctionSetInputValue:
      changes = {
        inputValue: action.inputValue
      };
      break;
    case stateChangeTypes2.FunctionReset:
      changes = {
        highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
        isOpen: getDefaultValue$1(props, "isOpen"),
        selectedItem: getDefaultValue$1(props, "selectedItem"),
        inputValue: getDefaultValue$1(props, "inputValue")
      };
      break;
    default:
      throw new Error("Reducer called without proper action type.");
  }
  return _extends({}, state, changes);
}
function getItemIndexByCharacterKey(_a) {
  var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString2 = _a.itemToString, getItemNodeFromIndex = _a.getItemNodeFromIndex;
  var lowerCasedKeysSoFar = keysSoFar.toLowerCase();
  for (var index = 0; index < items.length; index++) {
    var offsetIndex = (index + highlightedIndex + (keysSoFar.length < 2 ? 1 : 0)) % items.length;
    var item = items[offsetIndex];
    if (item !== void 0 && itemToString2(item).toLowerCase().startsWith(lowerCasedKeysSoFar)) {
      var element = getItemNodeFromIndex(offsetIndex);
      if (!(element === null || element === void 0 ? void 0 : element.hasAttribute("disabled"))) {
        return offsetIndex;
      }
    }
  }
  return highlightedIndex;
}
var propTypes$2 = {
  items: import_prop_types.default.array.isRequired,
  itemToString: import_prop_types.default.func,
  getA11yStatusMessage: import_prop_types.default.func,
  getA11ySelectionMessage: import_prop_types.default.func,
  highlightedIndex: import_prop_types.default.number,
  defaultHighlightedIndex: import_prop_types.default.number,
  initialHighlightedIndex: import_prop_types.default.number,
  isOpen: import_prop_types.default.bool,
  defaultIsOpen: import_prop_types.default.bool,
  initialIsOpen: import_prop_types.default.bool,
  selectedItem: import_prop_types.default.any,
  initialSelectedItem: import_prop_types.default.any,
  defaultSelectedItem: import_prop_types.default.any,
  id: import_prop_types.default.string,
  labelId: import_prop_types.default.string,
  menuId: import_prop_types.default.string,
  getItemId: import_prop_types.default.func,
  toggleButtonId: import_prop_types.default.string,
  stateReducer: import_prop_types.default.func,
  onSelectedItemChange: import_prop_types.default.func,
  onHighlightedIndexChange: import_prop_types.default.func,
  onStateChange: import_prop_types.default.func,
  onIsOpenChange: import_prop_types.default.func,
  environment: import_prop_types.default.shape({
    addEventListener: import_prop_types.default.func,
    removeEventListener: import_prop_types.default.func,
    document: import_prop_types.default.shape({
      getElementById: import_prop_types.default.func,
      activeElement: import_prop_types.default.any,
      body: import_prop_types.default.any
    })
  })
};
function getA11yStatusMessage(_a) {
  var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;
  if (!isOpen) {
    return "";
  }
  if (!resultCount) {
    return "No results are available.";
  }
  if (resultCount !== previousResultCount) {
    return "".concat(resultCount, " result").concat(resultCount === 1 ? " is" : "s are", " available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.");
  }
  return "";
}
var defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage });
var validatePropTypes$2 = noop;
if (true) {
  validatePropTypes$2 = function(options, caller) {
    import_prop_types.default.checkPropTypes(propTypes$2, options, "prop", caller.name);
  };
}
var ToggleButtonClick$1 = true ? "__togglebutton_click__" : 0;
var ToggleButtonKeyDownArrowDown = true ? "__togglebutton_keydown_arrow_down__" : 1;
var ToggleButtonKeyDownArrowUp = true ? "__togglebutton_keydown_arrow_up__" : 2;
var ToggleButtonKeyDownCharacter = true ? "__togglebutton_keydown_character__" : 3;
var ToggleButtonKeyDownEscape = true ? "__togglebutton_keydown_escape__" : 4;
var ToggleButtonKeyDownHome = true ? "__togglebutton_keydown_home__" : 5;
var ToggleButtonKeyDownEnd = true ? "__togglebutton_keydown_end__" : 6;
var ToggleButtonKeyDownEnter = true ? "__togglebutton_keydown_enter__" : 7;
var ToggleButtonKeyDownSpaceButton = true ? "__togglebutton_keydown_space_button__" : 8;
var ToggleButtonKeyDownPageUp = true ? "__togglebutton_keydown_page_up__" : 9;
var ToggleButtonKeyDownPageDown = true ? "__togglebutton_keydown_page_down__" : 10;
var ToggleButtonBlur = true ? "__togglebutton_blur__" : 11;
var MenuMouseLeave$1 = true ? "__menu_mouse_leave__" : 12;
var ItemMouseMove$1 = true ? "__item_mouse_move__" : 13;
var ItemClick$1 = true ? "__item_click__" : 14;
var FunctionToggleMenu$1 = true ? "__function_toggle_menu__" : 15;
var FunctionOpenMenu$1 = true ? "__function_open_menu__" : 16;
var FunctionCloseMenu$1 = true ? "__function_close_menu__" : 17;
var FunctionSetHighlightedIndex$1 = true ? "__function_set_highlighted_index__" : 18;
var FunctionSelectItem$1 = true ? "__function_select_item__" : 19;
var FunctionSetInputValue$1 = true ? "__function_set_input_value__" : 20;
var FunctionReset$2 = true ? "__function_reset__" : 21;
var stateChangeTypes$2 = Object.freeze({
  __proto__: null,
  ToggleButtonClick: ToggleButtonClick$1,
  ToggleButtonKeyDownArrowDown,
  ToggleButtonKeyDownArrowUp,
  ToggleButtonKeyDownCharacter,
  ToggleButtonKeyDownEscape,
  ToggleButtonKeyDownHome,
  ToggleButtonKeyDownEnd,
  ToggleButtonKeyDownEnter,
  ToggleButtonKeyDownSpaceButton,
  ToggleButtonKeyDownPageUp,
  ToggleButtonKeyDownPageDown,
  ToggleButtonBlur,
  MenuMouseLeave: MenuMouseLeave$1,
  ItemMouseMove: ItemMouseMove$1,
  ItemClick: ItemClick$1,
  FunctionToggleMenu: FunctionToggleMenu$1,
  FunctionOpenMenu: FunctionOpenMenu$1,
  FunctionCloseMenu: FunctionCloseMenu$1,
  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,
  FunctionSelectItem: FunctionSelectItem$1,
  FunctionSetInputValue: FunctionSetInputValue$1,
  FunctionReset: FunctionReset$2
});
function downshiftSelectReducer(state, action) {
  var _props$items;
  var type = action.type, props = action.props, altKey = action.altKey;
  var changes;
  switch (type) {
    case ItemClick$1:
      changes = {
        isOpen: getDefaultValue$1(props, "isOpen"),
        highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
        selectedItem: props.items[action.index]
      };
      break;
    case ToggleButtonKeyDownCharacter:
      {
        var lowercasedKey = action.key;
        var inputValue = "" + state.inputValue + lowercasedKey;
        var prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;
        var highlightedIndex = getItemIndexByCharacterKey({
          keysSoFar: inputValue,
          highlightedIndex: prevHighlightedIndex,
          items: props.items,
          itemToString: props.itemToString,
          getItemNodeFromIndex: action.getItemNodeFromIndex
        });
        changes = {
          inputValue,
          highlightedIndex,
          isOpen: true
        };
      }
      break;
    case ToggleButtonKeyDownArrowDown:
      {
        var _highlightedIndex = state.isOpen ? getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);
        changes = {
          highlightedIndex: _highlightedIndex,
          isOpen: true
        };
      }
      break;
    case ToggleButtonKeyDownArrowUp:
      if (state.isOpen && altKey) {
        changes = getChangesOnSelection(props, state.highlightedIndex, false);
      } else {
        var _highlightedIndex2 = state.isOpen ? getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : getHighlightedIndexOnOpen(props, state, -1);
        changes = {
          highlightedIndex: _highlightedIndex2,
          isOpen: true
        };
      }
      break;
    case ToggleButtonKeyDownEnter:
    case ToggleButtonKeyDownSpaceButton:
      changes = getChangesOnSelection(props, state.highlightedIndex, false);
      break;
    case ToggleButtonKeyDownHome:
      changes = {
        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false),
        isOpen: true
      };
      break;
    case ToggleButtonKeyDownEnd:
      changes = {
        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false),
        isOpen: true
      };
      break;
    case ToggleButtonKeyDownPageUp:
      changes = {
        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case ToggleButtonKeyDownPageDown:
      changes = {
        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case ToggleButtonKeyDownEscape:
      changes = {
        isOpen: false,
        highlightedIndex: -1
      };
      break;
    case ToggleButtonBlur:
      changes = _extends({
        isOpen: false,
        highlightedIndex: -1
      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && {
        selectedItem: props.items[state.highlightedIndex]
      });
      break;
    case FunctionSelectItem$1:
      changes = {
        selectedItem: action.selectedItem
      };
      break;
    default:
      return downshiftCommonReducer(state, action, stateChangeTypes$2);
  }
  return _extends({}, state, changes);
}
var _excluded$2 = ["onMouseLeave", "refKey", "onKeyDown", "onBlur", "ref"];
var _excluded2$2 = ["onBlur", "onClick", "onPress", "onKeyDown", "refKey", "ref"];
var _excluded3$1 = ["item", "index", "onMouseMove", "onClick", "onPress", "refKey", "ref", "disabled"];
useSelect.stateChangeTypes = stateChangeTypes$2;
function useSelect(userProps) {
  if (userProps === void 0) {
    userProps = {};
  }
  validatePropTypes$2(userProps, useSelect);
  var props = _extends({}, defaultProps$2, userProps);
  var items = props.items, scrollIntoView2 = props.scrollIntoView, environment = props.environment, itemToString2 = props.itemToString, getA11ySelectionMessage2 = props.getA11ySelectionMessage, getA11yStatusMessage2 = props.getA11yStatusMessage;
  var initialState = getInitialState$2(props);
  var _useControlledReducer = useControlledReducer$1(downshiftSelectReducer, initialState, props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
  var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;
  var toggleButtonRef = (0, import_react79.useRef)(null);
  var menuRef = (0, import_react79.useRef)(null);
  var itemRefs = (0, import_react79.useRef)({});
  var clearTimeoutRef = (0, import_react79.useRef)(null);
  var elementIds = useElementIds(props);
  var previousResultCountRef = (0, import_react79.useRef)();
  var isInitialMountRef = (0, import_react79.useRef)(true);
  var latest = useLatestRef({
    state,
    props
  });
  var getItemNodeFromIndex = (0, import_react79.useCallback)(function(index) {
    return itemRefs.current[elementIds.getItemId(index)];
  }, [elementIds]);
  useA11yMessageSetter(getA11yStatusMessage2, [isOpen, highlightedIndex, inputValue, items], _extends({
    isInitialMount: isInitialMountRef.current,
    previousResultCount: previousResultCountRef.current,
    items,
    environment,
    itemToString: itemToString2
  }, state));
  useA11yMessageSetter(getA11ySelectionMessage2, [selectedItem], _extends({
    isInitialMount: isInitialMountRef.current,
    previousResultCount: previousResultCountRef.current,
    items,
    environment,
    itemToString: itemToString2
  }, state));
  var shouldScrollRef = useScrollIntoView({
    menuElement: menuRef.current,
    highlightedIndex,
    isOpen,
    itemRefs,
    scrollIntoView: scrollIntoView2,
    getItemNodeFromIndex
  });
  (0, import_react79.useEffect)(function() {
    clearTimeoutRef.current = debounce(function(outerDispatch) {
      outerDispatch({
        type: FunctionSetInputValue$1,
        inputValue: ""
      });
    }, 500);
    return function() {
      clearTimeoutRef.current.cancel();
    };
  }, []);
  (0, import_react79.useEffect)(function() {
    if (!inputValue) {
      return;
    }
    clearTimeoutRef.current(dispatch);
  }, [dispatch, inputValue]);
  useControlPropsValidator({
    isInitialMount: isInitialMountRef.current,
    props,
    state
  });
  (0, import_react79.useEffect)(function() {
    if (isInitialMountRef.current) {
      return;
    }
    previousResultCountRef.current = items.length;
  });
  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, function() {
    dispatch({
      type: ToggleButtonBlur
    });
  });
  var setGetterPropCallInfo = useGetterPropsCalledChecker("getMenuProps", "getToggleButtonProps");
  (0, import_react79.useEffect)(function() {
    isInitialMountRef.current = false;
    return function() {
      isInitialMountRef.current = true;
    };
  }, []);
  (0, import_react79.useEffect)(function() {
    if (!isOpen) {
      itemRefs.current = {};
    }
  }, [isOpen]);
  var toggleButtonKeyDownHandlers = (0, import_react79.useMemo)(function() {
    return {
      ArrowDown: function ArrowDown(event) {
        event.preventDefault();
        dispatch({
          type: ToggleButtonKeyDownArrowDown,
          getItemNodeFromIndex,
          altKey: event.altKey
        });
      },
      ArrowUp: function ArrowUp(event) {
        event.preventDefault();
        dispatch({
          type: ToggleButtonKeyDownArrowUp,
          getItemNodeFromIndex,
          altKey: event.altKey
        });
      },
      Home: function Home(event) {
        event.preventDefault();
        dispatch({
          type: ToggleButtonKeyDownHome,
          getItemNodeFromIndex
        });
      },
      End: function End(event) {
        event.preventDefault();
        dispatch({
          type: ToggleButtonKeyDownEnd,
          getItemNodeFromIndex
        });
      },
      Escape: function Escape() {
        if (latest.current.state.isOpen) {
          dispatch({
            type: ToggleButtonKeyDownEscape
          });
        }
      },
      Enter: function Enter(event) {
        event.preventDefault();
        dispatch({
          type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1
        });
      },
      PageUp: function PageUp(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: ToggleButtonKeyDownPageUp,
            getItemNodeFromIndex
          });
        }
      },
      PageDown: function PageDown(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: ToggleButtonKeyDownPageDown,
            getItemNodeFromIndex
          });
        }
      },
      " ": function _(event) {
        event.preventDefault();
        var currentState = latest.current.state;
        if (!currentState.isOpen) {
          dispatch({
            type: ToggleButtonClick$1
          });
          return;
        }
        if (currentState.inputValue) {
          dispatch({
            type: ToggleButtonKeyDownCharacter,
            key: " ",
            getItemNodeFromIndex
          });
        } else {
          dispatch({
            type: ToggleButtonKeyDownSpaceButton
          });
        }
      }
    };
  }, [dispatch, getItemNodeFromIndex, latest]);
  var toggleMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionToggleMenu$1
    });
  }, [dispatch]);
  var closeMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionCloseMenu$1
    });
  }, [dispatch]);
  var openMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionOpenMenu$1
    });
  }, [dispatch]);
  var setHighlightedIndex = (0, import_react79.useCallback)(function(newHighlightedIndex) {
    dispatch({
      type: FunctionSetHighlightedIndex$1,
      highlightedIndex: newHighlightedIndex
    });
  }, [dispatch]);
  var selectItem = (0, import_react79.useCallback)(function(newSelectedItem) {
    dispatch({
      type: FunctionSelectItem$1,
      selectedItem: newSelectedItem
    });
  }, [dispatch]);
  var reset = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionReset$2
    });
  }, [dispatch]);
  var setInputValue = (0, import_react79.useCallback)(function(newInputValue) {
    dispatch({
      type: FunctionSetInputValue$1,
      inputValue: newInputValue
    });
  }, [dispatch]);
  var getLabelProps = (0, import_react79.useCallback)(function(labelProps) {
    return _extends({
      id: elementIds.labelId,
      htmlFor: elementIds.toggleButtonId
    }, labelProps);
  }, [elementIds]);
  var getMenuProps = (0, import_react79.useCallback)(function(_temp, _temp2) {
    var _extends2;
    var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey;
    _ref.onKeyDown;
    _ref.onBlur;
    var ref2 = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);
    var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
    var menuHandleMouseLeave = function menuHandleMouseLeave2() {
      dispatch({
        type: MenuMouseLeave$1
      });
    };
    setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref2, function(menuNode) {
      menuRef.current = menuNode;
    }), _extends2.id = elementIds.menuId, _extends2.role = "listbox", _extends2["aria-labelledby"] = elementIds.labelId, _extends2.tabIndex = -1, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, menuHandleMouseLeave), _extends2), rest);
  }, [dispatch, setGetterPropCallInfo, elementIds]);
  var getToggleButtonProps = (0, import_react79.useCallback)(function(_temp3, _temp4) {
    var _extends3;
    var _ref3 = _temp3 === void 0 ? {} : _temp3, onBlur = _ref3.onBlur, onClick = _ref3.onClick;
    _ref3.onPress;
    var onKeyDown = _ref3.onKeyDown, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref2 = _ref3.ref, rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$2);
    var _ref4 = _temp4 === void 0 ? {} : _temp4, _ref4$suppressRefErro = _ref4.suppressRefError, suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;
    var latestState = latest.current.state;
    var toggleButtonHandleClick = function toggleButtonHandleClick2() {
      dispatch({
        type: ToggleButtonClick$1
      });
    };
    var toggleButtonHandleBlur = function toggleButtonHandleBlur2() {
      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {
        dispatch({
          type: ToggleButtonBlur
        });
      }
    };
    var toggleButtonHandleKeyDown = function toggleButtonHandleKeyDown2(event) {
      var key = normalizeArrowKey(event);
      if (key && toggleButtonKeyDownHandlers[key]) {
        toggleButtonKeyDownHandlers[key](event);
      } else if (isAcceptedCharacterKey(key)) {
        dispatch({
          type: ToggleButtonKeyDownCharacter,
          key,
          getItemNodeFromIndex
        });
      }
    };
    var toggleProps = _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref2, function(toggleButtonNode) {
      toggleButtonRef.current = toggleButtonNode;
    }), _extends3["aria-activedescendant"] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : "", _extends3["aria-controls"] = elementIds.menuId, _extends3["aria-expanded"] = latest.current.state.isOpen, _extends3["aria-haspopup"] = "listbox", _extends3["aria-labelledby"] = "" + elementIds.labelId, _extends3.id = elementIds.toggleButtonId, _extends3.role = "combobox", _extends3.tabIndex = 0, _extends3.onBlur = callAllEventHandlers(onBlur, toggleButtonHandleBlur), _extends3), rest);
    if (!rest.disabled) {
      {
        toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);
        toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);
      }
    }
    setGetterPropCallInfo("getToggleButtonProps", suppressRefError, refKey, toggleButtonRef);
    return toggleProps;
  }, [latest, elementIds, setGetterPropCallInfo, dispatch, mouseAndTouchTrackersRef, toggleButtonKeyDownHandlers, getItemNodeFromIndex]);
  var getItemProps = (0, import_react79.useCallback)(function(_temp5) {
    var _extends4;
    var _ref5 = _temp5 === void 0 ? {} : _temp5, itemProp = _ref5.item, indexProp = _ref5.index, onMouseMove = _ref5.onMouseMove, onClick = _ref5.onClick;
    _ref5.onPress;
    var _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref2 = _ref5.ref, disabled = _ref5.disabled, rest = _objectWithoutPropertiesLoose(_ref5, _excluded3$1);
    var _latest$current = latest.current, latestState = _latest$current.state, latestProps = _latest$current.props;
    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, "Pass either item or index to getItemProps!"), item = _getItemAndIndex[0], index = _getItemAndIndex[1];
    var itemHandleMouseMove = function itemHandleMouseMove2() {
      if (index === latestState.highlightedIndex) {
        return;
      }
      shouldScrollRef.current = false;
      dispatch({
        type: ItemMouseMove$1,
        index,
        disabled
      });
    };
    var itemHandleClick = function itemHandleClick2() {
      dispatch({
        type: ItemClick$1,
        index
      });
    };
    var itemProps = _extends((_extends4 = {
      disabled,
      role: "option",
      "aria-selected": "" + (item === selectedItem),
      id: elementIds.getItemId(index)
    }, _extends4[refKey] = handleRefs(ref2, function(itemNode) {
      if (itemNode) {
        itemRefs.current[elementIds.getItemId(index)] = itemNode;
      }
    }), _extends4), rest);
    if (!disabled) {
      {
        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);
      }
    }
    itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);
    return itemProps;
  }, [latest, selectedItem, elementIds, shouldScrollRef, dispatch]);
  return {
    // prop getters.
    getToggleButtonProps,
    getLabelProps,
    getMenuProps,
    getItemProps,
    // actions.
    toggleMenu,
    openMenu,
    closeMenu,
    setHighlightedIndex,
    selectItem,
    reset,
    setInputValue,
    // state.
    highlightedIndex,
    isOpen,
    selectedItem,
    inputValue
  };
}
var InputKeyDownArrowDown = true ? "__input_keydown_arrow_down__" : 0;
var InputKeyDownArrowUp = true ? "__input_keydown_arrow_up__" : 1;
var InputKeyDownEscape = true ? "__input_keydown_escape__" : 2;
var InputKeyDownHome = true ? "__input_keydown_home__" : 3;
var InputKeyDownEnd = true ? "__input_keydown_end__" : 4;
var InputKeyDownPageUp = true ? "__input_keydown_page_up__" : 5;
var InputKeyDownPageDown = true ? "__input_keydown_page_down__" : 6;
var InputKeyDownEnter = true ? "__input_keydown_enter__" : 7;
var InputChange = true ? "__input_change__" : 8;
var InputBlur = true ? "__input_blur__" : 9;
var InputFocus = true ? "__input_focus__" : 10;
var MenuMouseLeave = true ? "__menu_mouse_leave__" : 11;
var ItemMouseMove = true ? "__item_mouse_move__" : 12;
var ItemClick = true ? "__item_click__" : 13;
var ToggleButtonClick = true ? "__togglebutton_click__" : 14;
var FunctionToggleMenu = true ? "__function_toggle_menu__" : 15;
var FunctionOpenMenu = true ? "__function_open_menu__" : 16;
var FunctionCloseMenu = true ? "__function_close_menu__" : 17;
var FunctionSetHighlightedIndex = true ? "__function_set_highlighted_index__" : 18;
var FunctionSelectItem = true ? "__function_select_item__" : 19;
var FunctionSetInputValue = true ? "__function_set_input_value__" : 20;
var FunctionReset$1 = true ? "__function_reset__" : 21;
var ControlledPropUpdatedSelectedItem = true ? "__controlled_prop_updated_selected_item__" : 22;
var stateChangeTypes$1 = Object.freeze({
  __proto__: null,
  InputKeyDownArrowDown,
  InputKeyDownArrowUp,
  InputKeyDownEscape,
  InputKeyDownHome,
  InputKeyDownEnd,
  InputKeyDownPageUp,
  InputKeyDownPageDown,
  InputKeyDownEnter,
  InputChange,
  InputBlur,
  InputFocus,
  MenuMouseLeave,
  ItemMouseMove,
  ItemClick,
  ToggleButtonClick,
  FunctionToggleMenu,
  FunctionOpenMenu,
  FunctionCloseMenu,
  FunctionSetHighlightedIndex,
  FunctionSelectItem,
  FunctionSetInputValue,
  FunctionReset: FunctionReset$1,
  ControlledPropUpdatedSelectedItem
});
function getInitialState$1(props) {
  var initialState = getInitialState$2(props);
  var selectedItem = initialState.selectedItem;
  var inputValue = initialState.inputValue;
  if (inputValue === "" && selectedItem && props.defaultInputValue === void 0 && props.initialInputValue === void 0 && props.inputValue === void 0) {
    inputValue = props.itemToString(selectedItem);
  }
  return _extends({}, initialState, {
    inputValue
  });
}
var propTypes$1 = {
  items: import_prop_types.default.array.isRequired,
  itemToString: import_prop_types.default.func,
  selectedItemChanged: import_prop_types.default.func,
  getA11yStatusMessage: import_prop_types.default.func,
  getA11ySelectionMessage: import_prop_types.default.func,
  highlightedIndex: import_prop_types.default.number,
  defaultHighlightedIndex: import_prop_types.default.number,
  initialHighlightedIndex: import_prop_types.default.number,
  isOpen: import_prop_types.default.bool,
  defaultIsOpen: import_prop_types.default.bool,
  initialIsOpen: import_prop_types.default.bool,
  selectedItem: import_prop_types.default.any,
  initialSelectedItem: import_prop_types.default.any,
  defaultSelectedItem: import_prop_types.default.any,
  inputValue: import_prop_types.default.string,
  defaultInputValue: import_prop_types.default.string,
  initialInputValue: import_prop_types.default.string,
  id: import_prop_types.default.string,
  labelId: import_prop_types.default.string,
  menuId: import_prop_types.default.string,
  getItemId: import_prop_types.default.func,
  inputId: import_prop_types.default.string,
  toggleButtonId: import_prop_types.default.string,
  stateReducer: import_prop_types.default.func,
  onSelectedItemChange: import_prop_types.default.func,
  onHighlightedIndexChange: import_prop_types.default.func,
  onStateChange: import_prop_types.default.func,
  onIsOpenChange: import_prop_types.default.func,
  onInputValueChange: import_prop_types.default.func,
  environment: import_prop_types.default.shape({
    addEventListener: import_prop_types.default.func,
    removeEventListener: import_prop_types.default.func,
    document: import_prop_types.default.shape({
      getElementById: import_prop_types.default.func,
      activeElement: import_prop_types.default.any,
      body: import_prop_types.default.any
    })
  })
};
function useControlledReducer(reducer2, initialState, props) {
  var previousSelectedItemRef = (0, import_react79.useRef)();
  var _useEnhancedReducer = useEnhancedReducer(reducer2, initialState, props), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];
  (0, import_react79.useEffect)(function() {
    if (!isControlledProp(props, "selectedItem")) {
      return;
    }
    if (props.selectedItemChanged(previousSelectedItemRef.current, props.selectedItem)) {
      dispatch({
        type: ControlledPropUpdatedSelectedItem,
        inputValue: props.itemToString(props.selectedItem)
      });
    }
    previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;
  }, [state.selectedItem, props.selectedItem]);
  return [getState(state, props), dispatch];
}
var validatePropTypes$1 = noop;
if (true) {
  validatePropTypes$1 = function validatePropTypes2(options, caller) {
    import_prop_types.default.checkPropTypes(propTypes$1, options, "prop", caller.name);
  };
}
var defaultProps$1 = _extends({}, defaultProps$3, {
  selectedItemChanged: function selectedItemChanged(prevItem, item) {
    return prevItem !== item;
  },
  getA11yStatusMessage: getA11yStatusMessage$1
});
function downshiftUseComboboxReducer(state, action) {
  var _props$items;
  var type = action.type, props = action.props, altKey = action.altKey;
  var changes;
  switch (type) {
    case ItemClick:
      changes = {
        isOpen: getDefaultValue$1(props, "isOpen"),
        highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
        selectedItem: props.items[action.index],
        inputValue: props.itemToString(props.items[action.index])
      };
      break;
    case InputKeyDownArrowDown:
      if (state.isOpen) {
        changes = {
          highlightedIndex: getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)
        };
      } else {
        changes = {
          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),
          isOpen: props.items.length >= 0
        };
      }
      break;
    case InputKeyDownArrowUp:
      if (state.isOpen) {
        if (altKey) {
          changes = getChangesOnSelection(props, state.highlightedIndex);
        } else {
          changes = {
            highlightedIndex: getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)
          };
        }
      } else {
        changes = {
          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),
          isOpen: props.items.length >= 0
        };
      }
      break;
    case InputKeyDownEnter:
      changes = getChangesOnSelection(props, state.highlightedIndex);
      break;
    case InputKeyDownEscape:
      changes = _extends({
        isOpen: false,
        highlightedIndex: -1
      }, !state.isOpen && {
        selectedItem: null,
        inputValue: ""
      });
      break;
    case InputKeyDownPageUp:
      changes = {
        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case InputKeyDownPageDown:
      changes = {
        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case InputKeyDownHome:
      changes = {
        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case InputKeyDownEnd:
      changes = {
        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)
      };
      break;
    case InputBlur:
      changes = _extends({
        isOpen: false,
        highlightedIndex: -1
      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && action.selectItem && {
        selectedItem: props.items[state.highlightedIndex],
        inputValue: props.itemToString(props.items[state.highlightedIndex])
      });
      break;
    case InputChange:
      changes = {
        isOpen: true,
        highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
        inputValue: action.inputValue
      };
      break;
    case InputFocus:
      changes = {
        isOpen: true,
        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
      };
      break;
    case FunctionSelectItem:
      changes = {
        selectedItem: action.selectedItem,
        inputValue: props.itemToString(action.selectedItem)
      };
      break;
    case ControlledPropUpdatedSelectedItem:
      changes = {
        inputValue: action.inputValue
      };
      break;
    default:
      return downshiftCommonReducer(state, action, stateChangeTypes$1);
  }
  return _extends({}, state, changes);
}
var _excluded$1 = ["onMouseLeave", "refKey", "ref"];
var _excluded2$1 = ["item", "index", "refKey", "ref", "onMouseMove", "onMouseDown", "onClick", "onPress", "disabled"];
var _excluded3 = ["onClick", "onPress", "refKey", "ref"];
var _excluded4 = ["onKeyDown", "onChange", "onInput", "onFocus", "onBlur", "onChangeText", "refKey", "ref"];
useCombobox.stateChangeTypes = stateChangeTypes$1;
function useCombobox(userProps) {
  if (userProps === void 0) {
    userProps = {};
  }
  validatePropTypes$1(userProps, useCombobox);
  var props = _extends({}, defaultProps$1, userProps);
  var initialIsOpen = props.initialIsOpen, defaultIsOpen = props.defaultIsOpen, items = props.items, scrollIntoView2 = props.scrollIntoView, environment = props.environment, getA11yStatusMessage2 = props.getA11yStatusMessage, getA11ySelectionMessage2 = props.getA11ySelectionMessage, itemToString2 = props.itemToString;
  var initialState = getInitialState$1(props);
  var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, initialState, props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
  var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;
  var menuRef = (0, import_react79.useRef)(null);
  var itemRefs = (0, import_react79.useRef)({});
  var inputRef = (0, import_react79.useRef)(null);
  var toggleButtonRef = (0, import_react79.useRef)(null);
  var isInitialMountRef = (0, import_react79.useRef)(true);
  var elementIds = useElementIds(props);
  var previousResultCountRef = (0, import_react79.useRef)();
  var latest = useLatestRef({
    state,
    props
  });
  var getItemNodeFromIndex = (0, import_react79.useCallback)(function(index) {
    return itemRefs.current[elementIds.getItemId(index)];
  }, [elementIds]);
  useA11yMessageSetter(getA11yStatusMessage2, [isOpen, highlightedIndex, inputValue, items], _extends({
    isInitialMount: isInitialMountRef.current,
    previousResultCount: previousResultCountRef.current,
    items,
    environment,
    itemToString: itemToString2
  }, state));
  useA11yMessageSetter(getA11ySelectionMessage2, [selectedItem], _extends({
    isInitialMount: isInitialMountRef.current,
    previousResultCount: previousResultCountRef.current,
    items,
    environment,
    itemToString: itemToString2
  }, state));
  var shouldScrollRef = useScrollIntoView({
    menuElement: menuRef.current,
    highlightedIndex,
    isOpen,
    itemRefs,
    scrollIntoView: scrollIntoView2,
    getItemNodeFromIndex
  });
  useControlPropsValidator({
    isInitialMount: isInitialMountRef.current,
    props,
    state
  });
  (0, import_react79.useEffect)(function() {
    var focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;
    if (focusOnOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, []);
  (0, import_react79.useEffect)(function() {
    if (isInitialMountRef.current) {
      return;
    }
    previousResultCountRef.current = items.length;
  });
  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [inputRef, menuRef, toggleButtonRef], environment, function() {
    dispatch({
      type: InputBlur,
      selectItem: false
    });
  });
  var setGetterPropCallInfo = useGetterPropsCalledChecker("getInputProps", "getMenuProps");
  (0, import_react79.useEffect)(function() {
    isInitialMountRef.current = false;
    return function() {
      isInitialMountRef.current = true;
    };
  }, []);
  (0, import_react79.useEffect)(function() {
    var _environment$document;
    if (!isOpen) {
      itemRefs.current = {};
    } else if (((_environment$document = environment.document) == null ? void 0 : _environment$document.activeElement) !== inputRef.current) {
      var _inputRef$current;
      inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
    }
  }, [isOpen, environment]);
  var inputKeyDownHandlers = (0, import_react79.useMemo)(function() {
    return {
      ArrowDown: function ArrowDown(event) {
        event.preventDefault();
        dispatch({
          type: InputKeyDownArrowDown,
          altKey: event.altKey,
          getItemNodeFromIndex
        });
      },
      ArrowUp: function ArrowUp(event) {
        event.preventDefault();
        dispatch({
          type: InputKeyDownArrowUp,
          altKey: event.altKey,
          getItemNodeFromIndex
        });
      },
      Home: function Home(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownHome,
          getItemNodeFromIndex
        });
      },
      End: function End(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownEnd,
          getItemNodeFromIndex
        });
      },
      Escape: function Escape(event) {
        var latestState = latest.current.state;
        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownEscape
          });
        }
      },
      Enter: function Enter(event) {
        var latestState = latest.current.state;
        if (!latestState.isOpen || event.which === 229) {
          return;
        }
        event.preventDefault();
        dispatch({
          type: InputKeyDownEnter,
          getItemNodeFromIndex
        });
      },
      PageUp: function PageUp(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownPageUp,
            getItemNodeFromIndex
          });
        }
      },
      PageDown: function PageDown(event) {
        if (latest.current.state.isOpen) {
          event.preventDefault();
          dispatch({
            type: InputKeyDownPageDown,
            getItemNodeFromIndex
          });
        }
      }
    };
  }, [dispatch, latest, getItemNodeFromIndex]);
  var getLabelProps = (0, import_react79.useCallback)(function(labelProps) {
    return _extends({
      id: elementIds.labelId,
      htmlFor: elementIds.inputId
    }, labelProps);
  }, [elementIds]);
  var getMenuProps = (0, import_react79.useCallback)(function(_temp, _temp2) {
    var _extends2;
    var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey, ref2 = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);
    var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
    setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref2, function(menuNode) {
      menuRef.current = menuNode;
    }), _extends2.id = elementIds.menuId, _extends2.role = "listbox", _extends2["aria-labelledby"] = elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function() {
      dispatch({
        type: MenuMouseLeave
      });
    }), _extends2), rest);
  }, [dispatch, setGetterPropCallInfo, elementIds]);
  var getItemProps = (0, import_react79.useCallback)(function(_temp3) {
    var _extends3, _ref4;
    var _ref3 = _temp3 === void 0 ? {} : _temp3, itemProp = _ref3.item, indexProp = _ref3.index, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref2 = _ref3.ref, onMouseMove = _ref3.onMouseMove, onMouseDown = _ref3.onMouseDown, onClick = _ref3.onClick;
    _ref3.onPress;
    var disabled = _ref3.disabled, rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$1);
    var _latest$current = latest.current, latestProps = _latest$current.props, latestState = _latest$current.state;
    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, "Pass either item or index to getItemProps!"), index = _getItemAndIndex[1];
    var onSelectKey = "onClick";
    var customClickHandler = onClick;
    var itemHandleMouseMove = function itemHandleMouseMove2() {
      if (index === latestState.highlightedIndex) {
        return;
      }
      shouldScrollRef.current = false;
      dispatch({
        type: ItemMouseMove,
        index,
        disabled
      });
    };
    var itemHandleClick = function itemHandleClick2() {
      dispatch({
        type: ItemClick,
        index
      });
    };
    var itemHandleMouseDown = function itemHandleMouseDown2(e4) {
      return e4.preventDefault();
    };
    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref2, function(itemNode) {
      if (itemNode) {
        itemRefs.current[elementIds.getItemId(index)] = itemNode;
      }
    }), _extends3.disabled = disabled, _extends3.role = "option", _extends3["aria-selected"] = "" + (index === latestState.highlightedIndex), _extends3.id = elementIds.getItemId(index), _extends3), !disabled && (_ref4 = {}, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), {
      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),
      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown)
    }, rest);
  }, [dispatch, latest, shouldScrollRef, elementIds]);
  var getToggleButtonProps = (0, import_react79.useCallback)(function(_temp4) {
    var _extends4;
    var _ref5 = _temp4 === void 0 ? {} : _temp4, onClick = _ref5.onClick;
    _ref5.onPress;
    var _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref2 = _ref5.ref, rest = _objectWithoutPropertiesLoose(_ref5, _excluded3);
    var latestState = latest.current.state;
    var toggleButtonHandleClick = function toggleButtonHandleClick2() {
      dispatch({
        type: ToggleButtonClick
      });
    };
    return _extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref2, function(toggleButtonNode) {
      toggleButtonRef.current = toggleButtonNode;
    }), _extends4["aria-controls"] = elementIds.menuId, _extends4["aria-expanded"] = latestState.isOpen, _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends({}, {
      onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)
    }), rest);
  }, [dispatch, latest, elementIds]);
  var getInputProps = (0, import_react79.useCallback)(function(_temp5, _temp6) {
    var _extends5;
    var _ref6 = _temp5 === void 0 ? {} : _temp5, onKeyDown = _ref6.onKeyDown, onChange = _ref6.onChange, onInput = _ref6.onInput, onFocus = _ref6.onFocus, onBlur = _ref6.onBlur;
    _ref6.onChangeText;
    var _ref6$refKey = _ref6.refKey, refKey = _ref6$refKey === void 0 ? "ref" : _ref6$refKey, ref2 = _ref6.ref, rest = _objectWithoutPropertiesLoose(_ref6, _excluded4);
    var _ref7 = _temp6 === void 0 ? {} : _temp6, _ref7$suppressRefErro = _ref7.suppressRefError, suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;
    setGetterPropCallInfo("getInputProps", suppressRefError, refKey, inputRef);
    var latestState = latest.current.state;
    var inputHandleKeyDown = function inputHandleKeyDown2(event) {
      var key = normalizeArrowKey(event);
      if (key && inputKeyDownHandlers[key]) {
        inputKeyDownHandlers[key](event);
      }
    };
    var inputHandleChange = function inputHandleChange2(event) {
      dispatch({
        type: InputChange,
        inputValue: event.target.value
      });
    };
    var inputHandleBlur = function inputHandleBlur2(event) {
      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {
        dispatch({
          type: InputBlur,
          selectItem: event.relatedTarget !== null
        });
      }
    };
    var inputHandleFocus = function inputHandleFocus2() {
      if (!latestState.isOpen) {
        dispatch({
          type: InputFocus
        });
      }
    };
    var onChangeKey = "onChange";
    var eventHandlers = {};
    if (!rest.disabled) {
      var _eventHandlers;
      eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers.onFocus = callAllEventHandlers(onFocus, inputHandleFocus), _eventHandlers);
    }
    return _extends((_extends5 = {}, _extends5[refKey] = handleRefs(ref2, function(inputNode) {
      inputRef.current = inputNode;
    }), _extends5["aria-activedescendant"] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : "", _extends5["aria-autocomplete"] = "list", _extends5["aria-controls"] = elementIds.menuId, _extends5["aria-expanded"] = latestState.isOpen, _extends5["aria-labelledby"] = elementIds.labelId, _extends5.autoComplete = "off", _extends5.id = elementIds.inputId, _extends5.role = "combobox", _extends5.value = latestState.inputValue, _extends5), eventHandlers, rest);
  }, [dispatch, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds]);
  var toggleMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionToggleMenu
    });
  }, [dispatch]);
  var closeMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionCloseMenu
    });
  }, [dispatch]);
  var openMenu = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionOpenMenu
    });
  }, [dispatch]);
  var setHighlightedIndex = (0, import_react79.useCallback)(function(newHighlightedIndex) {
    dispatch({
      type: FunctionSetHighlightedIndex,
      highlightedIndex: newHighlightedIndex
    });
  }, [dispatch]);
  var selectItem = (0, import_react79.useCallback)(function(newSelectedItem) {
    dispatch({
      type: FunctionSelectItem,
      selectedItem: newSelectedItem
    });
  }, [dispatch]);
  var setInputValue = (0, import_react79.useCallback)(function(newInputValue) {
    dispatch({
      type: FunctionSetInputValue,
      inputValue: newInputValue
    });
  }, [dispatch]);
  var reset = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionReset$1
    });
  }, [dispatch]);
  return {
    // prop getters.
    getItemProps,
    getLabelProps,
    getMenuProps,
    getInputProps,
    getToggleButtonProps,
    // actions.
    toggleMenu,
    openMenu,
    closeMenu,
    setHighlightedIndex,
    setInputValue,
    selectItem,
    reset,
    // state.
    highlightedIndex,
    isOpen,
    selectedItem,
    inputValue
  };
}
var defaultStateValues = {
  activeIndex: -1,
  selectedItems: []
};
function getInitialValue(props, propKey) {
  return getInitialValue$1(props, propKey, defaultStateValues);
}
function getDefaultValue(props, propKey) {
  return getDefaultValue$1(props, propKey, defaultStateValues);
}
function getInitialState(props) {
  var activeIndex = getInitialValue(props, "activeIndex");
  var selectedItems = getInitialValue(props, "selectedItems");
  return {
    activeIndex,
    selectedItems
  };
}
function isKeyDownOperationPermitted(event) {
  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
    return false;
  }
  var element = event.target;
  if (element instanceof HTMLInputElement && // if element is a text input
  element.value !== "" && // and we have text in it
  // and cursor is either not at the start or is currently highlighting text.
  (element.selectionStart !== 0 || element.selectionEnd !== 0)) {
    return false;
  }
  return true;
}
function getA11yRemovalMessage(selectionParameters) {
  var removedSelectedItem = selectionParameters.removedSelectedItem, itemToStringLocal = selectionParameters.itemToString;
  return itemToStringLocal(removedSelectedItem) + " has been removed.";
}
var propTypes = {
  selectedItems: import_prop_types.default.array,
  initialSelectedItems: import_prop_types.default.array,
  defaultSelectedItems: import_prop_types.default.array,
  itemToString: import_prop_types.default.func,
  getA11yRemovalMessage: import_prop_types.default.func,
  stateReducer: import_prop_types.default.func,
  activeIndex: import_prop_types.default.number,
  initialActiveIndex: import_prop_types.default.number,
  defaultActiveIndex: import_prop_types.default.number,
  onActiveIndexChange: import_prop_types.default.func,
  onSelectedItemsChange: import_prop_types.default.func,
  keyNavigationNext: import_prop_types.default.string,
  keyNavigationPrevious: import_prop_types.default.string,
  environment: import_prop_types.default.shape({
    addEventListener: import_prop_types.default.func,
    removeEventListener: import_prop_types.default.func,
    document: import_prop_types.default.shape({
      getElementById: import_prop_types.default.func,
      activeElement: import_prop_types.default.any,
      body: import_prop_types.default.any
    })
  })
};
var defaultProps2 = {
  itemToString: defaultProps$3.itemToString,
  stateReducer: defaultProps$3.stateReducer,
  environment: defaultProps$3.environment,
  getA11yRemovalMessage,
  keyNavigationNext: "ArrowRight",
  keyNavigationPrevious: "ArrowLeft"
};
var validatePropTypes = noop;
if (true) {
  validatePropTypes = function validatePropTypes2(options, caller) {
    import_prop_types.default.checkPropTypes(propTypes, options, "prop", caller.name);
  };
}
var SelectedItemClick = true ? "__selected_item_click__" : 0;
var SelectedItemKeyDownDelete = true ? "__selected_item_keydown_delete__" : 1;
var SelectedItemKeyDownBackspace = true ? "__selected_item_keydown_backspace__" : 2;
var SelectedItemKeyDownNavigationNext = true ? "__selected_item_keydown_navigation_next__" : 3;
var SelectedItemKeyDownNavigationPrevious = true ? "__selected_item_keydown_navigation_previous__" : 4;
var DropdownKeyDownNavigationPrevious = true ? "__dropdown_keydown_navigation_previous__" : 5;
var DropdownKeyDownBackspace = true ? "__dropdown_keydown_backspace__" : 6;
var DropdownClick = true ? "__dropdown_click__" : 7;
var FunctionAddSelectedItem = true ? "__function_add_selected_item__" : 8;
var FunctionRemoveSelectedItem = true ? "__function_remove_selected_item__" : 9;
var FunctionSetSelectedItems = true ? "__function_set_selected_items__" : 10;
var FunctionSetActiveIndex = true ? "__function_set_active_index__" : 11;
var FunctionReset = true ? "__function_reset__" : 12;
var stateChangeTypes = Object.freeze({
  __proto__: null,
  SelectedItemClick,
  SelectedItemKeyDownDelete,
  SelectedItemKeyDownBackspace,
  SelectedItemKeyDownNavigationNext,
  SelectedItemKeyDownNavigationPrevious,
  DropdownKeyDownNavigationPrevious,
  DropdownKeyDownBackspace,
  DropdownClick,
  FunctionAddSelectedItem,
  FunctionRemoveSelectedItem,
  FunctionSetSelectedItems,
  FunctionSetActiveIndex,
  FunctionReset
});
function downshiftMultipleSelectionReducer(state, action) {
  var type = action.type, index = action.index, props = action.props, selectedItem = action.selectedItem;
  var activeIndex = state.activeIndex, selectedItems = state.selectedItems;
  var changes;
  switch (type) {
    case SelectedItemClick:
      changes = {
        activeIndex: index
      };
      break;
    case SelectedItemKeyDownNavigationPrevious:
      changes = {
        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1
      };
      break;
    case SelectedItemKeyDownNavigationNext:
      changes = {
        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1
      };
      break;
    case SelectedItemKeyDownBackspace:
    case SelectedItemKeyDownDelete: {
      if (activeIndex < 0) {
        break;
      }
      var newActiveIndex = activeIndex;
      if (selectedItems.length === 1) {
        newActiveIndex = -1;
      } else if (activeIndex === selectedItems.length - 1) {
        newActiveIndex = selectedItems.length - 2;
      }
      changes = _extends({
        selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))
      }, {
        activeIndex: newActiveIndex
      });
      break;
    }
    case DropdownKeyDownNavigationPrevious:
      changes = {
        activeIndex: selectedItems.length - 1
      };
      break;
    case DropdownKeyDownBackspace:
      changes = {
        selectedItems: selectedItems.slice(0, selectedItems.length - 1)
      };
      break;
    case FunctionAddSelectedItem:
      changes = {
        selectedItems: [].concat(selectedItems, [selectedItem])
      };
      break;
    case DropdownClick:
      changes = {
        activeIndex: -1
      };
      break;
    case FunctionRemoveSelectedItem: {
      var _newActiveIndex = activeIndex;
      var selectedItemIndex = selectedItems.indexOf(selectedItem);
      if (selectedItemIndex < 0) {
        break;
      }
      if (selectedItems.length === 1) {
        _newActiveIndex = -1;
      } else if (selectedItemIndex === selectedItems.length - 1) {
        _newActiveIndex = selectedItems.length - 2;
      }
      changes = {
        selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1)),
        activeIndex: _newActiveIndex
      };
      break;
    }
    case FunctionSetSelectedItems: {
      var newSelectedItems = action.selectedItems;
      changes = {
        selectedItems: newSelectedItems
      };
      break;
    }
    case FunctionSetActiveIndex: {
      var _newActiveIndex2 = action.activeIndex;
      changes = {
        activeIndex: _newActiveIndex2
      };
      break;
    }
    case FunctionReset:
      changes = {
        activeIndex: getDefaultValue(props, "activeIndex"),
        selectedItems: getDefaultValue(props, "selectedItems")
      };
      break;
    default:
      throw new Error("Reducer called without proper action type.");
  }
  return _extends({}, state, changes);
}
var _excluded = ["refKey", "ref", "onClick", "onKeyDown", "selectedItem", "index"];
var _excluded2 = ["refKey", "ref", "onKeyDown", "onClick", "preventKeyAction"];
useMultipleSelection.stateChangeTypes = stateChangeTypes;
function useMultipleSelection(userProps) {
  if (userProps === void 0) {
    userProps = {};
  }
  validatePropTypes(userProps, useMultipleSelection);
  var props = _extends({}, defaultProps2, userProps);
  var getA11yRemovalMessage2 = props.getA11yRemovalMessage, itemToString2 = props.itemToString, environment = props.environment, keyNavigationNext = props.keyNavigationNext, keyNavigationPrevious = props.keyNavigationPrevious;
  var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
  var activeIndex = state.activeIndex, selectedItems = state.selectedItems;
  var isInitialMountRef = (0, import_react79.useRef)(true);
  var dropdownRef = (0, import_react79.useRef)(null);
  var previousSelectedItemsRef = (0, import_react79.useRef)(selectedItems);
  var selectedItemRefs = (0, import_react79.useRef)();
  selectedItemRefs.current = [];
  var latest = useLatestRef({
    state,
    props
  });
  (0, import_react79.useEffect)(function() {
    if (isInitialMountRef.current || false) {
      return;
    }
    if (selectedItems.length < previousSelectedItemsRef.current.length) {
      var removedSelectedItem = previousSelectedItemsRef.current.find(function(item) {
        return selectedItems.indexOf(item) < 0;
      });
      setStatus(getA11yRemovalMessage2({
        itemToString: itemToString2,
        resultCount: selectedItems.length,
        removedSelectedItem,
        activeIndex,
        activeSelectedItem: selectedItems[activeIndex]
      }), environment.document);
    }
    previousSelectedItemsRef.current = selectedItems;
  }, [selectedItems.length]);
  (0, import_react79.useEffect)(function() {
    if (isInitialMountRef.current) {
      return;
    }
    if (activeIndex === -1 && dropdownRef.current) {
      dropdownRef.current.focus();
    } else if (selectedItemRefs.current[activeIndex]) {
      selectedItemRefs.current[activeIndex].focus();
    }
  }, [activeIndex]);
  useControlPropsValidator({
    isInitialMount: isInitialMountRef.current,
    props,
    state
  });
  var setGetterPropCallInfo = useGetterPropsCalledChecker("getDropdownProps");
  (0, import_react79.useEffect)(function() {
    isInitialMountRef.current = false;
    return function() {
      isInitialMountRef.current = true;
    };
  }, []);
  var selectedItemKeyDownHandlers = (0, import_react79.useMemo)(function() {
    var _ref;
    return _ref = {}, _ref[keyNavigationPrevious] = function() {
      dispatch({
        type: SelectedItemKeyDownNavigationPrevious
      });
    }, _ref[keyNavigationNext] = function() {
      dispatch({
        type: SelectedItemKeyDownNavigationNext
      });
    }, _ref.Delete = function Delete() {
      dispatch({
        type: SelectedItemKeyDownDelete
      });
    }, _ref.Backspace = function Backspace() {
      dispatch({
        type: SelectedItemKeyDownBackspace
      });
    }, _ref;
  }, [dispatch, keyNavigationNext, keyNavigationPrevious]);
  var dropdownKeyDownHandlers = (0, import_react79.useMemo)(function() {
    var _ref2;
    return _ref2 = {}, _ref2[keyNavigationPrevious] = function(event) {
      if (isKeyDownOperationPermitted(event)) {
        dispatch({
          type: DropdownKeyDownNavigationPrevious
        });
      }
    }, _ref2.Backspace = function Backspace(event) {
      if (isKeyDownOperationPermitted(event)) {
        dispatch({
          type: DropdownKeyDownBackspace
        });
      }
    }, _ref2;
  }, [dispatch, keyNavigationPrevious]);
  var getSelectedItemProps = (0, import_react79.useCallback)(function(_temp) {
    var _extends2;
    var _ref3 = _temp === void 0 ? {} : _temp, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref2 = _ref3.ref, onClick = _ref3.onClick, onKeyDown = _ref3.onKeyDown, selectedItemProp = _ref3.selectedItem, indexProp = _ref3.index, rest = _objectWithoutPropertiesLoose(_ref3, _excluded);
    var latestState = latest.current.state;
    var _getItemAndIndex = getItemAndIndex(selectedItemProp, indexProp, latestState.selectedItems, "Pass either item or index to getSelectedItemProps!"), index = _getItemAndIndex[1];
    var isFocusable3 = index > -1 && index === latestState.activeIndex;
    var selectedItemHandleClick = function selectedItemHandleClick2() {
      dispatch({
        type: SelectedItemClick,
        index
      });
    };
    var selectedItemHandleKeyDown = function selectedItemHandleKeyDown2(event) {
      var key = normalizeArrowKey(event);
      if (key && selectedItemKeyDownHandlers[key]) {
        selectedItemKeyDownHandlers[key](event);
      }
    };
    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref2, function(selectedItemNode) {
      if (selectedItemNode) {
        selectedItemRefs.current.push(selectedItemNode);
      }
    }), _extends2.tabIndex = isFocusable3 ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);
  }, [dispatch, latest, selectedItemKeyDownHandlers]);
  var getDropdownProps = (0, import_react79.useCallback)(function(_temp2, _temp3) {
    var _extends3;
    var _ref4 = _temp2 === void 0 ? {} : _temp2, _ref4$refKey = _ref4.refKey, refKey = _ref4$refKey === void 0 ? "ref" : _ref4$refKey, ref2 = _ref4.ref, onKeyDown = _ref4.onKeyDown, onClick = _ref4.onClick, _ref4$preventKeyActio = _ref4.preventKeyAction, preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio, rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);
    var _ref5 = _temp3 === void 0 ? {} : _temp3, _ref5$suppressRefErro = _ref5.suppressRefError, suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;
    setGetterPropCallInfo("getDropdownProps", suppressRefError, refKey, dropdownRef);
    var dropdownHandleKeyDown = function dropdownHandleKeyDown2(event) {
      var key = normalizeArrowKey(event);
      if (key && dropdownKeyDownHandlers[key]) {
        dropdownKeyDownHandlers[key](event);
      }
    };
    var dropdownHandleClick = function dropdownHandleClick2() {
      dispatch({
        type: DropdownClick
      });
    };
    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref2, function(dropdownNode) {
      if (dropdownNode) {
        dropdownRef.current = dropdownNode;
      }
    }), _extends3), !preventKeyAction && {
      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),
      onClick: callAllEventHandlers(onClick, dropdownHandleClick)
    }, rest);
  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);
  var addSelectedItem = (0, import_react79.useCallback)(function(selectedItem) {
    dispatch({
      type: FunctionAddSelectedItem,
      selectedItem
    });
  }, [dispatch]);
  var removeSelectedItem = (0, import_react79.useCallback)(function(selectedItem) {
    dispatch({
      type: FunctionRemoveSelectedItem,
      selectedItem
    });
  }, [dispatch]);
  var setSelectedItems = (0, import_react79.useCallback)(function(newSelectedItems) {
    dispatch({
      type: FunctionSetSelectedItems,
      selectedItems: newSelectedItems
    });
  }, [dispatch]);
  var setActiveIndex = (0, import_react79.useCallback)(function(newActiveIndex) {
    dispatch({
      type: FunctionSetActiveIndex,
      activeIndex: newActiveIndex
    });
  }, [dispatch]);
  var reset = (0, import_react79.useCallback)(function() {
    dispatch({
      type: FunctionReset
    });
  }, [dispatch]);
  return {
    getSelectedItemProps,
    getDropdownProps,
    addSelectedItem,
    removeSelectedItem,
    setSelectedItems,
    setActiveIndex,
    reset,
    selectedItems,
    activeIndex
  };
}

// node_modules/@bigcommerce/big-design/dist/es/components/Dropdown/Dropdown.js
var import_react96 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React74 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React71 = __toESM(require_react());
var ManagerReferenceNodeContext = React71.createContext();
var ManagerReferenceNodeSetterContext = React71.createContext();
function Manager(_ref) {
  var children = _ref.children;
  var _React$useState = React71.useState(null), referenceNode = _React$useState[0], setReferenceNode = _React$useState[1];
  var hasUnmounted = React71.useRef(false);
  React71.useEffect(function() {
    return function() {
      hasUnmounted.current = true;
    };
  }, []);
  var handleSetReferenceNode = React71.useCallback(function(node) {
    if (!hasUnmounted.current) {
      setReferenceNode(node);
    }
  }, []);
  return React71.createElement(ManagerReferenceNodeContext.Provider, {
    value: referenceNode
  }, React71.createElement(ManagerReferenceNodeSetterContext.Provider, {
    value: handleSetReferenceNode
  }, children));
}

// node_modules/react-popper/lib/esm/utils.js
var React72 = __toESM(require_react());
var unwrapArray2 = function unwrapArray3(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke2(fn) {
  if (typeof fn === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn.apply(void 0, args);
  }
};
var setRef = function setRef2(ref2, node) {
  if (typeof ref2 === "function") {
    return safeInvoke(ref2, node);
  } else if (ref2 != null) {
    ref2.current = node;
  }
};
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect3 = typeof window !== "undefined" && window.document && window.document.createElement ? React72.useLayoutEffect : React72.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React73 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style2 = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style2);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style2 = styleProperties.reduce(function(style3, property) {
        style3[property] = "";
        return style3;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper2 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = React73.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React73.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React73.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React73.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React73.useRef();
  useIsomorphicLayoutEffect3(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect3(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options.createPopper || createPopper2;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Popper.js
var NOOP = function NOOP2() {
  return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE2() {
  return Promise.resolve(null);
};
var EMPTY_MODIFIERS2 = [];
function Popper(_ref) {
  var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom" : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "absolute" : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS2 : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
  var referenceNode = React74.useContext(ManagerReferenceNodeContext);
  var _React$useState = React74.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
  var _React$useState2 = React74.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
  React74.useEffect(function() {
    setRef(innerRef, popperElement);
  }, [innerRef, popperElement]);
  var options = React74.useMemo(function() {
    return {
      placement,
      strategy,
      onFirstUpdate,
      modifiers: [].concat(modifiers, [{
        name: "arrow",
        enabled: arrowElement != null,
        options: {
          element: arrowElement
        }
      }])
    };
  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);
  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update2 = _usePopper.update;
  var childrenProps = React74.useMemo(function() {
    return {
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : placement,
      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
      arrowProps: {
        style: styles.arrow,
        ref: setArrowElement
      },
      forceUpdate: forceUpdate || NOOP,
      update: update2 || NOOP_PROMISE
    };
  }, [setPopperElement, setArrowElement, placement, state, styles, update2, forceUpdate]);
  return unwrapArray2(children)(childrenProps);
}

// node_modules/react-popper/lib/esm/Reference.js
var React75 = __toESM(require_react());
var import_warning2 = __toESM(require_warning());
function Reference(_ref) {
  var children = _ref.children, innerRef = _ref.innerRef;
  var setReferenceNode = React75.useContext(ManagerReferenceNodeSetterContext);
  var refHandler = React75.useCallback(function(node) {
    setRef(innerRef, node);
    safeInvoke(setReferenceNode, node);
  }, [innerRef, setReferenceNode]);
  React75.useEffect(function() {
    return function() {
      return setRef(innerRef, null);
    };
  }, []);
  React75.useEffect(function() {
    (0, import_warning2.default)(Boolean(setReferenceNode), "`Reference` should not be used outside of a `Manager` component.");
  }, [setReferenceNode]);
  return unwrapArray2(children)({
    ref: refHandler
  });
}

// node_modules/@bigcommerce/big-design/dist/es/components/List/List.js
var import_react95 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupHeader/ListGroupHeader.js
var import_react80 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupHeader/styled.js
var StyledGroupHeader = styled_components_browser_esm_default.li.withConfig({
  displayName: "styled__StyledGroupHeader",
  componentId: "sc-1tf563r-0"
})(["align-items:center;box-sizing:border-box;color:", ";cursor:default;display:flex;font-size:", ";font-weight:", ";height:", ";justify-content:space-between;min-width:", ";outline:none;padding:0 ", ";text-transform:uppercase;&:not(:first-child){margin-top:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary50;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.typography.fontSize.small;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.typography.fontWeight.semiBold;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.helpers.remCalc(36);
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.helpers.remCalc(256);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.medium;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.medium;
});
StyledGroupHeader.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupHeader/ListGroupHeader.js
var ListGroupHeader = (0, import_react80.memo)((_ref) => {
  let {
    className,
    style: style2,
    value,
    ...rest
  } = _ref;
  return import_react80.default.createElement(StyledGroupHeader, _extends({}, rest, {
    "aria-hidden": true,
    onMouseDown: preventFocus,
    tabIndex: -1
  }));
});
function preventFocus(event) {
  event.preventDefault();
}
ListGroupHeader.displayName = "ListGroupHeader";

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupSeparator/ListGroupSeparator.js
var import_react81 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupSeparator/styled.js
var StyledListItem = styled_components_browser_esm_default.li.withConfig({
  displayName: "styled__StyledListItem",
  componentId: "sc-i5lbu8-0"
})(["line-height:0;"]);

// node_modules/@bigcommerce/big-design/dist/es/components/List/GroupSeparator/ListGroupSeparator.js
var ListGroupSeparator = (0, import_react81.memo)(() => import_react81.default.createElement(StyledListItem, {
  "aria-hidden": true,
  onMouseDown: preventFocus2,
  tabIndex: -1
}, import_react81.default.createElement(HR, {
  marginVertical: "xSmall"
})));
function preventFocus2(event) {
  event.preventDefault();
}
ListGroupSeparator.displayName = "ListGroupSeparator";

// node_modules/@bigcommerce/big-design/dist/es/components/List/Item/Item.js
var import_react94 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/Checkbox.js
var import_react91 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Form.js
var import_react83 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Input/styled.js
var StyledInputWrapper = styled_components_browser_esm_default.span.withConfig({
  displayName: "styled__StyledInputWrapper",
  componentId: "sc-g32raa-0"
})(["", " align-items:center;background-color:", ";border-radius:", ";box-sizing:border-box;display:flex;min-height:", ";overflow:hidden;position:relative;width:100%;", ";&:hover:not([disabled]){", "}", ";&[disabled]{background-color:", ";}"], withTransition(["border", "box-shadow"]), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return addValues(theme2.spacing.xxLarge, theme2.spacing.xxSmall);
}, (_ref4) => {
  let {
    error: error2,
    theme: theme2
  } = _ref4;
  return Ae(["border:", ";"], error2 ? theme2.border.boxError : theme2.border.box);
}, (_ref5) => {
  let {
    error: error2,
    theme: theme2
  } = _ref5;
  return error2 ? Ae(["border:", ";"], theme2.border.boxError) : Ae(["border:1px solid ", ";"], theme2.colors.secondary40);
}, (_ref6) => {
  let {
    error: error2,
    focus: focus2,
    theme: theme2
  } = _ref6;
  return focus2 && Ae(["outline:none;box-shadow:0 0 0 4px ", ";"], error2 ? theme2.colors.danger20 : theme2.colors.primary20);
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.colors.secondary20;
});
var StyledInput = styled_components_browser_esm_default.input.withConfig({
  displayName: "styled__StyledInput",
  componentId: "sc-g32raa-1"
})(["background-color:inherit;border:0;box-sizing:border-box;color:", ";flex:1 1 40%;height:100%;padding:0;padding-left:", ";width:100%;&:focus{outline:none;}&::placeholder{color:", ";font-size:", ";}&:-webkit-autofill{background-color:", " !important;-webkit-box-shadow:0 0 0px 1000px ", " inset;}", ";", ";", ";", ";", ";&[disabled]{background-color:", ";}"], (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.colors.secondary70;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.spacing.xSmall;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.colors.secondary40;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.typography.fontSize.medium;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.colors.primary10;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.colors.primary10;
}, (_ref14) => {
  let {
    iconRight,
    theme: theme2
  } = _ref14;
  return iconRight && Ae(["padding-right:", ";"], addValues(theme2.spacing.xxSmall, theme2.spacing.xxLarge));
}, (_ref15) => {
  let {
    iconLeft,
    theme: theme2
  } = _ref15;
  return iconLeft && Ae(["padding-left:", ";"], addValues(theme2.spacing.xxSmall, theme2.spacing.xxLarge));
}, (_ref16) => {
  let {
    chips,
    theme: theme2
  } = _ref16;
  return chips && Ae(["min-height:", ";padding-left:", ";padding-right:", ";"], theme2.spacing.xLarge, theme2.spacing.xxSmall, theme2.spacing.none);
}, (_ref17) => {
  let {
    chips,
    theme: theme2
  } = _ref17;
  return chips && chips.length && Ae(["margin-top:", ";"], theme2.spacing.xxSmall);
}, (_ref18) => {
  let {
    chips
  } = _ref18;
  return !chips && Ae(["min-height:", ";"], remCalc(34));
}, (_ref19) => {
  let {
    theme: theme2
  } = _ref19;
  return theme2.colors.secondary20;
});
var StyledIconWrapper = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledIconWrapper",
  componentId: "sc-g32raa-2"
})(["align-items:center;color:", ";display:flex;height:100%;position:absolute;top:0;", " ", " ", ""], (_ref20) => {
  let {
    theme: theme2
  } = _ref20;
  return theme2.colors.secondary60;
}, withPaddings(), (_ref21) => {
  let {
    paddingLeft
  } = _ref21;
  return paddingLeft === "xSmall" && Ae(["left:0;"]);
}, (_ref22) => {
  let {
    paddingRight
  } = _ref22;
  return paddingRight === "xSmall" && Ae(["right:0;"]);
});
var StyledInputContent = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledInputContent",
  componentId: "sc-g32raa-3"
})(["align-items:center;box-sizing:border-box;display:flex;flex-wrap:wrap;flex:1;height:100%;", ";", ";"], (_ref23) => {
  let {
    chips,
    theme: theme2
  } = _ref23;
  return chips && Ae(["margin-left:", ";padding-right:", ";"], theme2.spacing.xxSmall, addValues(theme2.spacing.xxSmall, theme2.spacing.xxLarge));
}, (_ref24) => {
  let {
    chips,
    theme: theme2
  } = _ref24;
  return chips && chips.length && Ae(["margin-bottom:", ";"], theme2.spacing.xxSmall);
});
StyledInput.defaultProps = {
  theme
};
StyledInputWrapper.defaultProps = {
  theme
};
StyledIconWrapper.defaultProps = {
  theme
};
StyledInputContent.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Textarea/styled.js
var StyledTextareaWrapper = styled_components_browser_esm_default.span.withConfig({
  displayName: "styled__StyledTextareaWrapper",
  componentId: "sc-c1uos0-0"
})(["align-items:center;display:flex;position:relative;"]);
var StyledTextarea = styled_components_browser_esm_default.textarea.withConfig({
  displayName: "styled__StyledTextarea",
  componentId: "sc-c1uos0-1"
})(["", " background-color:", ";border-radius:", ";box-sizing:border-box;color:", ";line-height:", ";max-height:", ";padding:", ";width:100%;", ";", ";&:hover:not([disabled]){", "}&:focus{outline:none;box-shadow:0 0 0 4px ", ";}&[disabled]{background-color:", ";}&::placeholder{color:", ";line-height:", ";font-size:", ";}"], withTransition(["border", "box-shadow"]), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.secondary70;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.lineHeight.medium;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.helpers.remCalc(224);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return `${theme2.spacing.xxSmall} ${theme2.spacing.small}`;
}, (_ref7) => {
  let {
    resize
  } = _ref7;
  return resize ? Ae(["resize:vertical;"]) : Ae(["resize:none;"]);
}, (_ref8) => {
  let {
    error: error2,
    theme: theme2
  } = _ref8;
  return Ae(["border:", ";"], error2 ? theme2.border.boxError : theme2.border.box);
}, (_ref9) => {
  let {
    error: error2,
    theme: theme2
  } = _ref9;
  return error2 ? Ae(["border:", ";"], theme2.border.boxError) : Ae(["border:1px solid ", ";"], theme2.colors.secondary40);
}, (props) => props.error ? props.theme.colors.danger20 : props.theme.colors.primary20, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.colors.secondary20;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.colors.secondary40;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.lineHeight.medium;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.typography.fontSize.medium;
});
StyledTextarea.defaultProps = {
  theme
};
StyledTextareaWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/styled.js
var StyledForm = styled_components_browser_esm_default.form.withConfig({
  displayName: "styled__StyledForm",
  componentId: "sc-qzey9b-0"
})(["", " ", "{", ",", "{max-width:", ";}}"], withMargins(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.breakpoints.tablet;
}, StyledInputWrapper, StyledTextareaWrapper, (_ref2) => {
  let {
    fullWidth,
    theme: theme2
  } = _ref2;
  return fullWidth ? "100%" : theme2.helpers.remCalc(416);
});
StyledForm.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/useFormContext.js
var import_react82 = __toESM(require_react());
var FormContext = (0, import_react82.createContext)({});
var useFormContext = () => {
  const context = (0, import_react82.useContext)(FormContext);
  if (!context) {
    throw new Error("useFormContext must be used within a FormContext");
  }
  return context;
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Form.js
var StyleableForm = (_ref) => {
  let {
    forwardedRef,
    ...props
  } = _ref;
  return import_react83.default.createElement(FormContext.Provider, {
    value: {
      fullWidth: props.fullWidth
    }
  }, import_react83.default.createElement(StyledForm, _extends({}, props, {
    ref: forwardedRef
  })));
};
var Form = typedMemo((0, import_react83.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react83.default.createElement(StyleableForm, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Description/Description.js
var import_react84 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Description/styled.js
var StyledLink3 = styled_components_browser_esm_default(Link).withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-1ha6q9e-0"
})(["font-size:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.typography.fontSize.small;
});
StyledLink3.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Description/Description.js
var FormControlDescription = (_ref) => {
  let {
    className,
    style: style2,
    link,
    ...props
  } = _ref;
  const renderedDescriptionLink = (0, import_react84.useMemo)(() => {
    if (!link) {
      return;
    }
    return link && import_react84.default.createElement(import_react84.default.Fragment, null, " ", import_react84.default.createElement(StyledLink3, link, link.text));
  }, [link]);
  return import_react84.default.createElement(Small, props, props.children, renderedDescriptionLink);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Error/Error.js
var import_react85 = __toESM(require_react());
var FormControlError = (_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react85.default.createElement(Small, _extends({
    color: "danger",
    margin: "none",
    marginLeft: "xxSmall"
  }, props));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Group/Group.js
var import_react88 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/Radio.js
var import_react87 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/Label/Label.js
var import_react86 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/Label/styled.js
var StyledLabel = styled_components_browser_esm_default(StyleableText).attrs({
  as: "label"
}).withConfig({
  displayName: "styled__StyledLabel",
  componentId: "sc-8ooy7n-0"
})(["cursor:pointer;", ""], (_ref) => {
  let {
    disabled
  } = _ref;
  return disabled && Ae(["cursor:not-allowed;"]);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/Label/Label.js
var RadioLabel = (0, import_react86.memo)((_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react86.default.createElement(StyledLabel, props);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/styled.js
var RadioLabelContainer = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__RadioLabelContainer",
  componentId: "sc-1x9u9a8-0"
})(["margin-left:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xSmall;
});
var RadioContainer = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__RadioContainer",
  componentId: "sc-1x9u9a8-1"
})(["align-items:flex-start;display:flex;"]);
var HiddenRadio = styled_components_browser_esm_default.input.withConfig({
  displayName: "styled__HiddenRadio",
  componentId: "sc-1x9u9a8-2"
})(["", ""], hideVisually());
var StyledRadio = styled_components_browser_esm_default.label.withConfig({
  displayName: "styled__StyledRadio",
  componentId: "sc-1x9u9a8-3"
})(["", " background-color:", ";border:", ";border-color:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-block;flex-shrink:0;height:", ";position:relative;user-select:none;width:", ";", ";&:hover{border-color:", ";}", ":focus + &{box-shadow:", ";}&:after{", " background-color:", ";border-radius:50%;content:'';height:", ";left:50%;opacity:0;position:absolute;top:50%;transform:translate(-50%,-50%);width:", ";}", ""], withTransition(["border-color", "box-shadow"]), (_ref2) => {
  let {
    disabled,
    theme: theme2
  } = _ref2;
  return disabled ? theme2.colors.secondary10 : theme2.colors.white;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.border.box;
}, (props) => props.checked ? props.theme.colors.primary40 : props.theme.colors.secondary30, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.borderRadius.circle;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.colors.white;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.large;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.large;
}, (_ref8) => {
  let {
    disabled,
    theme: theme2
  } = _ref8;
  return disabled && Ae(["cursor:not-allowed;border-color:", ";"], theme2.colors.secondary30);
}, (_ref9) => {
  let {
    checked,
    disabled,
    theme: theme2
  } = _ref9;
  return !disabled && (checked ? theme2.colors.primary50 : theme2.colors.secondary40);
}, HiddenRadio, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, withTransition(["opacity"]), (_ref11) => {
  let {
    disabled,
    theme: theme2
  } = _ref11;
  return disabled ? theme2.colors.secondary40 : theme2.colors.primary40;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.spacing.small;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.spacing.small;
}, (props) => props.checked && Ae(["&:after{opacity:1;}"]));
StyledRadio.defaultProps = {
  theme
};
RadioLabelContainer.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Radio/Radio.js
var RawRadio = (_ref) => {
  let {
    checked,
    className,
    description,
    disabled,
    label,
    forwardedRef,
    style: style2,
    ...props
  } = _ref;
  const uniqueRadioId = (0, import_react87.useId)();
  const labelId = (0, import_react87.useId)();
  const id = props.id ? props.id : uniqueRadioId;
  const renderedLabel = (0, import_react87.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react87.default.createElement(RadioLabel, {
        "aria-hidden": disabled,
        disabled,
        htmlFor: id,
        id: labelId
      }, label);
    }
    if ((0, import_react87.isValidElement)(label) && label.type === RadioLabel) {
      return (0, import_react87.cloneElement)(label, {
        htmlFor: id,
        id: labelId
      });
    }
    warning("label must be either a string or a RadioLabel component.");
  }, [disabled, id, label, labelId]);
  const renderedDescription = (0, import_react87.useMemo)(() => {
    if (!description) {
      return null;
    }
    const link = typeof description === "object" ? description.link : void 0;
    const text = typeof description === "object" ? description.text : description;
    return import_react87.default.createElement(FormControlDescription, {
      link
    }, text);
  }, [description]);
  return import_react87.default.createElement(RadioContainer, {
    className,
    style: style2
  }, import_react87.default.createElement(HiddenRadio, _extends({
    checked,
    disabled,
    id,
    type: "radio"
  }, props, {
    "aria-labelledby": labelId,
    ref: forwardedRef
  })), import_react87.default.createElement(StyledRadio, {
    "aria-hidden": true,
    checked,
    disabled,
    htmlFor: id
  }), import_react87.default.createElement(RadioLabelContainer, null, renderedLabel, renderedDescription));
};
var Radio = typedMemo((0, import_react87.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react87.default.createElement(RawRadio, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Group/styled.js
var SharedGroupStyles = Ae(["display:grid;grid-gap:", ";margin-bottom:", ";&:last-child{margin-bottom:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return `${theme2.spacing.xSmall} ${theme2.spacing.medium}`;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.medium;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.none;
});
var StyledError = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledError",
  componentId: "sc-1a6yr6l-0"
})(["flex-direction:row;"]);
var StyledGroup = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledGroup",
  componentId: "sc-1a6yr6l-1"
})(["", ";"], SharedGroupStyles);
var StyledInlineGroup = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledInlineGroup",
  componentId: "sc-1a6yr6l-2"
})(["", ";", "{", " ", "}"], SharedGroupStyles, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.breakpoints.tablet;
}, (_ref5) => {
  let {
    childrenCount,
    fullWidth,
    theme: theme2
  } = _ref5;
  return childrenCount === 2 && Ae(["grid-template-columns:repeat(2,", ");", "{grid-column:1 / 3;}"], fullWidth ? "1fr" : theme2.helpers.remCalc(200), StyledError);
}, (_ref6) => {
  let {
    childrenCount,
    fullWidth,
    theme: theme2
  } = _ref6;
  return childrenCount === 3 && Ae(["grid-template-columns:repeat(3,", ");", "{grid-column:1 / 4;}"], fullWidth ? "1fr" : theme2.helpers.remCalc(128), StyledError);
});
StyledError.defaultProps = {
  theme
};
StyledGroup.defaultProps = {
  theme
};
StyledInlineGroup.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Group/Group.js
var FormGroupContext = (0, import_react88.createContext)({});
var FormGroup = (props) => {
  const {
    fullWidth
  } = useFormContext();
  const [inputErrors, setInputErrors] = (0, import_react88.useState)({});
  const {
    children,
    errors: groupErrors
  } = props;
  const childrenCount = import_react88.Children.count(children);
  const inline = !import_react88.Children.toArray(children).every((child) => {
    return (0, import_react88.isValidElement)(child) && (child.type === Checkbox || child.type === Radio);
  });
  const contextValue = (0, import_react88.useMemo)(() => ({
    errors: inputErrors,
    setErrors: setInputErrors
  }), [inputErrors]);
  const renderErrors = () => {
    if (groupErrors) {
      return generateErrors(groupErrors, true);
    }
    return inputErrors && generateErrors(Object.values(inputErrors));
  };
  return import_react88.default.createElement(FormGroupContext.Provider, {
    value: contextValue
  }, inline ? import_react88.default.createElement(StyledInlineGroup, {
    childrenCount,
    fullWidth
  }, children, renderErrors()) : import_react88.default.createElement(StyledGroup, null, children, renderErrors()));
};
var generateErrors = function(errors) {
  let fromGroup = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  let key = arguments.length > 2 ? arguments[2] : void 0;
  if (typeof errors === "string") {
    return import_react88.default.createElement(import_react88.Fragment, {
      key
    }, import_react88.default.createElement(StyledError, {
      alignItems: "center"
    }, import_react88.default.createElement(ErrorIcon, {
      color: "danger"
    }), import_react88.default.createElement(FormControlError, null, errors)));
  }
  if ((0, import_react88.isValidElement)(errors) && errors.type === FormControlError) {
    return import_react88.default.createElement(import_react88.Fragment, {
      key
    }, import_react88.default.createElement(StyledError, {
      alignItems: "center"
    }, import_react88.default.createElement(ErrorIcon, {
      color: "danger"
    }), errors));
  }
  if (Array.isArray(errors)) {
    return errors.map((error2, index) => error2 && generateErrors(error2, fromGroup, index));
  }
  if (!errors) {
    return null;
  }
  if (fromGroup) {
    warning("errors must be either a string, FormControlError, or an array of strings or FormControlError components.");
  }
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Label/Label.js
var import_react89 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Label/styled.js
var StyledLabel2 = styled_components_browser_esm_default(StyleableH4).attrs({
  as: "label"
}).withConfig({
  displayName: "styled__StyledLabel",
  componentId: "sc-m3fyue-0"
})(["cursor:pointer;display:inline-block;margin-bottom:", ";", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xxSmall;
}, (_ref2) => {
  let {
    theme: theme2,
    renderOptional
  } = _ref2;
  return renderOptional && Ae(["&::after{color:", ";content:' (optional)';font-weight:", ";}"], theme2.colors.secondary60, theme2.typography.fontWeight.regular);
});
StyledLabel2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Form/Label/Label.js
var FormControlLabel = (_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react89.default.createElement(StyledLabel2, props);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/Label/Label.js
var import_react90 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/Label/styled.js
var StyledLabel3 = styled_components_browser_esm_default(StyleableText).attrs({
  as: "label"
}).withConfig({
  displayName: "styled__StyledLabel",
  componentId: "sc-3soea9-0"
})(["cursor:pointer;", " ", ""], (_ref) => {
  let {
    disabled
  } = _ref;
  return disabled && Ae(["cursor:not-allowed;"]);
}, (_ref2) => {
  let {
    hidden
  } = _ref2;
  return hidden && hideVisually();
});
StyledLabel3.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/Label/Label.js
var CheckboxLabel = (0, import_react90.memo)((_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react90.default.createElement(StyledLabel3, props);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/styled.js
var CheckboxLabelContainer = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__CheckboxLabelContainer",
  componentId: "sc-s1u0st-0"
})(["margin-left:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xSmall;
});
var CheckboxContainer = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__CheckboxContainer",
  componentId: "sc-s1u0st-1"
})(["align-items:flex-start;display:flex;"]);
var HiddenCheckbox = styled_components_browser_esm_default.input.withConfig({
  displayName: "styled__HiddenCheckbox",
  componentId: "sc-s1u0st-2"
})(["", ""], hideVisually());
var StyledCheckbox = styled_components_browser_esm_default.label.withConfig({
  displayName: "styled__StyledCheckbox",
  componentId: "sc-s1u0st-3"
})(["", " align-items:center;background:", ";box-sizing:border-box;border:", ";border-color:", ";border-radius:", ";color:", ";cursor:pointer;display:inline-flex;height:", ";justify-content:center;margin-bottom:", ";margin-top:", ";user-select:none;width:", ";", ";", " ", ":focus + &{box-shadow:", ";}svg{opacity:", ";}"], withTransition(["border-color", "background", "box-shadow", "color", "opacity"]), (_ref2) => {
  let {
    checked,
    isIndeterminate,
    theme: theme2
  } = _ref2;
  return checked || isIndeterminate ? theme2.colors.primary : theme2.colors.white;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.border.box;
}, (_ref4) => {
  let {
    checked,
    isIndeterminate,
    theme: theme2
  } = _ref4;
  return checked || isIndeterminate ? theme2.colors.primary : theme2.colors.secondary30;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.borderRadius.normal;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.colors.white;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.large;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.helpers.remCalc(2);
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.helpers.remCalc(2);
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.spacing.large;
}, (_ref11) => {
  let {
    checked,
    disabled,
    isIndeterminate,
    theme: theme2
  } = _ref11;
  return disabled && Ae(["background:", ";border-color:", ";cursor:not-allowed;"], checked || isIndeterminate ? theme2.colors.secondary30 : theme2.colors.secondary10, theme2.colors.secondary30);
}, (_ref12) => {
  let {
    checked,
    isIndeterminate,
    disabled,
    theme: theme2
  } = _ref12;
  return !disabled && `&:hover {
      border-color: ${checked || isIndeterminate ? theme2.colors.primary : theme2.colors.secondary40};
    }`;
}, HiddenCheckbox, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return `0 0 0 ${theme2.spacing.xxSmall} ${theme2.colors.primary20}`;
}, (_ref14) => {
  let {
    checked,
    isIndeterminate
  } = _ref14;
  return checked || isIndeterminate ? 1 : 0;
});
StyledCheckbox.defaultProps = {
  theme
};
CheckboxLabelContainer.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Checkbox/Checkbox.js
var RawCheckbox = (_ref) => {
  let {
    checked,
    className,
    description,
    disabled,
    hiddenLabel,
    isIndeterminate,
    label,
    forwardedRef,
    style: style2,
    badge,
    ...props
  } = _ref;
  const uniqueCheckboxId = (0, import_react91.useId)();
  const labelId = (0, import_react91.useId)();
  const id = props.id ? props.id : uniqueCheckboxId;
  const renderedLabel = (0, import_react91.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react91.default.createElement(CheckboxLabel, {
        "aria-hidden": disabled,
        disabled,
        hidden: hiddenLabel,
        htmlFor: id,
        id: labelId
      }, label, badge ? import_react91.default.createElement(Badge, _extends({
        marginLeft: "xSmall"
      }, badge)) : null);
    }
    if ((0, import_react91.isValidElement)(label) && label.type === CheckboxLabel) {
      return (0, import_react91.cloneElement)(label, {
        hidden: hiddenLabel,
        htmlFor: id,
        id: labelId
      });
    }
    warning("label must be either a string or a CheckboxLabel component.");
  }, [badge, disabled, hiddenLabel, id, label, labelId]);
  const renderedDescription = (0, import_react91.useMemo)(() => {
    if (!description) {
      return null;
    }
    const link = typeof description === "object" ? description.link : void 0;
    const text = typeof description === "object" ? description.text : description;
    return import_react91.default.createElement(FormControlDescription, {
      link
    }, text);
  }, [description]);
  return import_react91.default.createElement(CheckboxContainer, {
    className,
    style: style2
  }, import_react91.default.createElement(HiddenCheckbox, _extends({
    checked,
    disabled,
    id,
    type: "checkbox"
  }, props, {
    "aria-checked": checked,
    "aria-labelledby": labelId,
    ref: (checkbox) => {
      if (checkbox && typeof isIndeterminate === "boolean") {
        checkbox.indeterminate = !checked && isIndeterminate;
      }
      if (forwardedRef) {
        if (typeof forwardedRef === "function") {
          forwardedRef(checkbox);
        } else {
          forwardedRef.current = checkbox;
        }
      }
    }
  })), import_react91.default.createElement(StyledCheckbox, {
    "aria-hidden": true,
    checked,
    disabled,
    htmlFor: id,
    isIndeterminate
  }, !checked && isIndeterminate ? import_react91.default.createElement(RemoveIcon, null) : import_react91.default.createElement(CheckIcon, null)), import_react91.default.createElement(CheckboxLabelContainer, null, renderedLabel, renderedDescription));
};
var Checkbox = typedMemo((0, import_react91.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react91.default.createElement(RawCheckbox, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/List/Item/Content.js
var import_react93 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Tooltip/Tooltip.js
var import_react92 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@bigcommerce/big-design/dist/es/components/Tooltip/styled.js
var StyledTooltip = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledTooltip",
  componentId: "sc-14xrlwe-0"
})(["", ";background-color:", ";max-width:", ";padding:", ";z-index:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.shadow.floating;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary70;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.helpers.remCalc(336);
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.spacing.xSmall;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.zIndex.tooltip;
});
StyledTooltip.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tooltip/Tooltip.js
var Tooltip = (0, import_react92.memo)((_ref) => {
  let {
    children,
    modifiers,
    trigger,
    id,
    ...props
  } = _ref;
  const [isVisible3, setIsVisible] = (0, import_react92.useState)(false);
  const [tooltipContainer, setTooltipContainer] = (0, import_react92.useState)(null);
  const tooltipModifiers = (0, import_react92.useMemo)(() => {
    const mods = modifiers || [];
    return [{
      name: "eventListeners",
      options: {
        scroll: isVisible3,
        resize: isVisible3
      }
    }, {
      name: "offset",
      options: {
        offset: [0, 4]
      }
    }, ...mods];
  }, [isVisible3, modifiers]);
  (0, import_react92.useEffect)(() => {
    const container = document.createElement("div");
    document.body.appendChild(container);
    setTooltipContainer(container);
  }, []);
  (0, import_react92.useEffect)(() => {
    return () => {
      if (tooltipContainer) {
        document.body.removeChild(tooltipContainer);
      }
    };
  }, [tooltipContainer]);
  const renderContent = () => {
    return typeof children === "string" ? import_react92.default.createElement(Small, {
      color: "white"
    }, children) : children;
  };
  const hideTooltip = () => {
    setIsVisible(false);
  };
  const showTooltip = () => {
    setIsVisible(true);
  };
  const onKeyDown = (event) => {
    if (event.key === "Escape") {
      setIsVisible(false);
    }
  };
  return import_react92.default.createElement(Manager, null, import_react92.default.createElement(Reference, null, (_ref2) => {
    let {
      ref: ref2
    } = _ref2;
    return (0, import_react92.cloneElement)(trigger, {
      ref: ref2,
      onBlur: hideTooltip,
      onFocus: showTooltip,
      onKeyDown,
      onMouseEnter: showTooltip,
      onMouseLeave: hideTooltip
    });
  }), tooltipContainer ? (0, import_react_dom.createPortal)(import_react92.default.createElement(Popper, {
    modifiers: tooltipModifiers,
    placement: props.placement || "top"
  }, (_ref3) => {
    let {
      placement,
      ref: ref2,
      style: style2
    } = _ref3;
    return isVisible3 && import_react92.default.createElement(StyledTooltip, {
      "data-placement": placement,
      id,
      ref: ref2,
      style: style2
    }, renderContent());
  }), tooltipContainer) : null);
});

// node_modules/@bigcommerce/big-design/dist/es/components/List/Item/styled.js
var StyledListItem2 = styled_components_browser_esm_default.li.withConfig({
  displayName: "styled__StyledListItem",
  componentId: "sc-surxtv-0"
})(["", " align-items:center;box-sizing:border-box;cursor:pointer;display:flex;font-weight:", ";justify-content:space-between;min-height:", ";min-width:", ";outline:none;padding:", ";a{align-items:center;color:", ";display:flex;height:100%;text-decoration:none;width:100%;&:focus{outline:none;}}", " ", " label{cursor:", ";}"], withTransition(["background-color", "color"]), (_ref) => {
  let {
    theme: theme2,
    isSelected
  } = _ref;
  return isSelected ? theme2.typography.fontWeight.semiBold : theme2.typography.fontWeight.regular;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.helpers.remCalc(36);
}, (_ref3) => {
  let {
    autoWidth,
    theme: theme2
  } = _ref3;
  return autoWidth ? "auto" : theme2.helpers.remCalc(256);
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return `${theme2.spacing.xxSmall} ${theme2.spacing.medium}`;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.colors.secondary70;
}, (_ref6) => {
  let {
    actionType,
    isAction,
    isHighlighted,
    theme: theme2
  } = _ref6;
  return isHighlighted && (isAction ? actionType === "normal" ? Ae(["background-color:", ";color:", ";a{color:", ";}"], theme2.colors.primary10, theme2.colors.primary, theme2.colors.primary) : Ae(["background-color:", ";color:", ";a{color:", ";}"], theme2.colors.danger10, theme2.colors.danger50, theme2.colors.danger50) : Ae(["background-color:", ";"], theme2.colors.secondary10));
}, (_ref7) => {
  let {
    disabled,
    theme: theme2
  } = _ref7;
  return disabled && Ae(["color:", ";cursor:not-allowed;"], theme2.colors.secondary40);
}, (_ref8) => {
  let {
    disabled
  } = _ref8;
  return disabled ? "not-allowed" : "pointer";
});
var StyledLink4 = styled_components_browser_esm_default.a.withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-surxtv-1"
})(["", " align-items:center;color:", ";display:flex;height:100%;text-decoration:none;width:100%;&:focus{outline:none;}"], withTransition(["background-color", "color"]), (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.colors.secondary70;
});
StyledListItem2.defaultProps = {
  theme
};
StyledLink4.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/List/Item/Content.js
var Content = (0, import_react93.memo)((_ref) => {
  let {
    item,
    isHighlighted
  } = _ref;
  const iconColor = (0, import_react93.useMemo)(() => {
    if (item.disabled) {
      return "secondary40";
    }
    if (!isHighlighted || !("onActionClick" in item)) {
      return "secondary60";
    }
    return "actionType" in item && item.actionType ? "danger50" : "primary";
  }, [isHighlighted, item]);
  const renderIcon = (0, import_react93.useMemo)(() => (0, import_react93.isValidElement)(item.icon) && (0, import_react93.cloneElement)(item.icon, {
    color: iconColor,
    size: "large"
  }), [iconColor, item]);
  const descriptionColor = (0, import_react93.useCallback)((isDisabled) => isDisabled ? "secondary40" : "secondary60", []);
  const wrapInLink = (0, import_react93.useCallback)((linkItem, content) => import_react93.default.createElement(StyledLink4, {
    href: linkItem.url,
    tabIndex: -1,
    target: linkItem.target
  }, content), []);
  const wrapInTooltip = (0, import_react93.useCallback)((tooltip, tooltipTrigger) => import_react93.default.createElement(Tooltip, {
    modifiers: [{
      name: "preventOverflow"
    }, {
      name: "offset",
      options: {
        offset: [0, 20]
      }
    }],
    placement: "left",
    trigger: tooltipTrigger
  }, tooltip), []);
  const getContent = (0, import_react93.useMemo)(() => {
    const {
      content,
      disabled,
      description,
      icon
    } = item;
    const baseContent = import_react93.default.createElement(Flex, {
      alignItems: "center",
      flexDirection: "row"
    }, icon && import_react93.default.createElement(FlexItem, {
      alignSelf: description ? "flex-start" : void 0,
      paddingRight: "xSmall",
      paddingTop: description ? "xSmall" : void 0
    }, renderIcon), description ? import_react93.default.createElement(FlexItem, {
      paddingVertical: "xSmall"
    }, content, import_react93.default.createElement(Small, {
      color: descriptionColor(disabled)
    }, description)) : content);
    const finalContent = "type" in item && item.type === "link" && !disabled ? wrapInLink(item, baseContent) : baseContent;
    return disabled && "tooltip" in item && item.tooltip ? wrapInTooltip(item.tooltip, finalContent) : finalContent;
  }, [descriptionColor, item, renderIcon, wrapInLink, wrapInTooltip]);
  return getContent;
});

// node_modules/@bigcommerce/big-design/dist/es/components/List/Item/Item.js
var StyleableListItem = typedMemo((_ref) => {
  let {
    actionType = "normal",
    autoWidth = false,
    forwardedRef,
    index,
    isAction = false,
    isChecked = false,
    isHighlighted,
    isSelected = false,
    item,
    getItemProps,
    addItem,
    removeItem,
    ...props
  } = _ref;
  return removeItem && addItem ? import_react94.default.createElement(StyledListItem2, _extends({}, getItemProps({
    ...props,
    disabled: item.disabled,
    index,
    item,
    onClick: () => {
      if (item.disabled) {
        return;
      }
      const hasValue = (item2) => "value" in item2;
      if (hasValue(item)) {
        isChecked ? removeItem(item) : addItem(item);
      }
    },
    ref: forwardedRef
  }), {
    actionType,
    autoWidth,
    isAction,
    isHighlighted
  }), import_react94.default.createElement(Checkbox, {
    checked: isChecked,
    description: item.description,
    disabled: item.disabled,
    label: item.content,
    onChange: () => null,
    onClick: (event) => {
      event.preventDefault();
      event.stopPropagation();
    },
    tabIndex: -1
  })) : import_react94.default.createElement(StyledListItem2, _extends({}, getItemProps({
    ...props,
    disabled: item.disabled,
    index,
    item,
    ref: forwardedRef
  }), {
    actionType,
    autoWidth,
    isAction,
    isHighlighted,
    isSelected
  }), import_react94.default.createElement(Content, {
    isHighlighted,
    item
  }), isSelected && import_react94.default.createElement(CheckIcon, {
    color: "primary",
    size: "large"
  }));
});
var ListItem = (0, import_react94.memo)((0, import_react94.forwardRef)((props, ref2) => import_react94.default.createElement(StyleableListItem, _extends({}, props, {
  forwardedRef: ref2
}))));

// node_modules/@bigcommerce/big-design/dist/es/components/List/styled.js
var StyledList = styled_components_browser_esm_default.ul.withConfig({
  displayName: "styled__StyledList",
  componentId: "sc-5w3dcq-0"
})(["", ";background-color:", ";color:", ";margin:0;max-height:", ";outline:none;overflow-y:auto;padding:", " 0;z-index:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.shadow.raised;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.white;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.secondary70;
}, (_ref4) => {
  let {
    theme: theme2,
    maxHeight
  } = _ref4;
  return maxHeight ? theme2.helpers.remCalc(maxHeight) : "";
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.xSmall;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.zIndex.popover;
});
StyledList.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/List/List.js
var StyleableList = typedMemo((_ref) => {
  let {
    action,
    addItem,
    autoWidth,
    filteredItems,
    forwardedRef,
    getItemProps,
    getMenuProps,
    highlightedIndex,
    isDropdown = false,
    isOpen,
    items,
    maxHeight = 250,
    selectedItem,
    selectedItems,
    update: update2,
    removeItem,
    ...props
  } = _ref;
  const itemKey = (0, import_react95.useRef)(0);
  const {
    height,
    width
  } = useWindowSize();
  useIsomorphicLayoutEffect(() => {
    async function scheduleUpdate() {
      if (update2 && isOpen) {
        await update2();
      }
    }
    scheduleUpdate();
  }, [isOpen, height, width, selectedItems == null ? void 0 : selectedItems.length]);
  const renderAction = (0, import_react95.useCallback)((action2) => {
    const key = itemKey.current;
    return import_react95.default.createElement(Box, {
      borderTop: "box",
      marginTop: "xSmall",
      paddingTop: "xSmall"
    }, import_react95.default.createElement(ListItem, {
      actionType: action2.actionType,
      autoWidth,
      getItemProps,
      index: key,
      isAction: true,
      isHighlighted: highlightedIndex === key,
      isSelected: false,
      item: action2,
      key: "action"
    }));
  }, [getItemProps, autoWidth, highlightedIndex]);
  const renderItems = (0, import_react95.useCallback)((listItems) => {
    return Array.isArray(listItems) && listItems.map((item) => {
      if (filteredItems && isOption(item) && !filteredItems.find((filteredItem) => isOption(filteredItem) && filteredItem.value === item.value)) {
        return null;
      }
      const key = itemKey.current;
      itemKey.current += 1;
      const isChecked = isOption(item) && selectedItems && Boolean(selectedItems.find((selected) => selected.value === item.value));
      const hasActionType = (item2) => "actionType" in item2;
      return import_react95.default.createElement(ListItem, {
        actionType: hasActionType(item) ? item.actionType : "normal",
        addItem,
        autoWidth,
        getItemProps,
        index: key,
        isAction: isDropdown,
        isChecked: isChecked || false,
        isHighlighted: !item.disabled && highlightedIndex === key,
        isSelected: !isDropdown && isOption(item) && (selectedItem == null ? void 0 : selectedItem.value) === item.value,
        item,
        key: `${key}-${item.content}`,
        removeItem
      });
    });
  }, [addItem, autoWidth, filteredItems, getItemProps, highlightedIndex, isDropdown, removeItem, selectedItem, selectedItems]);
  const renderGroup = (0, import_react95.useCallback)((group) => {
    return import_react95.default.createElement(import_react95.default.Fragment, null, group.separated && import_react95.default.createElement(ListGroupSeparator, null), Boolean(group.label) && import_react95.default.createElement(ListGroupHeader, null, group.label), isItemGroup(group) && renderItems(group.items), isOptionGroup(group) && renderItems(group.options));
  }, [renderItems]);
  const renderChildren = (0, import_react95.useMemo)(() => {
    itemKey.current = 0;
    const groupFragment = (items2) => items2.map((group, index) => import_react95.default.createElement(import_react95.Fragment, {
      key: index
    }, renderGroup(group)));
    if (Array.isArray(items) && isGroups(items)) {
      return import_react95.default.createElement(import_react95.default.Fragment, null, groupFragment(items), action && renderAction(action));
    }
    if (Array.isArray(items) && isItems(items)) {
      return import_react95.default.createElement(import_react95.default.Fragment, null, renderItems(items), action && renderAction(action));
    }
  }, [action, items, renderAction, renderGroup, renderItems]);
  return import_react95.default.createElement(StyledList, _extends({}, getMenuProps({
    ...props,
    onKeyDown: (event) => {
      if (event.key === "Enter") {
        const element = event.currentTarget.children[highlightedIndex];
        const link = element.querySelector("a");
        if (link && !link.getAttribute("disabled")) {
          link.click();
        }
      }
    },
    ref: forwardedRef
  }), {
    maxHeight
  }), isOpen && renderChildren);
});
var List = (0, import_react95.memo)(
  // Using unknown because memo looses the generic type
  (0, import_react95.forwardRef)((props, ref2) => import_react95.default.createElement(StyleableList, _extends({}, props, {
    forwardedRef: ref2
  })))
);
var isGroups = (items) => items.every((item) => isItemGroup(item) || isOptionGroup(item));
var isItems = (items) => items.every((item) => isItem(item) || isOption(item));
var isOption = (item) => "value" in item;
var isItem = (item) => "content" in item && !("items" in item);
var isItemGroup = (item) => "items" in item && !("content" in item);
var isOptionGroup = (item) => "options" in item && !("value" in item);

// node_modules/@bigcommerce/big-design/dist/es/components/Dropdown/styled.js
var StyledBox2 = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledBox",
  componentId: "sc-2535c9-0"
})(["position:relative;"]);
StyledBox2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Dropdown/Dropdown.js
var Dropdown = (0, import_react96.memo)((_ref) => {
  let {
    autoWidth = false,
    className,
    disabled = false,
    maxHeight,
    id,
    items,
    placement = "bottom-start",
    positionFixed = false,
    toggle,
    style: style2,
    ...props
  } = _ref;
  const dropdownUniqueId = (0, import_react96.useId)();
  const flattenItems = (0, import_react96.useCallback)((items2) => {
    const isGroups2 = (items3) => items3.every((items4) => "items" in items4 && !("content" in items4));
    return isGroups2(items2) ? items2.map((group) => group.items).reduce((acum, curr) => acum.concat(curr), []) : items2;
  }, []);
  const flattenedItems = (0, import_react96.useMemo)(() => flattenItems(items), [flattenItems, items]);
  const handleOnSelectedItemChange = (0, import_react96.useCallback)((_ref2) => {
    let {
      selectedItem
    } = _ref2;
    if (selectedItem && selectedItem.type !== "link" && typeof selectedItem.onItemClick === "function") {
      selectedItem.onItemClick(selectedItem);
    }
  }, []);
  const stateReducer2 = (state, actionAndChanges) => {
    const {
      changes,
      type
    } = actionAndChanges;
    switch (type) {
      case useSelect.stateChangeTypes.ToggleButtonKeyDownArrowDown:
        if (state.highlightedIndex === flattenedItems.length - 1) {
          return {
            ...changes,
            highlightedIndex: 0
          };
        }
        return changes;
      case useSelect.stateChangeTypes.ToggleButtonKeyDownArrowUp:
        if (state.highlightedIndex === 0) {
          return {
            ...changes,
            highlightedIndex: flattenedItems.length - 1
          };
        }
        return changes;
      case useSelect.stateChangeTypes.ToggleButtonBlur:
        return {
          ...changes,
          selectedItem: null
        };
      default:
        return changes;
    }
  };
  const {
    getItemProps,
    getMenuProps,
    getToggleButtonProps,
    highlightedIndex,
    isOpen
  } = useSelect({
    defaultHighlightedIndex: 0,
    id: dropdownUniqueId,
    itemToString: (item) => item ? item.content : "",
    items: flattenedItems,
    menuId: id,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: null,
    // We never set a selected item
    stateReducer: stateReducer2,
    // @ts-expect-error toggle is of unknown type
    toggleButtonId: toggle.props.id
  });
  const referenceRef = (0, import_react96.useRef)(null);
  const popperRef = (0, import_react96.useRef)(null);
  const {
    attributes,
    styles,
    update: update2
  } = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: "eventListeners",
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: "offset",
      options: {
        offset: [0, 4]
      }
    }],
    placement,
    strategy: positionFixed ? "fixed" : "absolute"
  });
  const clonedToggle = (0, import_react96.isValidElement)(toggle) && (0, import_react96.cloneElement)(toggle, {
    ...getToggleButtonProps({
      "aria-haspopup": "menu",
      // Downshift sets this to a label id that doesn't exist
      "aria-labelledby": void 0,
      disabled,
      ref: referenceRef,
      role: "button"
    })
  });
  return import_react96.default.createElement(StyledBox2, null, clonedToggle, import_react96.default.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), import_react96.default.createElement(List, _extends({}, props, {
    autoWidth,
    getItemProps,
    getMenuProps: () => getMenuProps({
      role: "menu"
    }),
    highlightedIndex,
    isDropdown: true,
    isOpen,
    items,
    maxHeight,
    update: update2
  }))));
});

// node_modules/@bigcommerce/big-design/dist/es/components/ButtonGroup/styled.js
var StyledButton2 = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-1xjvulo-0"
})(["", " &:focus{z-index:1;}"], (_ref) => {
  let {
    borderRadius,
    theme: theme2
  } = _ref;
  return borderRadius ? Ae(["border-radius:", ";"], theme2.borderRadius.normal) : Ae(["border-radius:", ";"], theme2.borderRadius.none);
});
var StyledFlexItem2 = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledFlexItem",
  componentId: "sc-1xjvulo-1"
})(["margin-right:-1px;&:last-of-type{margin-right:0;}&:first-of-type ", "{border-bottom-left-radius:", ";border-top-left-radius:", ";}&:nth-last-of-type(-n + 2) ", "{border-bottom-right-radius:", ";border-top-right-radius:", ";}", ""], StyledButton2, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.borderRadius.normal;
}, StyledButton2, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.borderRadius.normal;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.borderRadius.normal;
}, (_ref6) => {
  let {
    isVisible: isVisible3
  } = _ref6;
  return !isVisible3 && Ae(["position:absolute;visibility:hidden;z-index:", ";"], (_ref7) => {
    let {
      theme: theme2
    } = _ref7;
    return -theme2.zIndex.tooltip;
  });
});
StyledButton2.defaultProps = {
  theme
};
StyledFlexItem2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/ButtonGroup/ButtonGroup.js
var excludeIconProps = (_ref) => {
  let {
    iconOnly,
    iconRight,
    iconLeft,
    ...actionProps
  } = _ref;
  return actionProps;
};
var ButtonGroup = (0, import_react97.memo)((_ref2) => {
  let {
    actions,
    ...wrapperProps
  } = _ref2;
  const parentRef = (0, import_react97.createRef)();
  const dropdownRef = (0, import_react97.createRef)();
  const [isMenuVisible, setIsMenuVisible] = (0, import_react97.useState)(false);
  const [actionsState, setActionsState] = (0, import_react97.useState)([]);
  (0, import_react97.useEffect)(() => {
    setActionsState(actions.map((action) => ({
      isVisible: true,
      action: excludeIconProps(action),
      ref: (0, import_react97.createRef)()
    })));
  }, [actions]);
  const hideOverflowedActions = (0, import_react97.useCallback)(() => {
    var _a, _b;
    const parentWidth = ((_a = parentRef.current) == null ? void 0 : _a.offsetWidth) ?? 0;
    const dropdownWidth = ((_b = dropdownRef.current) == null ? void 0 : _b.offsetWidth) ?? 0;
    let remainingWidth = parentWidth;
    const nextState = actionsState.map((stateObj) => {
      var _a2;
      const actionWidth = (_a2 = stateObj.ref.current) == null ? void 0 : _a2.offsetWidth;
      if (!actionWidth) {
        return stateObj;
      }
      if (stateObj.action.actionType === "destructive") {
        return {
          ...stateObj,
          isVisible: false
        };
      }
      if (remainingWidth - actionWidth > dropdownWidth) {
        remainingWidth -= actionWidth;
        return {
          ...stateObj,
          isVisible: true
        };
      }
      return {
        ...stateObj,
        isVisible: false
      };
    });
    const visibleActions = actionsState.filter((_ref3) => {
      let {
        isVisible: isVisible3
      } = _ref3;
      return isVisible3;
    });
    const nextVisibleActions = nextState.filter((_ref4) => {
      let {
        isVisible: isVisible3
      } = _ref4;
      return isVisible3;
    });
    if (visibleActions.length !== nextVisibleActions.length) {
      setActionsState(nextState);
    }
  }, [actionsState, dropdownRef, parentRef]);
  const renderedDropdown = (0, import_react97.useMemo)(() => import_react97.default.createElement(StyledFlexItem2, {
    "data-testid": "buttongroup-dropdown",
    isVisible: isMenuVisible,
    ref: dropdownRef,
    role: "listitem"
  }, import_react97.default.createElement(Dropdown, {
    items: actionsState.filter((_ref5) => {
      let {
        isVisible: isVisible3
      } = _ref5;
      return !isVisible3;
    }).map((_ref6) => {
      let {
        action,
        ref: ref2
      } = _ref6;
      return {
        actionType: action.actionType,
        content: action.text,
        disabled: action.disabled,
        onItemClick: () => {
          if (ref2.current) {
            ref2.current.getElementsByTagName("button")[0].click();
          }
        },
        hash: action.text.toLowerCase(),
        icon: action.icon
      };
    }),
    placement: "bottom-end",
    toggle: import_react97.default.createElement(StyledButton2, {
      borderRadius: actionsState.every((_ref7) => {
        let {
          isVisible: isVisible3
        } = _ref7;
        return !isVisible3;
      }),
      iconOnly: import_react97.default.createElement(MoreHorizIcon, {
        title: "more"
      }),
      type: "button",
      variant: "secondary"
    })
  })), [actionsState, dropdownRef, isMenuVisible]);
  const renderedActions = (0, import_react97.useMemo)(() => [...actionsState].reverse().sort((_ref8) => {
    let {
      isVisible: isVisible3
    } = _ref8;
    return isVisible3 ? -1 : 1;
  }).map((_ref9, key) => {
    let {
      action,
      isVisible: isVisible3,
      ref: ref2
    } = _ref9;
    const {
      text,
      icon,
      ...buttonProps
    } = action;
    return import_react97.default.createElement(StyledFlexItem2, {
      "data-testid": "buttongroup-item",
      isVisible: isVisible3,
      key,
      ref: ref2,
      role: "listitem"
    }, import_react97.default.createElement(StyledButton2, _extends({}, buttonProps, {
      variant: "secondary"
    }), text));
  }), [actionsState]);
  (0, import_react97.useEffect)(() => {
    const nextIsMenuVisible = actionsState.some((_ref10) => {
      let {
        isVisible: isVisible3
      } = _ref10;
      return !isVisible3;
    });
    if (nextIsMenuVisible !== isMenuVisible) {
      setIsMenuVisible(nextIsMenuVisible);
    }
  }, [actionsState, isMenuVisible]);
  (0, import_react97.useEffect)(() => {
    hideOverflowedActions();
  }, [actions, parentRef, hideOverflowedActions]);
  useWindowResizeListener(() => {
    hideOverflowedActions();
  });
  return actions.length > 0 ? import_react97.default.createElement(Flex, _extends({}, wrapperProps, {
    "data-testid": "buttongroup-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }), renderedActions, renderedDropdown) : null;
});

// node_modules/@bigcommerce/big-design/dist/es/components/Counter/Counter.js
var import_react99 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Form/useInputErrors.js
var import_react98 = __toESM(require_react());
var isValidError = (err) => {
  if (!err) {
    return false;
  }
  if (typeof err === "string") {
    return true;
  }
  if ((0, import_react98.isValidElement)(err) && err.type === FormControlError) {
    return true;
  }
  warning("error must be either a string or a FormControlError component.");
  return false;
};
var useInputErrors = (inputId, inputErrors) => {
  const {
    setErrors
  } = (0, import_react98.useContext)(FormGroupContext);
  const errors = (0, import_react98.useMemo)(() => {
    if (Array.isArray(inputErrors)) {
      const filteredErrors = inputErrors.filter((errorItem) => isValidError(errorItem));
      return filteredErrors.length > 0 ? filteredErrors : null;
    }
    return isValidError(inputErrors) ? inputErrors : null;
  }, [inputErrors]);
  (0, import_react98.useEffect)(() => {
    setErrors == null ? void 0 : setErrors((val) => {
      return {
        ...val,
        [inputId]: errors
      };
    });
    return () => {
      setErrors == null ? void 0 : setErrors((val) => {
        return {
          ...val,
          [inputId]: null
        };
      });
    };
  }, [errors, inputId, setErrors]);
  return {
    errors
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/Counter/styled.js
var StyledCounterButton = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledCounterButton",
  componentId: "sc-byc1zu-0"
})(["background-color:inherit;border:none;color:", ";width:auto;height:auto;padding:0;&[disabled],&:active,&:hover:not(:active){background-color:inherit;}&[disabled]{color:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary60;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary;
});
var StyledCounterWrapper = styled_components_browser_esm_default(StyledInputWrapper).withConfig({
  displayName: "styled__StyledCounterWrapper",
  componentId: "sc-byc1zu-1"
})(["padding:0 ", ";width:", ";"], (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.xxSmall;
}, remCalc(125));
var StyledCounterInput = styled_components_browser_esm_default(StyledInput).withConfig({
  displayName: "styled__StyledCounterInput",
  componentId: "sc-byc1zu-2"
})(["text-align:center;padding:0;overflow:hidden;"]);
StyledCounterButton.defaultProps = {
  theme
};
StyledCounterInput.defaultProps = {
  theme
};
StyledCounterWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Counter/Counter.js
var StylableCounter = typedMemo((_ref) => {
  let {
    min: min2 = 0,
    max: max2 = 100,
    step = 1,
    forwardedRef,
    label,
    labelId,
    description,
    error: error2,
    disabled,
    value,
    onCountChange,
    ...props
  } = _ref;
  const [focus2, setFocus] = (0, import_react99.useState)(false);
  const uniqueCounterId = (0, import_react99.useId)();
  const id = props.id ? props.id : uniqueCounterId;
  const {
    errors
  } = useInputErrors(id, error2);
  (0, import_react99.useEffect)(() => {
    if (!Number.isInteger(value)) {
      onCountChange(Math.round(value));
    }
  }, [onCountChange, value]);
  const handleFocus = (event) => {
    const {
      onFocus
    } = props;
    setFocus(true);
    return onFocus && onFocus(event);
  };
  const handleBlur = (event) => {
    const {
      onBlur
    } = props;
    setFocus(false);
    return onBlur && onBlur(event);
  };
  const handleIncrease = () => {
    if (value + step > max2) {
      return;
    }
    if (value % step === 0) {
      onCountChange(value + step);
    } else {
      onCountChange(value + (step - value % step));
    }
  };
  const handleDecrease = () => {
    if (value - step < min2) {
      return;
    }
    if (value % step === 0) {
      onCountChange(value - step);
    } else {
      onCountChange(value - value % step);
    }
  };
  const handleChange = (event) => {
    const newValue = Number(event.currentTarget.value);
    if (isNaN(newValue)) {
      return;
    }
    if (!Number.isInteger(newValue)) {
      onCountChange(Math.round(newValue));
    }
    if (newValue >= min2 && newValue <= max2) {
      onCountChange(newValue);
    }
  };
  const handleKeyPress = (event) => {
    switch (event.key) {
      case "ArrowUp":
        handleIncrease();
        break;
      case "ArrowDown":
        handleDecrease();
        break;
      case "Escape":
        onCountChange(0);
        break;
      default:
        break;
    }
  };
  const renderedLabel = (0, import_react99.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react99.default.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        renderOptional: !props.required
      }, label);
    }
    if ((0, import_react99.isValidElement)(label) && label.type === FormControlLabel) {
      return (0, import_react99.cloneElement)(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning("label must be either a string or a FormControlLabel component.");
  }, [id, label, labelId, props.required]);
  const renderedDescription = (0, import_react99.useMemo)(() => {
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return import_react99.default.createElement(FormControlDescription, null, description);
    }
    if ((0, import_react99.isValidElement)(description) && description.type === FormControlDescription) {
      return description;
    }
    warning("description must be either a string or a FormControlDescription component.");
  }, [description]);
  return import_react99.default.createElement("div", null, renderedLabel, renderedDescription, import_react99.default.createElement(StyledCounterWrapper, {
    disabled,
    error: errors,
    focus: focus2
  }, import_react99.default.createElement(StyledCounterButton, {
    disabled: disabled || value <= min2,
    iconOnly: import_react99.default.createElement(RemoveCircleOutlineIcon, {
      title: "Decrease count"
    }),
    onClick: handleDecrease,
    type: "button"
  }), import_react99.default.createElement(StyledCounterInput, _extends({}, props, {
    disabled,
    error: errors,
    id,
    onBlur: handleBlur,
    onChange: handleChange,
    onFocus: handleFocus,
    onKeyDown: handleKeyPress,
    ref: forwardedRef,
    value
  })), import_react99.default.createElement(StyledCounterButton, {
    disabled: disabled || value >= max2,
    iconOnly: import_react99.default.createElement(AddCircleOutlineIcon, {
      title: "Increase count"
    }),
    onClick: handleIncrease,
    type: "button"
  })));
});
var Counter = typedMemo((0, import_react99.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react99.default.createElement(StylableCounter, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Chip/Chip.js
var import_react100 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Chip/styled.js
var StyledChip = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledChip",
  componentId: "sc-bia514-0"
})(["align-items:center;display:inline-flex;user-select:none;"]);
var StyledCloseButton = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledCloseButton",
  componentId: "sc-bia514-1"
})(["color:", ";height:auto;padding:0;width:auto;min-width:auto;"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary60;
});
StyledChip.defaultProps = {
  theme
};
StyledCloseButton.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Chip/Chip.js
var Chip = (0, import_react100.memo)((_ref) => {
  let {
    children,
    label,
    onDelete,
    ...rest
  } = _ref;
  const ariaLabel = label ? {
    "aria-label": `Remove ${label}`
  } : {};
  const renderDeleteButton = () => onDelete && import_react100.default.createElement(StyledCloseButton, _extends({}, ariaLabel, {
    iconOnly: import_react100.default.createElement(CloseIcon, {
      size: "medium",
      title: "Delete"
    }),
    onClick: onDelete,
    type: "button",
    variant: "subtle"
  }));
  return import_react100.default.createElement(StyledChip, _extends({
    margin: "xxSmall"
  }, rest, {
    backgroundColor: "secondary30",
    borderRadius: "normal",
    paddingLeft: "xSmall",
    paddingRight: "xxSmall"
  }), import_react100.default.createElement(Text, {
    margin: "none",
    marginRight: "xxSmall"
  }, label), renderDeleteButton());
});
Chip.displayName = "Chip";

// node_modules/@bigcommerce/big-design/dist/es/components/Collapse/Collapse.js
var import_react101 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Collapse/styled.js
var StyledButton3 = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-1t5o5ar-0"
})(["height:auto;line-height:inherit;margin-left:-", ";padding:", ";padding-right:", ";width:auto;&:active,&:hover:not(:active){background:none;color:", ";}span{grid-gap:", ";}svg{", " ", "}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xxSmall;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.xxSmall;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.none;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.colors.primary70;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.none;
}, withTransition(["transform"]), (_ref6) => {
  let {
    isOpen
  } = _ref6;
  return isOpen && Ae(["transform:rotate(-180deg);"]);
});
StyledButton3.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Collapse/Collapse.js
var Collapse = (_ref) => {
  let {
    children,
    title,
    onCollapseChange,
    initiallyOpen = false
  } = _ref;
  const [isOpen, setIsOpen] = (0, import_react101.useState)(initiallyOpen);
  const triggerId = (0, import_react101.useId)();
  const panelId = (0, import_react101.useId)();
  const handleTitleClick = () => {
    const nextIsOpen = !isOpen;
    setIsOpen(nextIsOpen);
    if (typeof onCollapseChange === "function") {
      onCollapseChange(nextIsOpen);
    }
  };
  return import_react101.default.createElement(import_react101.default.Fragment, null, import_react101.default.createElement(StyledButton3, {
    "aria-controls": panelId,
    "aria-expanded": isOpen,
    iconRight: import_react101.default.createElement(ExpandMoreIcon, {
      title
    }),
    id: triggerId,
    isOpen,
    marginVertical: "small",
    onClick: handleTitleClick,
    variant: "subtle"
  }, title), import_react101.default.createElement(Box, {
    "aria-labelledby": triggerId,
    display: isOpen ? "block" : "none",
    hidden: !isOpen,
    id: panelId,
    role: "region"
  }, children));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Datepicker/Datepicker.js
var import_react106 = __toESM(require_react());

// node_modules/react-datepicker/dist/es/index.js
var import_react103 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_classnames = __toESM(require_classnames());

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required2, args) {
  if (args.length < required2) {
    throw new TypeError(required2 + " argument" + (required2 > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e2(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i2(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H5(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t2(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset3, dirtyDelimiter) {
  var sign = offset3 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset3);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset3, dirtyDelimiter) {
  if (offset3 % 60 === 0) {
    var sign = offset3 > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset3) / 60, 2);
  }
  return formatTimezone(offset3, dirtyDelimiter);
}
function formatTimezone(offset3, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset3 > 0 ? "-" : "+";
  var absOffset = Math.abs(offset3);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/addMinutes/index.js
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}

// node_modules/date-fns/esm/addHours/index.js
var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

// node_modules/date-fns/esm/addWeeks/index.js
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

// node_modules/date-fns/esm/addQuarters/index.js
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/subDays/index.js
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subWeeks/index.js
function subWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addWeeks(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subQuarters/index.js
function subQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addQuarters(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subYears/index.js
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

// node_modules/date-fns/esm/getSeconds/index.js
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

// node_modules/date-fns/esm/getMinutes/index.js
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}

// node_modules/date-fns/esm/getHours/index.js
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

// node_modules/date-fns/esm/getDay/index.js
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

// node_modules/date-fns/esm/getDate/index.js
function getDate(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var dayOfMonth = date.getDate();
  return dayOfMonth;
}

// node_modules/date-fns/esm/startOfWeek/index.js
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfISOWeek/index.js
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}

// node_modules/date-fns/esm/getISOWeekYear/index.js
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/startOfISOWeekYear/index.js
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/getISOWeek/index.js
var MILLISECONDS_IN_WEEK3 = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK3) + 1;
}

// node_modules/date-fns/esm/getMonth/index.js
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}

// node_modules/date-fns/esm/getQuarter/index.js
function getQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var quarter = Math.floor(date.getMonth() / 3) + 1;
  return quarter;
}

// node_modules/date-fns/esm/getYear/index.js
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}

// node_modules/date-fns/esm/getTime/index.js
function getTime(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  return timestamp;
}

// node_modules/date-fns/esm/setSeconds/index.js
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

// node_modules/date-fns/esm/setMinutes/index.js
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

// node_modules/date-fns/esm/setHours/index.js
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = /* @__PURE__ */ new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

// node_modules/date-fns/esm/setMonth/index.js
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = /* @__PURE__ */ new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

// node_modules/date-fns/esm/setQuarter/index.js
function setQuarter(dirtyDate, dirtyQuarter) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var quarter = toInteger(dirtyQuarter);
  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
  var diff = quarter - oldQuarter;
  return setMonth(date, date.getMonth() + diff * 3);
}

// node_modules/date-fns/esm/setYear/index.js
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}

// node_modules/date-fns/esm/min/index.js
function min(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/max/index.js
function max(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY2);
}

// node_modules/date-fns/esm/differenceInCalendarMonths/index.js
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}

// node_modules/date-fns/esm/startOfMonth/index.js
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfQuarter/index.js
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfYear/index.js
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = /* @__PURE__ */ new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/endOfDay/index.js
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/endOfMonth/index.js
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/endOfYear/index.js
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/isEqual/index.js
function isEqual2(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

// node_modules/date-fns/esm/isSameDay/index.js
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/date-fns/esm/isSameMonth/index.js
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

// node_modules/date-fns/esm/isSameYear/index.js
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

// node_modules/date-fns/esm/isSameQuarter/index.js
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

// node_modules/date-fns/esm/isWithinInterval/index.js
function isWithinInterval(dirtyDate, interval) {
  requiredArgs(2, arguments);
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime();
  if (!(startTime <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  return time >= startTime && time <= endTime;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i3 = 0, arr2 = new Array(len); i3 < len; i3++)
    arr2[i3] = arr[i3];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}

// node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it2) {
    if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it2)
        o2 = it2;
      var i3 = 0;
      var F = function F2() {
      };
      return {
        s: F,
        n: function n2() {
          if (i3 >= o2.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o2[i3++]
          };
        },
        e: function e4(_e2) {
          throw _e2;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s3() {
      it2 = it2.call(o2);
    },
    n: function n2() {
      var step = it2.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e4(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it2["return"] != null)
          it2["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      ;
      target[property] = object[property];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i3 = 0; i3 < props.length; i3++) {
    var descriptor = props[i3];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options) {
      return this.validateValue(utcDate, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate, flags, options) {
      return this.setValue(utcDate, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run(dateString, token, match3, options) {
      var result = this.parse(dateString, token, match3, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match3.era(dateString, {
            width: "abbreviated"
          }) || match3.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match3.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match3.era(dateString, {
            width: "wide"
          }) || match3.era(dateString, {
            width: "abbreviated"
          }) || match3.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n2 + "}"), dateString);
  }
}
function parseNDigitsSigned(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n2 + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse4(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse4(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match3.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match3.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match3.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match3.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match3.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match3.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match3.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match3.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match3.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match3.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match3.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match3.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match3.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match3.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match3.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match3.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match3.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match3.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match3.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match3.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match3.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match3.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match3.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match3.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match3.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match3.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match3.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match3.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match3.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match3.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match3.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match3.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match3.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match3.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match3.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match3.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match3.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match3.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match3.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse4(dateString, token, match3) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match3.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse4(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse4(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse4(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse4(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse4(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/parse/index.js
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters_default) {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString2(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: /* @__PURE__ */ new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset3;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset3 = parseTimezone(dateStrings.timezone);
    if (isNaN(offset3)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset3);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = /* @__PURE__ */ new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/react-onclickoutside/dist/react-onclickoutside.es.js
var import_react102 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o2, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o3, p2) {
    o3.__proto__ = p2;
    return o3;
  };
  return _setPrototypeOf2(o2, p);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key = sourceKeys[i3];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _assertThisInitialized2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function isNodeFound(current, componentNode, ignoreClass) {
  if (current === componentNode) {
    return true;
  }
  if (current.correspondingElement) {
    return current.correspondingElement.classList.contains(ignoreClass);
  }
  return current.classList.contains(ignoreClass);
}
function findHighest(current, componentNode, ignoreClass) {
  if (current === componentNode) {
    return true;
  }
  while (current.parentNode || current.host) {
    if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
      return true;
    }
    current = current.parentNode || current.host;
  }
  return current;
}
function clickedScrollbar(evt) {
  return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
}
var testPassiveEventSupport = function testPassiveEventSupport2() {
  if (typeof window === "undefined" || typeof window.addEventListener !== "function") {
    return;
  }
  var passive = false;
  var options = Object.defineProperty({}, "passive", {
    get: function get2() {
      passive = true;
    }
  });
  var noop3 = function noop4() {
  };
  window.addEventListener("testPassiveEventSupport", noop3, options);
  window.removeEventListener("testPassiveEventSupport", noop3, options);
  return passive;
};
function autoInc(seed) {
  if (seed === void 0) {
    seed = 0;
  }
  return function() {
    return ++seed;
  };
}
var uid = autoInc();
var passiveEventSupport;
var handlersMap = {};
var enabledInstances = {};
var touchEvents = ["touchstart", "touchmove"];
var IGNORE_CLASS_NAME = "ignore-react-onclickoutside";
function getEventHandlerOptions(instance, eventName) {
  var handlerOptions = {};
  var isTouchEvent = touchEvents.indexOf(eventName) !== -1;
  if (isTouchEvent && passiveEventSupport) {
    handlerOptions.passive = !instance.props.preventDefault;
  }
  return handlerOptions;
}
function onClickOutsideHOC(WrappedComponent, config2) {
  var _class, _temp;
  var componentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
  return _temp = _class = function(_Component) {
    _inheritsLoose2(onClickOutside, _Component);
    function onClickOutside(props) {
      var _this;
      _this = _Component.call(this, props) || this;
      _this.__outsideClickHandler = function(event) {
        if (typeof _this.__clickOutsideHandlerProp === "function") {
          _this.__clickOutsideHandlerProp(event);
          return;
        }
        var instance = _this.getInstance();
        if (typeof instance.props.handleClickOutside === "function") {
          instance.props.handleClickOutside(event);
          return;
        }
        if (typeof instance.handleClickOutside === "function") {
          instance.handleClickOutside(event);
          return;
        }
        throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
      };
      _this.__getComponentNode = function() {
        var instance = _this.getInstance();
        if (config2 && typeof config2.setClickOutsideRef === "function") {
          return config2.setClickOutsideRef()(instance);
        }
        if (typeof instance.setClickOutsideRef === "function") {
          return instance.setClickOutsideRef();
        }
        return (0, import_react_dom2.findDOMNode)(instance);
      };
      _this.enableOnClickOutside = function() {
        if (typeof document === "undefined" || enabledInstances[_this._uid]) {
          return;
        }
        if (typeof passiveEventSupport === "undefined") {
          passiveEventSupport = testPassiveEventSupport();
        }
        enabledInstances[_this._uid] = true;
        var events = _this.props.eventTypes;
        if (!events.forEach) {
          events = [events];
        }
        handlersMap[_this._uid] = function(event) {
          if (_this.componentNode === null)
            return;
          if (_this.props.preventDefault) {
            event.preventDefault();
          }
          if (_this.props.stopPropagation) {
            event.stopPropagation();
          }
          if (_this.props.excludeScrollbar && clickedScrollbar(event))
            return;
          var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;
          if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
            return;
          }
          _this.__outsideClickHandler(event);
        };
        events.forEach(function(eventName) {
          document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized2(_this), eventName));
        });
      };
      _this.disableOnClickOutside = function() {
        delete enabledInstances[_this._uid];
        var fn = handlersMap[_this._uid];
        if (fn && typeof document !== "undefined") {
          var events = _this.props.eventTypes;
          if (!events.forEach) {
            events = [events];
          }
          events.forEach(function(eventName) {
            return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized2(_this), eventName));
          });
          delete handlersMap[_this._uid];
        }
      };
      _this.getRef = function(ref2) {
        return _this.instanceRef = ref2;
      };
      _this._uid = uid();
      return _this;
    }
    var _proto = onClickOutside.prototype;
    _proto.getInstance = function getInstance() {
      if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
        return this;
      }
      var ref2 = this.instanceRef;
      return ref2.getInstance ? ref2.getInstance() : ref2;
    };
    _proto.componentDidMount = function componentDidMount() {
      if (typeof document === "undefined" || !document.createElement) {
        return;
      }
      var instance = this.getInstance();
      if (config2 && typeof config2.handleClickOutside === "function") {
        this.__clickOutsideHandlerProp = config2.handleClickOutside(instance);
        if (typeof this.__clickOutsideHandlerProp !== "function") {
          throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
        }
      }
      this.componentNode = this.__getComponentNode();
      if (this.props.disableOnClickOutside)
        return;
      this.enableOnClickOutside();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      this.componentNode = this.__getComponentNode();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.disableOnClickOutside();
    };
    _proto.render = function render() {
      var _this$props = this.props;
      _this$props.excludeScrollbar;
      var props = _objectWithoutPropertiesLoose2(_this$props, ["excludeScrollbar"]);
      if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
        props.ref = this.getRef;
      } else {
        props.wrappedRef = this.getRef;
      }
      props.disableOnClickOutside = this.disableOnClickOutside;
      props.enableOnClickOutside = this.enableOnClickOutside;
      return (0, import_react102.createElement)(WrappedComponent, props);
    };
    return onClickOutside;
  }(import_react102.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
    eventTypes: ["mousedown", "touchstart"],
    excludeScrollbar: config2 && config2.excludeScrollbar || false,
    outsideClickIgnoreClass: IGNORE_CLASS_NAME,
    preventDefault: false,
    stopPropagation: false
  }, _class.getClass = function() {
    return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
  }, _temp;
}
var react_onclickoutside_es_default = onClickOutsideHOC;

// node_modules/react-datepicker/dist/es/index.js
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/date-fns/esm/set/index.js
function set(dirtyDate, values2) {
  requiredArgs(2, arguments);
  if (_typeof(values2) !== "object" || values2 === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (values2.year != null) {
    date.setFullYear(values2.year);
  }
  if (values2.month != null) {
    date = setMonth(date, values2.month);
  }
  if (values2.date != null) {
    date.setDate(toInteger(values2.date));
  }
  if (values2.hours != null) {
    date.setHours(toInteger(values2.hours));
  }
  if (values2.minutes != null) {
    date.setMinutes(toInteger(values2.minutes));
  }
  if (values2.seconds != null) {
    date.setSeconds(toInteger(values2.seconds));
  }
  if (values2.milliseconds != null) {
    date.setMilliseconds(toInteger(values2.milliseconds));
  }
  return date;
}

// node_modules/react-datepicker/dist/es/index.js
function le(e4, t4) {
  var r2 = Object.keys(e4);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e4);
    t4 && (n2 = n2.filter(function(t5) {
      return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function de(e4) {
  for (var t4 = 1; t4 < arguments.length; t4++) {
    var r2 = null != arguments[t4] ? arguments[t4] : {};
    t4 % 2 ? le(Object(r2), true).forEach(function(t5) {
      ve(e4, t5, r2[t5]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(r2)) : le(Object(r2)).forEach(function(t5) {
      Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(r2, t5));
    });
  }
  return e4;
}
function ue(e4) {
  return ue = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
    return typeof e5;
  } : function(e5) {
    return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
  }, ue(e4);
}
function he(e4, t4) {
  if (!(e4 instanceof t4))
    throw new TypeError("Cannot call a class as a function");
}
function me(e4, t4) {
  for (var r2 = 0; r2 < t4.length; r2++) {
    var n2 = t4[r2];
    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e4, _e(n2.key), n2);
  }
}
function fe(e4, t4, r2) {
  return t4 && me(e4.prototype, t4), r2 && me(e4, r2), Object.defineProperty(e4, "prototype", { writable: false }), e4;
}
function ve(e4, t4, r2) {
  return (t4 = _e(t4)) in e4 ? Object.defineProperty(e4, t4, { value: r2, enumerable: true, configurable: true, writable: true }) : e4[t4] = r2, e4;
}
function ye() {
  return ye = Object.assign ? Object.assign.bind() : function(e4) {
    for (var t4 = 1; t4 < arguments.length; t4++) {
      var r2 = arguments[t4];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (e4[n2] = r2[n2]);
    }
    return e4;
  }, ye.apply(this, arguments);
}
function De(e4, t4) {
  if ("function" != typeof t4 && null !== t4)
    throw new TypeError("Super expression must either be null or a function");
  e4.prototype = Object.create(t4 && t4.prototype, { constructor: { value: e4, writable: true, configurable: true } }), Object.defineProperty(e4, "prototype", { writable: false }), t4 && we(e4, t4);
}
function ge(e4) {
  return ge = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e5) {
    return e5.__proto__ || Object.getPrototypeOf(e5);
  }, ge(e4);
}
function we(e4, t4) {
  return we = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e5, t5) {
    return e5.__proto__ = t5, e5;
  }, we(e4, t4);
}
function ke(e4) {
  if (void 0 === e4)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e4;
}
function be(e4) {
  var t4 = function() {
    if ("undefined" == typeof Reflect || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if ("function" == typeof Proxy)
      return true;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), true;
    } catch (e5) {
      return false;
    }
  }();
  return function() {
    var r2, n2 = ge(e4);
    if (t4) {
      var o2 = ge(this).constructor;
      r2 = Reflect.construct(n2, arguments, o2);
    } else
      r2 = n2.apply(this, arguments);
    return function(e5, t5) {
      if (t5 && ("object" == typeof t5 || "function" == typeof t5))
        return t5;
      if (void 0 !== t5)
        throw new TypeError("Derived constructors may only return object or undefined");
      return ke(e5);
    }(this, r2);
  };
}
function Se(e4) {
  return function(e5) {
    if (Array.isArray(e5))
      return Ce(e5);
  }(e4) || function(e5) {
    if ("undefined" != typeof Symbol && null != e5[Symbol.iterator] || null != e5["@@iterator"])
      return Array.from(e5);
  }(e4) || function(e5, t4) {
    if (!e5)
      return;
    if ("string" == typeof e5)
      return Ce(e5, t4);
    var r2 = Object.prototype.toString.call(e5).slice(8, -1);
    "Object" === r2 && e5.constructor && (r2 = e5.constructor.name);
    if ("Map" === r2 || "Set" === r2)
      return Array.from(e5);
    if ("Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2))
      return Ce(e5, t4);
  }(e4) || function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }();
}
function Ce(e4, t4) {
  (null == t4 || t4 > e4.length) && (t4 = e4.length);
  for (var r2 = 0, n2 = new Array(t4); r2 < t4; r2++)
    n2[r2] = e4[r2];
  return n2;
}
function _e(e4) {
  var t4 = function(e5, t5) {
    if ("object" != typeof e5 || null === e5)
      return e5;
    var r2 = e5[Symbol.toPrimitive];
    if (void 0 !== r2) {
      var n2 = r2.call(e5, t5 || "default");
      if ("object" != typeof n2)
        return n2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === t5 ? String : Number)(e5);
  }(e4, "string");
  return "symbol" == typeof t4 ? t4 : String(t4);
}
var Me = function(e4, t4) {
  switch (e4) {
    case "P":
      return t4.date({ width: "short" });
    case "PP":
      return t4.date({ width: "medium" });
    case "PPP":
      return t4.date({ width: "long" });
    default:
      return t4.date({ width: "full" });
  }
};
var Ee = function(e4, t4) {
  switch (e4) {
    case "p":
      return t4.time({ width: "short" });
    case "pp":
      return t4.time({ width: "medium" });
    case "ppp":
      return t4.time({ width: "long" });
    default:
      return t4.time({ width: "full" });
  }
};
var Pe = { p: Ee, P: function(e4, t4) {
  var r2, n2 = e4.match(/(P+)(p+)?/) || [], o2 = n2[1], a3 = n2[2];
  if (!a3)
    return Me(e4, t4);
  switch (o2) {
    case "P":
      r2 = t4.dateTime({ width: "short" });
      break;
    case "PP":
      r2 = t4.dateTime({ width: "medium" });
      break;
    case "PPP":
      r2 = t4.dateTime({ width: "long" });
      break;
    default:
      r2 = t4.dateTime({ width: "full" });
  }
  return r2.replace("{{date}}", Me(o2, t4)).replace("{{time}}", Ee(a3, t4));
} };
var Ne = 12;
var xe = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
function Ye(e4) {
  var t4 = e4 ? "string" == typeof e4 || e4 instanceof String ? parseISO(e4) : toDate(e4) : /* @__PURE__ */ new Date();
  return Ie(t4) ? t4 : null;
}
function Ie(e4, t4) {
  return t4 = t4 || /* @__PURE__ */ new Date("1/1/1000"), isValid(e4) && !isBefore(e4, t4);
}
function Oe(e4, t4, r2) {
  if ("en" === r2)
    return format(e4, t4, { awareOfUnicodeTokens: true });
  var n2 = Ge(r2);
  return r2 && !n2 && console.warn('A locale object was not found for the provided string ["'.concat(r2, '"].')), !n2 && $e2() && Ge($e2()) && (n2 = Ge($e2())), format(e4, t4, { locale: n2 || null, awareOfUnicodeTokens: true });
}
function Te(e4, t4) {
  var r2 = t4.dateFormat, n2 = t4.locale;
  return e4 && Oe(e4, Array.isArray(r2) ? r2[0] : r2, n2) || "";
}
function Re(e4, t4) {
  var r2 = t4.hour, n2 = void 0 === r2 ? 0 : r2, o2 = t4.minute, a3 = void 0 === o2 ? 0 : o2, s3 = t4.second;
  return setHours(setMinutes(setSeconds(e4, void 0 === s3 ? 0 : s3), a3), n2);
}
function Le(e4, t4, r2) {
  var n2 = Ge(t4 || $e2());
  return startOfWeek(e4, { locale: n2, weekStartsOn: r2 });
}
function Fe(e4) {
  return startOfMonth(e4);
}
function Ae2(e4) {
  return startOfYear(e4);
}
function Ke(e4) {
  return startOfQuarter(e4);
}
function Be() {
  return startOfDay(Ye());
}
function Qe(e4, t4) {
  return e4 && t4 ? isSameYear(e4, t4) : !e4 && !t4;
}
function We2(e4, t4) {
  return e4 && t4 ? isSameMonth(e4, t4) : !e4 && !t4;
}
function je(e4, t4) {
  return e4 && t4 ? isSameQuarter(e4, t4) : !e4 && !t4;
}
function He(e4, t4) {
  return e4 && t4 ? isSameDay(e4, t4) : !e4 && !t4;
}
function Ve(e4, t4) {
  return e4 && t4 ? isEqual2(e4, t4) : !e4 && !t4;
}
function qe(e4, t4, r2) {
  var n2, o2 = startOfDay(t4), a3 = endOfDay(r2);
  try {
    n2 = isWithinInterval(e4, { start: o2, end: a3 });
  } catch (e5) {
    n2 = false;
  }
  return n2;
}
function Ue(e4, t4) {
  var r2 = "undefined" != typeof window ? window : globalThis;
  r2.__localeData__ || (r2.__localeData__ = {}), r2.__localeData__[e4] = t4;
}
function $e2() {
  return ("undefined" != typeof window ? window : globalThis).__localeId__;
}
function Ge(e4) {
  if ("string" == typeof e4) {
    var t4 = "undefined" != typeof window ? window : globalThis;
    return t4.__localeData__ ? t4.__localeData__[e4] : null;
  }
  return e4;
}
function Je(e4, t4) {
  return Oe(setMonth(Ye(), e4), "LLLL", t4);
}
function Xe(e4, t4) {
  return Oe(setMonth(Ye(), e4), "LLL", t4);
}
function Ze(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.maxDate, o2 = t4.excludeDates, a3 = t4.excludeDateIntervals, s3 = t4.includeDates, i3 = t4.includeDateIntervals, p = t4.filterDate;
  return it(e4, { minDate: r2, maxDate: n2 }) || o2 && o2.some(function(t5) {
    return He(e4, t5);
  }) || a3 && a3.some(function(t5) {
    var r3 = t5.start, n3 = t5.end;
    return isWithinInterval(e4, { start: r3, end: n3 });
  }) || s3 && !s3.some(function(t5) {
    return He(e4, t5);
  }) || i3 && !i3.some(function(t5) {
    var r3 = t5.start, n3 = t5.end;
    return isWithinInterval(e4, { start: r3, end: n3 });
  }) || p && !p(Ye(e4)) || false;
}
function et(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.excludeDates, n2 = t4.excludeDateIntervals;
  return n2 && n2.length > 0 ? n2.some(function(t5) {
    var r3 = t5.start, n3 = t5.end;
    return isWithinInterval(e4, { start: r3, end: n3 });
  }) : r2 && r2.some(function(t5) {
    return He(e4, t5);
  }) || false;
}
function tt(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.maxDate, o2 = t4.excludeDates, a3 = t4.includeDates, s3 = t4.filterDate;
  return it(e4, { minDate: startOfMonth(r2), maxDate: endOfMonth(n2) }) || o2 && o2.some(function(t5) {
    return We2(e4, t5);
  }) || a3 && !a3.some(function(t5) {
    return We2(e4, t5);
  }) || s3 && !s3(Ye(e4)) || false;
}
function rt(e4, t4, r2, n2) {
  var o2 = getYear(e4), a3 = getMonth(e4), s3 = getYear(t4), i3 = getMonth(t4), p = getYear(n2);
  return o2 === s3 && o2 === p ? a3 <= r2 && r2 <= i3 : o2 < s3 ? p === o2 && a3 <= r2 || p === s3 && i3 >= r2 || p < s3 && p > o2 : void 0;
}
function nt(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.maxDate, o2 = t4.excludeDates, a3 = t4.includeDates, s3 = t4.filterDate;
  return it(e4, { minDate: r2, maxDate: n2 }) || o2 && o2.some(function(t5) {
    return je(e4, t5);
  }) || a3 && !a3.some(function(t5) {
    return je(e4, t5);
  }) || s3 && !s3(Ye(e4)) || false;
}
function ot(e4, t4, r2) {
  if (!isValid(t4) || !isValid(r2))
    return false;
  var n2 = getYear(t4), a3 = getYear(r2);
  return n2 <= e4 && a3 >= e4;
}
function at(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.maxDate, o2 = t4.excludeDates, a3 = t4.includeDates, s3 = t4.filterDate, i3 = new Date(e4, 0, 1);
  return it(i3, { minDate: startOfYear(r2), maxDate: endOfYear(n2) }) || o2 && o2.some(function(e5) {
    return Qe(i3, e5);
  }) || a3 && !a3.some(function(e5) {
    return Qe(i3, e5);
  }) || s3 && !s3(Ye(i3)) || false;
}
function st(e4, t4, r2, n2) {
  var o2 = getYear(e4), a3 = getQuarter(e4), s3 = getYear(t4), i3 = getQuarter(t4), p = getYear(n2);
  return o2 === s3 && o2 === p ? a3 <= r2 && r2 <= i3 : o2 < s3 ? p === o2 && a3 <= r2 || p === s3 && i3 >= r2 || p < s3 && p > o2 : void 0;
}
function it(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.maxDate;
  return r2 && differenceInCalendarDays(e4, r2) < 0 || n2 && differenceInCalendarDays(e4, n2) > 0;
}
function pt(e4, t4) {
  return t4.some(function(t5) {
    return getHours(t5) === getHours(e4) && getMinutes(t5) === getMinutes(e4);
  });
}
function ct(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.excludeTimes, n2 = t4.includeTimes, o2 = t4.filterTime;
  return r2 && pt(e4, r2) || n2 && !pt(e4, n2) || o2 && !o2(e4) || false;
}
function lt(e4, t4) {
  var r2 = t4.minTime, n2 = t4.maxTime;
  if (!r2 || !n2)
    throw new Error("Both minTime and maxTime props required");
  var o2, a3 = Ye(), s3 = setHours(setMinutes(a3, getMinutes(e4)), getHours(e4)), i3 = setHours(setMinutes(a3, getMinutes(r2)), getHours(r2)), p = setHours(setMinutes(a3, getMinutes(n2)), getHours(n2));
  try {
    o2 = !isWithinInterval(s3, { start: i3, end: p });
  } catch (e5) {
    o2 = false;
  }
  return o2;
}
function dt(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.includeDates, o2 = subMonths(e4, 1);
  return r2 && differenceInCalendarMonths(r2, o2) > 0 || n2 && n2.every(function(e5) {
    return differenceInCalendarMonths(e5, o2) > 0;
  }) || false;
}
function ut(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.maxDate, n2 = t4.includeDates, o2 = addMonths(e4, 1);
  return r2 && differenceInCalendarMonths(o2, r2) > 0 || n2 && n2.every(function(e5) {
    return differenceInCalendarMonths(o2, e5) > 0;
  }) || false;
}
function ht(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.minDate, n2 = t4.includeDates, o2 = subYears(e4, 1);
  return r2 && differenceInCalendarYears(r2, o2) > 0 || n2 && n2.every(function(e5) {
    return differenceInCalendarYears(e5, o2) > 0;
  }) || false;
}
function mt(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = t4.maxDate, n2 = t4.includeDates, o2 = addYears(e4, 1);
  return r2 && differenceInCalendarYears(o2, r2) > 0 || n2 && n2.every(function(e5) {
    return differenceInCalendarYears(o2, e5) > 0;
  }) || false;
}
function ft(e4) {
  var t4 = e4.minDate, r2 = e4.includeDates;
  if (r2 && t4) {
    var n2 = r2.filter(function(e5) {
      return differenceInCalendarDays(e5, t4) >= 0;
    });
    return min(n2);
  }
  return r2 ? min(r2) : t4;
}
function vt(e4) {
  var t4 = e4.maxDate, r2 = e4.includeDates;
  if (r2 && t4) {
    var n2 = r2.filter(function(e5) {
      return differenceInCalendarDays(e5, t4) <= 0;
    });
    return max(n2);
  }
  return r2 ? max(r2) : t4;
}
function yt() {
  for (var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--highlighted", r2 = /* @__PURE__ */ new Map(), o2 = 0, a3 = e4.length; o2 < a3; o2++) {
    var s3 = e4[o2];
    if (isDate(s3)) {
      var i3 = Oe(s3, "MM.dd.yyyy"), p = r2.get(i3) || [];
      p.includes(t4) || (p.push(t4), r2.set(i3, p));
    } else if ("object" === ue(s3)) {
      var c2 = Object.keys(s3), l2 = c2[0], d3 = s3[c2[0]];
      if ("string" == typeof l2 && d3.constructor === Array)
        for (var u2 = 0, h3 = d3.length; u2 < h3; u2++) {
          var m3 = Oe(d3[u2], "MM.dd.yyyy"), f = r2.get(m3) || [];
          f.includes(l2) || (f.push(l2), r2.set(m3, f));
        }
    }
  }
  return r2;
}
function Dt(e4, t4, r2, n2, o2) {
  for (var a3 = o2.length, p = [], c2 = 0; c2 < a3; c2++) {
    var l2 = addMinutes(addHours(e4, getHours(o2[c2])), getMinutes(o2[c2])), d3 = addMinutes(e4, (r2 + 1) * n2);
    isAfter(l2, t4) && isBefore(l2, d3) && p.push(o2[c2]);
  }
  return p;
}
function gt(e4) {
  return e4 < 10 ? "0".concat(e4) : "".concat(e4);
}
function wt(e4) {
  var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ne, r2 = Math.ceil(getYear(e4) / t4) * t4;
  return { startPeriod: r2 - (t4 - 1), endPeriod: r2 };
}
function kt(e4, t4, r2, n2) {
  for (var o2 = [], a3 = 0; a3 < 2 * t4 + 1; a3++) {
    var s3 = e4 + t4 - a3, i3 = true;
    r2 && (i3 = getYear(r2) <= s3), n2 && i3 && (i3 = getYear(n2) >= s3), i3 && o2.push(s3);
  }
  return o2;
}
var bt = react_onclickoutside_es_default(function(n2) {
  De(a3, import_react103.default.Component);
  var o2 = be(a3);
  function a3(r2) {
    var n3;
    he(this, a3), ve(ke(n3 = o2.call(this, r2)), "renderOptions", function() {
      var t4 = n3.props.year, r3 = n3.state.yearsList.map(function(r4) {
        return import_react103.default.createElement("div", { className: t4 === r4 ? "react-datepicker__year-option react-datepicker__year-option--selected_year" : "react-datepicker__year-option", key: r4, onClick: n3.onChange.bind(ke(n3), r4), "aria-selected": t4 === r4 ? "true" : void 0 }, t4 === r4 ? import_react103.default.createElement("span", { className: "react-datepicker__year-option--selected" }, "✓") : "", r4);
      }), o3 = n3.props.minDate ? getYear(n3.props.minDate) : null, a4 = n3.props.maxDate ? getYear(n3.props.maxDate) : null;
      return a4 && n3.state.yearsList.find(function(e4) {
        return e4 === a4;
      }) || r3.unshift(import_react103.default.createElement("div", { className: "react-datepicker__year-option", key: "upcoming", onClick: n3.incrementYears }, import_react103.default.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming" }))), o3 && n3.state.yearsList.find(function(e4) {
        return e4 === o3;
      }) || r3.push(import_react103.default.createElement("div", { className: "react-datepicker__year-option", key: "previous", onClick: n3.decrementYears }, import_react103.default.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous" }))), r3;
    }), ve(ke(n3), "onChange", function(e4) {
      n3.props.onChange(e4);
    }), ve(ke(n3), "handleClickOutside", function() {
      n3.props.onCancel();
    }), ve(ke(n3), "shiftYears", function(e4) {
      var t4 = n3.state.yearsList.map(function(t5) {
        return t5 + e4;
      });
      n3.setState({ yearsList: t4 });
    }), ve(ke(n3), "incrementYears", function() {
      return n3.shiftYears(1);
    }), ve(ke(n3), "decrementYears", function() {
      return n3.shiftYears(-1);
    });
    var s3 = r2.yearDropdownItemNumber, i3 = r2.scrollableYearDropdown, p = s3 || (i3 ? 10 : 5);
    return n3.state = { yearsList: kt(n3.props.year, p, n3.props.minDate, n3.props.maxDate) }, n3.dropdownRef = (0, import_react103.createRef)(), n3;
  }
  return fe(a3, [{ key: "componentDidMount", value: function() {
    var e4 = this.dropdownRef.current;
    if (e4) {
      var t4 = e4.children ? Array.from(e4.children) : null, r2 = t4 ? t4.find(function(e5) {
        return e5.ariaSelected;
      }) : null;
      e4.scrollTop = r2 ? r2.offsetTop + (r2.clientHeight - e4.clientHeight) / 2 : (e4.scrollHeight - e4.clientHeight) / 2;
    }
  } }, { key: "render", value: function() {
    var t4 = (0, import_classnames.default)({ "react-datepicker__year-dropdown": true, "react-datepicker__year-dropdown--scrollable": this.props.scrollableYearDropdown });
    return import_react103.default.createElement("div", { className: t4, ref: this.dropdownRef }, this.renderOptions());
  } }]), a3;
}());
var St = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), s3 = 0; s3 < o2; s3++)
      a3[s3] = arguments[s3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "state", { dropdownVisible: false }), ve(ke(t5), "renderSelectOptions", function() {
      for (var r3 = t5.props.minDate ? getYear(t5.props.minDate) : 1900, n3 = t5.props.maxDate ? getYear(t5.props.maxDate) : 2100, o3 = [], a4 = r3; a4 <= n3; a4++)
        o3.push(import_react103.default.createElement("option", { key: a4, value: a4 }, a4));
      return o3;
    }), ve(ke(t5), "onSelectChange", function(e4) {
      t5.onChange(e4.target.value);
    }), ve(ke(t5), "renderSelectMode", function() {
      return import_react103.default.createElement("select", { value: t5.props.year, className: "react-datepicker__year-select", onChange: t5.onSelectChange }, t5.renderSelectOptions());
    }), ve(ke(t5), "renderReadView", function(r3) {
      return import_react103.default.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__year-read-view", onClick: function(e4) {
        return t5.toggleDropdown(e4);
      } }, import_react103.default.createElement("span", { className: "react-datepicker__year-read-view--down-arrow" }), import_react103.default.createElement("span", { className: "react-datepicker__year-read-view--selected-year" }, t5.props.year));
    }), ve(ke(t5), "renderDropdown", function() {
      return import_react103.default.createElement(bt, { key: "dropdown", year: t5.props.year, onChange: t5.onChange, onCancel: t5.toggleDropdown, minDate: t5.props.minDate, maxDate: t5.props.maxDate, scrollableYearDropdown: t5.props.scrollableYearDropdown, yearDropdownItemNumber: t5.props.yearDropdownItemNumber });
    }), ve(ke(t5), "renderScrollMode", function() {
      var e4 = t5.state.dropdownVisible, r3 = [t5.renderReadView(!e4)];
      return e4 && r3.unshift(t5.renderDropdown()), r3;
    }), ve(ke(t5), "onChange", function(e4) {
      t5.toggleDropdown(), e4 !== t5.props.year && t5.props.onChange(e4);
    }), ve(ke(t5), "toggleDropdown", function(e4) {
      t5.setState({ dropdownVisible: !t5.state.dropdownVisible }, function() {
        t5.props.adjustDateOnChange && t5.handleYearChange(t5.props.date, e4);
      });
    }), ve(ke(t5), "handleYearChange", function(e4, r3) {
      t5.onSelect(e4, r3), t5.setOpen();
    }), ve(ke(t5), "onSelect", function(e4, r3) {
      t5.props.onSelect && t5.props.onSelect(e4, r3);
    }), ve(ke(t5), "setOpen", function() {
      t5.props.setOpen && t5.props.setOpen(true);
    }), t5;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t5;
    switch (this.props.dropdownMode) {
      case "scroll":
        t5 = this.renderScrollMode();
        break;
      case "select":
        t5 = this.renderSelectMode();
    }
    return import_react103.default.createElement("div", { className: "react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode) }, t5);
  } }]), n2;
}();
var Ct = react_onclickoutside_es_default(function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), s3 = 0; s3 < o2; s3++)
      a3[s3] = arguments[s3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "isSelectedMonth", function(e4) {
      return t5.props.month === e4;
    }), ve(ke(t5), "renderOptions", function() {
      return t5.props.monthNames.map(function(r3, n3) {
        return import_react103.default.createElement("div", { className: t5.isSelectedMonth(n3) ? "react-datepicker__month-option react-datepicker__month-option--selected_month" : "react-datepicker__month-option", key: r3, onClick: t5.onChange.bind(ke(t5), n3), "aria-selected": t5.isSelectedMonth(n3) ? "true" : void 0 }, t5.isSelectedMonth(n3) ? import_react103.default.createElement("span", { className: "react-datepicker__month-option--selected" }, "✓") : "", r3);
      });
    }), ve(ke(t5), "onChange", function(e4) {
      return t5.props.onChange(e4);
    }), ve(ke(t5), "handleClickOutside", function() {
      return t5.props.onCancel();
    }), t5;
  }
  return fe(n2, [{ key: "render", value: function() {
    return import_react103.default.createElement("div", { className: "react-datepicker__month-dropdown" }, this.renderOptions());
  } }]), n2;
}());
var _t = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), s3 = 0; s3 < o2; s3++)
      a3[s3] = arguments[s3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "state", { dropdownVisible: false }), ve(ke(t5), "renderSelectOptions", function(t6) {
      return t6.map(function(t7, r3) {
        return import_react103.default.createElement("option", { key: r3, value: r3 }, t7);
      });
    }), ve(ke(t5), "renderSelectMode", function(r3) {
      return import_react103.default.createElement("select", { value: t5.props.month, className: "react-datepicker__month-select", onChange: function(e4) {
        return t5.onChange(e4.target.value);
      } }, t5.renderSelectOptions(r3));
    }), ve(ke(t5), "renderReadView", function(r3, n3) {
      return import_react103.default.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__month-read-view", onClick: t5.toggleDropdown }, import_react103.default.createElement("span", { className: "react-datepicker__month-read-view--down-arrow" }), import_react103.default.createElement("span", { className: "react-datepicker__month-read-view--selected-month" }, n3[t5.props.month]));
    }), ve(ke(t5), "renderDropdown", function(r3) {
      return import_react103.default.createElement(Ct, { key: "dropdown", month: t5.props.month, monthNames: r3, onChange: t5.onChange, onCancel: t5.toggleDropdown });
    }), ve(ke(t5), "renderScrollMode", function(e4) {
      var r3 = t5.state.dropdownVisible, n3 = [t5.renderReadView(!r3, e4)];
      return r3 && n3.unshift(t5.renderDropdown(e4)), n3;
    }), ve(ke(t5), "onChange", function(e4) {
      t5.toggleDropdown(), e4 !== t5.props.month && t5.props.onChange(e4);
    }), ve(ke(t5), "toggleDropdown", function() {
      return t5.setState({ dropdownVisible: !t5.state.dropdownVisible });
    }), t5;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t5, r3 = this, n3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function(e4) {
      return Xe(e4, r3.props.locale);
    } : function(e4) {
      return Je(e4, r3.props.locale);
    });
    switch (this.props.dropdownMode) {
      case "scroll":
        t5 = this.renderScrollMode(n3);
        break;
      case "select":
        t5 = this.renderSelectMode(n3);
    }
    return import_react103.default.createElement("div", { className: "react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode) }, t5);
  } }]), n2;
}();
function Mt(e4, t4) {
  for (var r2 = [], n2 = Fe(e4), o2 = Fe(t4); !isAfter(n2, o2); )
    r2.push(Ye(n2)), n2 = addMonths(n2, 1);
  return r2;
}
var Et;
var Pt = react_onclickoutside_es_default(function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2(t5) {
    var r2;
    return he(this, o2), ve(ke(r2 = n2.call(this, t5)), "renderOptions", function() {
      return r2.state.monthYearsList.map(function(t6) {
        var n3 = getTime(t6), o3 = Qe(r2.props.date, t6) && We2(r2.props.date, t6);
        return import_react103.default.createElement("div", { className: o3 ? "react-datepicker__month-year-option--selected_month-year" : "react-datepicker__month-year-option", key: n3, onClick: r2.onChange.bind(ke(r2), n3), "aria-selected": o3 ? "true" : void 0 }, o3 ? import_react103.default.createElement("span", { className: "react-datepicker__month-year-option--selected" }, "✓") : "", Oe(t6, r2.props.dateFormat, r2.props.locale));
      });
    }), ve(ke(r2), "onChange", function(e4) {
      return r2.props.onChange(e4);
    }), ve(ke(r2), "handleClickOutside", function() {
      r2.props.onCancel();
    }), r2.state = { monthYearsList: Mt(r2.props.minDate, r2.props.maxDate) }, r2;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t5 = (0, import_classnames.default)({ "react-datepicker__month-year-dropdown": true, "react-datepicker__month-year-dropdown--scrollable": this.props.scrollableMonthYearDropdown });
    return import_react103.default.createElement("div", { className: t5 }, this.renderOptions());
  } }]), o2;
}());
var Nt = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), s3 = 0; s3 < o2; s3++)
      a3[s3] = arguments[s3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "state", { dropdownVisible: false }), ve(ke(t5), "renderSelectOptions", function() {
      for (var r3 = Fe(t5.props.minDate), n3 = Fe(t5.props.maxDate), o3 = []; !isAfter(r3, n3); ) {
        var a4 = getTime(r3);
        o3.push(import_react103.default.createElement("option", { key: a4, value: a4 }, Oe(r3, t5.props.dateFormat, t5.props.locale))), r3 = addMonths(r3, 1);
      }
      return o3;
    }), ve(ke(t5), "onSelectChange", function(e4) {
      t5.onChange(e4.target.value);
    }), ve(ke(t5), "renderSelectMode", function() {
      return import_react103.default.createElement("select", { value: getTime(Fe(t5.props.date)), className: "react-datepicker__month-year-select", onChange: t5.onSelectChange }, t5.renderSelectOptions());
    }), ve(ke(t5), "renderReadView", function(r3) {
      var n3 = Oe(t5.props.date, t5.props.dateFormat, t5.props.locale);
      return import_react103.default.createElement("div", { key: "read", style: { visibility: r3 ? "visible" : "hidden" }, className: "react-datepicker__month-year-read-view", onClick: function(e4) {
        return t5.toggleDropdown(e4);
      } }, import_react103.default.createElement("span", { className: "react-datepicker__month-year-read-view--down-arrow" }), import_react103.default.createElement("span", { className: "react-datepicker__month-year-read-view--selected-month-year" }, n3));
    }), ve(ke(t5), "renderDropdown", function() {
      return import_react103.default.createElement(Pt, { key: "dropdown", date: t5.props.date, dateFormat: t5.props.dateFormat, onChange: t5.onChange, onCancel: t5.toggleDropdown, minDate: t5.props.minDate, maxDate: t5.props.maxDate, scrollableMonthYearDropdown: t5.props.scrollableMonthYearDropdown, locale: t5.props.locale });
    }), ve(ke(t5), "renderScrollMode", function() {
      var e4 = t5.state.dropdownVisible, r3 = [t5.renderReadView(!e4)];
      return e4 && r3.unshift(t5.renderDropdown()), r3;
    }), ve(ke(t5), "onChange", function(e4) {
      t5.toggleDropdown();
      var r3 = Ye(parseInt(e4));
      Qe(t5.props.date, r3) && We2(t5.props.date, r3) || t5.props.onChange(r3);
    }), ve(ke(t5), "toggleDropdown", function() {
      return t5.setState({ dropdownVisible: !t5.state.dropdownVisible });
    }), t5;
  }
  return fe(n2, [{ key: "render", value: function() {
    var t5;
    switch (this.props.dropdownMode) {
      case "scroll":
        t5 = this.renderScrollMode();
        break;
      case "select":
        t5 = this.renderSelectMode();
    }
    return import_react103.default.createElement("div", { className: "react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode) }, t5);
  } }]), n2;
}();
var xt = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2() {
    var t5;
    he(this, o2);
    for (var a3 = arguments.length, s3 = new Array(a3), i3 = 0; i3 < a3; i3++)
      s3[i3] = arguments[i3];
    return ve(ke(t5 = n2.call.apply(n2, [this].concat(s3))), "dayEl", import_react103.default.createRef()), ve(ke(t5), "handleClick", function(e4) {
      !t5.isDisabled() && t5.props.onClick && t5.props.onClick(e4);
    }), ve(ke(t5), "handleMouseEnter", function(e4) {
      !t5.isDisabled() && t5.props.onMouseEnter && t5.props.onMouseEnter(e4);
    }), ve(ke(t5), "handleOnKeyDown", function(e4) {
      " " === e4.key && (e4.preventDefault(), e4.key = "Enter"), t5.props.handleOnKeyDown(e4);
    }), ve(ke(t5), "isSameDay", function(e4) {
      return He(t5.props.day, e4);
    }), ve(ke(t5), "isKeyboardSelected", function() {
      return !t5.props.disabledKeyboardNavigation && !t5.isSameDay(t5.props.selected) && t5.isSameDay(t5.props.preSelection);
    }), ve(ke(t5), "isDisabled", function() {
      return Ze(t5.props.day, t5.props);
    }), ve(ke(t5), "isExcluded", function() {
      return et(t5.props.day, t5.props);
    }), ve(ke(t5), "getHighLightedClass", function() {
      var e4 = t5.props, r2 = e4.day, n3 = e4.highlightDates;
      if (!n3)
        return false;
      var o3 = Oe(r2, "MM.dd.yyyy");
      return n3.get(o3);
    }), ve(ke(t5), "isInRange", function() {
      var e4 = t5.props, r2 = e4.day, n3 = e4.startDate, o3 = e4.endDate;
      return !(!n3 || !o3) && qe(r2, n3, o3);
    }), ve(ke(t5), "isInSelectingRange", function() {
      var e4, r2 = t5.props, n3 = r2.day, o3 = r2.selectsStart, a4 = r2.selectsEnd, s4 = r2.selectsRange, i4 = r2.selectsDisabledDaysInRange, p = r2.startDate, c2 = r2.endDate, l2 = null !== (e4 = t5.props.selectingDate) && void 0 !== e4 ? e4 : t5.props.preSelection;
      return !(!(o3 || a4 || s4) || !l2 || !i4 && t5.isDisabled()) && (o3 && c2 && (isBefore(l2, c2) || Ve(l2, c2)) ? qe(n3, l2, c2) : (a4 && p && (isAfter(l2, p) || Ve(l2, p)) || !(!s4 || !p || c2 || !isAfter(l2, p) && !Ve(l2, p))) && qe(n3, p, l2));
    }), ve(ke(t5), "isSelectingRangeStart", function() {
      var e4;
      if (!t5.isInSelectingRange())
        return false;
      var r2 = t5.props, n3 = r2.day, o3 = r2.startDate, a4 = r2.selectsStart, s4 = null !== (e4 = t5.props.selectingDate) && void 0 !== e4 ? e4 : t5.props.preSelection;
      return He(n3, a4 ? s4 : o3);
    }), ve(ke(t5), "isSelectingRangeEnd", function() {
      var e4;
      if (!t5.isInSelectingRange())
        return false;
      var r2 = t5.props, n3 = r2.day, o3 = r2.endDate, a4 = r2.selectsEnd, s4 = r2.selectsRange, i4 = null !== (e4 = t5.props.selectingDate) && void 0 !== e4 ? e4 : t5.props.preSelection;
      return He(n3, a4 || s4 ? i4 : o3);
    }), ve(ke(t5), "isRangeStart", function() {
      var e4 = t5.props, r2 = e4.day, n3 = e4.startDate, o3 = e4.endDate;
      return !(!n3 || !o3) && He(n3, r2);
    }), ve(ke(t5), "isRangeEnd", function() {
      var e4 = t5.props, r2 = e4.day, n3 = e4.startDate, o3 = e4.endDate;
      return !(!n3 || !o3) && He(o3, r2);
    }), ve(ke(t5), "isWeekend", function() {
      var e4 = getDay(t5.props.day);
      return 0 === e4 || 6 === e4;
    }), ve(ke(t5), "isAfterMonth", function() {
      return void 0 !== t5.props.month && (t5.props.month + 1) % 12 === getMonth(t5.props.day);
    }), ve(ke(t5), "isBeforeMonth", function() {
      return void 0 !== t5.props.month && (getMonth(t5.props.day) + 1) % 12 === t5.props.month;
    }), ve(ke(t5), "isCurrentDay", function() {
      return t5.isSameDay(Ye());
    }), ve(ke(t5), "isSelected", function() {
      return t5.isSameDay(t5.props.selected);
    }), ve(ke(t5), "getClassNames", function(e4) {
      var n3, o3 = t5.props.dayClassName ? t5.props.dayClassName(e4) : void 0;
      return (0, import_classnames.default)("react-datepicker__day", o3, "react-datepicker__day--" + Oe(t5.props.day, "ddd", n3), { "react-datepicker__day--disabled": t5.isDisabled(), "react-datepicker__day--excluded": t5.isExcluded(), "react-datepicker__day--selected": t5.isSelected(), "react-datepicker__day--keyboard-selected": t5.isKeyboardSelected(), "react-datepicker__day--range-start": t5.isRangeStart(), "react-datepicker__day--range-end": t5.isRangeEnd(), "react-datepicker__day--in-range": t5.isInRange(), "react-datepicker__day--in-selecting-range": t5.isInSelectingRange(), "react-datepicker__day--selecting-range-start": t5.isSelectingRangeStart(), "react-datepicker__day--selecting-range-end": t5.isSelectingRangeEnd(), "react-datepicker__day--today": t5.isCurrentDay(), "react-datepicker__day--weekend": t5.isWeekend(), "react-datepicker__day--outside-month": t5.isAfterMonth() || t5.isBeforeMonth() }, t5.getHighLightedClass("react-datepicker__day--highlighted"));
    }), ve(ke(t5), "getAriaLabel", function() {
      var e4 = t5.props, r2 = e4.day, n3 = e4.ariaLabelPrefixWhenEnabled, o3 = void 0 === n3 ? "Choose" : n3, a4 = e4.ariaLabelPrefixWhenDisabled, s4 = void 0 === a4 ? "Not available" : a4, i4 = t5.isDisabled() || t5.isExcluded() ? s4 : o3;
      return "".concat(i4, " ").concat(Oe(r2, "PPPP", t5.props.locale));
    }), ve(ke(t5), "getTabIndex", function(e4, r2) {
      var n3 = e4 || t5.props.selected, o3 = r2 || t5.props.preSelection;
      return t5.isKeyboardSelected() || t5.isSameDay(n3) && He(o3, n3) ? 0 : -1;
    }), ve(ke(t5), "handleFocusDay", function() {
      var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r2 = false;
      0 === t5.getTabIndex() && !e4.isInputFocused && t5.isSameDay(t5.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (r2 = true), t5.props.inline && !t5.props.shouldFocusDayInline && (r2 = false), t5.props.containerRef && t5.props.containerRef.current && t5.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains("react-datepicker__day") && (r2 = true), t5.props.monthShowsDuplicateDaysEnd && t5.isAfterMonth() && (r2 = false), t5.props.monthShowsDuplicateDaysStart && t5.isBeforeMonth() && (r2 = false)), r2 && t5.dayEl.current.focus({ preventScroll: true });
    }), ve(ke(t5), "renderDayContents", function() {
      return t5.props.monthShowsDuplicateDaysEnd && t5.isAfterMonth() || t5.props.monthShowsDuplicateDaysStart && t5.isBeforeMonth() ? null : t5.props.renderDayContents ? t5.props.renderDayContents(getDate(t5.props.day), t5.props.day) : getDate(t5.props.day);
    }), ve(ke(t5), "render", function() {
      return import_react103.default.createElement("div", { ref: t5.dayEl, className: t5.getClassNames(t5.props.day), onKeyDown: t5.handleOnKeyDown, onClick: t5.handleClick, onMouseEnter: t5.handleMouseEnter, tabIndex: t5.getTabIndex(), "aria-label": t5.getAriaLabel(), role: "option", "aria-disabled": t5.isDisabled(), "aria-current": t5.isCurrentDay() ? "date" : void 0, "aria-selected": t5.isSelected() || t5.isInRange() }, t5.renderDayContents());
    }), t5;
  }
  return fe(o2, [{ key: "componentDidMount", value: function() {
    this.handleFocusDay();
  } }, { key: "componentDidUpdate", value: function(e4) {
    this.handleFocusDay(e4);
  } }]), o2;
}();
var Yt = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2() {
    var e4;
    he(this, o2);
    for (var t5 = arguments.length, r2 = new Array(t5), a3 = 0; a3 < t5; a3++)
      r2[a3] = arguments[a3];
    return ve(ke(e4 = n2.call.apply(n2, [this].concat(r2))), "handleClick", function(t6) {
      e4.props.onClick && e4.props.onClick(t6);
    }), e4;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t5 = this.props, n3 = t5.weekNumber, o3 = t5.ariaLabelPrefix, a3 = void 0 === o3 ? "week " : o3, s3 = { "react-datepicker__week-number": true, "react-datepicker__week-number--clickable": !!t5.onClick };
    return import_react103.default.createElement("div", { className: (0, import_classnames.default)(s3), "aria-label": "".concat(a3, " ").concat(this.props.weekNumber), onClick: this.handleClick }, n3);
  } }], [{ key: "defaultProps", get: function() {
    return { ariaLabelPrefix: "week " };
  } }]), o2;
}();
var It = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), s3 = 0; s3 < o2; s3++)
      a3[s3] = arguments[s3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "handleDayClick", function(e4, r3) {
      t5.props.onDayClick && t5.props.onDayClick(e4, r3);
    }), ve(ke(t5), "handleDayMouseEnter", function(e4) {
      t5.props.onDayMouseEnter && t5.props.onDayMouseEnter(e4);
    }), ve(ke(t5), "handleWeekClick", function(e4, r3, n3) {
      "function" == typeof t5.props.onWeekSelect && t5.props.onWeekSelect(e4, r3, n3), t5.props.shouldCloseOnSelect && t5.props.setOpen(false);
    }), ve(ke(t5), "formatWeekNumber", function(e4) {
      return t5.props.formatWeekNumber ? t5.props.formatWeekNumber(e4) : function(e5, t6) {
        var r3 = t6 && Ge(t6) || $e2() && Ge($e2());
        return getISOWeek(e5, r3 ? { locale: r3 } : null);
      }(e4);
    }), ve(ke(t5), "renderDays", function() {
      var r3 = Le(t5.props.day, t5.props.locale, t5.props.calendarStartDay), n3 = [], o3 = t5.formatWeekNumber(r3);
      if (t5.props.showWeekNumber) {
        var a4 = t5.props.onWeekSelect ? t5.handleWeekClick.bind(ke(t5), r3, o3) : void 0;
        n3.push(import_react103.default.createElement(Yt, { key: "W", weekNumber: o3, onClick: a4, ariaLabelPrefix: t5.props.ariaLabelPrefix }));
      }
      return n3.concat([0, 1, 2, 3, 4, 5, 6].map(function(n4) {
        var o4 = addDays(r3, n4);
        return import_react103.default.createElement(xt, { ariaLabelPrefixWhenEnabled: t5.props.chooseDayAriaLabelPrefix, ariaLabelPrefixWhenDisabled: t5.props.disabledDayAriaLabelPrefix, key: o4.valueOf(), day: o4, month: t5.props.month, onClick: t5.handleDayClick.bind(ke(t5), o4), onMouseEnter: t5.handleDayMouseEnter.bind(ke(t5), o4), minDate: t5.props.minDate, maxDate: t5.props.maxDate, excludeDates: t5.props.excludeDates, excludeDateIntervals: t5.props.excludeDateIntervals, includeDates: t5.props.includeDates, includeDateIntervals: t5.props.includeDateIntervals, highlightDates: t5.props.highlightDates, selectingDate: t5.props.selectingDate, filterDate: t5.props.filterDate, preSelection: t5.props.preSelection, selected: t5.props.selected, selectsStart: t5.props.selectsStart, selectsEnd: t5.props.selectsEnd, selectsRange: t5.props.selectsRange, selectsDisabledDaysInRange: t5.props.selectsDisabledDaysInRange, startDate: t5.props.startDate, endDate: t5.props.endDate, dayClassName: t5.props.dayClassName, renderDayContents: t5.props.renderDayContents, disabledKeyboardNavigation: t5.props.disabledKeyboardNavigation, handleOnKeyDown: t5.props.handleOnKeyDown, isInputFocused: t5.props.isInputFocused, containerRef: t5.props.containerRef, inline: t5.props.inline, shouldFocusDayInline: t5.props.shouldFocusDayInline, monthShowsDuplicateDaysEnd: t5.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t5.props.monthShowsDuplicateDaysStart, locale: t5.props.locale });
      }));
    }), t5;
  }
  return fe(n2, [{ key: "render", value: function() {
    return import_react103.default.createElement("div", { className: "react-datepicker__week" }, this.renderDays());
  } }], [{ key: "defaultProps", get: function() {
    return { shouldCloseOnSelect: true };
  } }]), n2;
}();
var Ot = "two_columns";
var Tt = "three_columns";
var Rt = "four_columns";
var Lt = (ve(Et = {}, Ot, { grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]], verticalNavigationOffset: 2 }), ve(Et, Tt, { grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]], verticalNavigationOffset: 3 }), ve(Et, Rt, { grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], verticalNavigationOffset: 4 }), Et);
function Ft(e4, t4) {
  return e4 ? Rt : t4 ? Ot : Tt;
}
var At = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2() {
    var t5;
    he(this, o2);
    for (var a3 = arguments.length, s3 = new Array(a3), i3 = 0; i3 < a3; i3++)
      s3[i3] = arguments[i3];
    return ve(ke(t5 = n2.call.apply(n2, [this].concat(s3))), "MONTH_REFS", Se(Array(12)).map(function() {
      return import_react103.default.createRef();
    })), ve(ke(t5), "QUARTER_REFS", Se(Array(4)).map(function() {
      return import_react103.default.createRef();
    })), ve(ke(t5), "isDisabled", function(e4) {
      return Ze(e4, t5.props);
    }), ve(ke(t5), "isExcluded", function(e4) {
      return et(e4, t5.props);
    }), ve(ke(t5), "handleDayClick", function(e4, r2) {
      t5.props.onDayClick && t5.props.onDayClick(e4, r2, t5.props.orderInDisplay);
    }), ve(ke(t5), "handleDayMouseEnter", function(e4) {
      t5.props.onDayMouseEnter && t5.props.onDayMouseEnter(e4);
    }), ve(ke(t5), "handleMouseLeave", function() {
      t5.props.onMouseLeave && t5.props.onMouseLeave();
    }), ve(ke(t5), "isRangeStartMonth", function(e4) {
      var r2 = t5.props, n3 = r2.day, o3 = r2.startDate, a4 = r2.endDate;
      return !(!o3 || !a4) && We2(setMonth(n3, e4), o3);
    }), ve(ke(t5), "isRangeStartQuarter", function(e4) {
      var r2 = t5.props, n3 = r2.day, o3 = r2.startDate, a4 = r2.endDate;
      return !(!o3 || !a4) && je(setQuarter(n3, e4), o3);
    }), ve(ke(t5), "isRangeEndMonth", function(e4) {
      var r2 = t5.props, n3 = r2.day, o3 = r2.startDate, a4 = r2.endDate;
      return !(!o3 || !a4) && We2(setMonth(n3, e4), a4);
    }), ve(ke(t5), "isRangeEndQuarter", function(e4) {
      var r2 = t5.props, n3 = r2.day, o3 = r2.startDate, a4 = r2.endDate;
      return !(!o3 || !a4) && je(setQuarter(n3, e4), a4);
    }), ve(ke(t5), "isInSelectingRangeMonth", function(e4) {
      var r2, n3 = t5.props, o3 = n3.day, a4 = n3.selectsStart, s4 = n3.selectsEnd, i4 = n3.selectsRange, p = n3.startDate, c2 = n3.endDate, l2 = null !== (r2 = t5.props.selectingDate) && void 0 !== r2 ? r2 : t5.props.preSelection;
      return !(!(a4 || s4 || i4) || !l2) && (a4 && c2 ? rt(l2, c2, e4, o3) : (s4 && p || !(!i4 || !p || c2)) && rt(p, l2, e4, o3));
    }), ve(ke(t5), "isSelectingMonthRangeStart", function(e4) {
      var r2;
      if (!t5.isInSelectingRangeMonth(e4))
        return false;
      var n3 = t5.props, o3 = n3.day, a4 = n3.startDate, s4 = n3.selectsStart, i4 = setMonth(o3, e4), p = null !== (r2 = t5.props.selectingDate) && void 0 !== r2 ? r2 : t5.props.preSelection;
      return We2(i4, s4 ? p : a4);
    }), ve(ke(t5), "isSelectingMonthRangeEnd", function(e4) {
      var r2;
      if (!t5.isInSelectingRangeMonth(e4))
        return false;
      var n3 = t5.props, o3 = n3.day, a4 = n3.endDate, s4 = n3.selectsEnd, i4 = n3.selectsRange, p = setMonth(o3, e4), c2 = null !== (r2 = t5.props.selectingDate) && void 0 !== r2 ? r2 : t5.props.preSelection;
      return We2(p, s4 || i4 ? c2 : a4);
    }), ve(ke(t5), "isInSelectingRangeQuarter", function(e4) {
      var r2, n3 = t5.props, o3 = n3.day, a4 = n3.selectsStart, s4 = n3.selectsEnd, i4 = n3.selectsRange, p = n3.startDate, c2 = n3.endDate, l2 = null !== (r2 = t5.props.selectingDate) && void 0 !== r2 ? r2 : t5.props.preSelection;
      return !(!(a4 || s4 || i4) || !l2) && (a4 && c2 ? st(l2, c2, e4, o3) : (s4 && p || !(!i4 || !p || c2)) && st(p, l2, e4, o3));
    }), ve(ke(t5), "isWeekInMonth", function(e4) {
      var r2 = t5.props.day, n3 = addDays(e4, 6);
      return We2(e4, r2) || We2(n3, r2);
    }), ve(ke(t5), "isCurrentMonth", function(e4, t6) {
      return getYear(e4) === getYear(Ye()) && t6 === getMonth(Ye());
    }), ve(ke(t5), "isCurrentQuarter", function(e4, t6) {
      return getYear(e4) === getYear(Ye()) && t6 === getQuarter(Ye());
    }), ve(ke(t5), "isSelectedMonth", function(e4, t6, r2) {
      return getMonth(r2) === t6 && getYear(e4) === getYear(r2);
    }), ve(ke(t5), "isSelectedQuarter", function(e4, t6, r2) {
      return getQuarter(e4) === t6 && getYear(e4) === getYear(r2);
    }), ve(ke(t5), "renderWeeks", function() {
      for (var r2 = [], n3 = t5.props.fixedHeight, o3 = 0, a4 = false, s4 = Le(Fe(t5.props.day), t5.props.locale, t5.props.calendarStartDay); r2.push(import_react103.default.createElement(It, { ariaLabelPrefix: t5.props.weekAriaLabelPrefix, chooseDayAriaLabelPrefix: t5.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: t5.props.disabledDayAriaLabelPrefix, key: o3, day: s4, month: getMonth(t5.props.day), onDayClick: t5.handleDayClick, onDayMouseEnter: t5.handleDayMouseEnter, onWeekSelect: t5.props.onWeekSelect, formatWeekNumber: t5.props.formatWeekNumber, locale: t5.props.locale, minDate: t5.props.minDate, maxDate: t5.props.maxDate, excludeDates: t5.props.excludeDates, excludeDateIntervals: t5.props.excludeDateIntervals, includeDates: t5.props.includeDates, includeDateIntervals: t5.props.includeDateIntervals, inline: t5.props.inline, shouldFocusDayInline: t5.props.shouldFocusDayInline, highlightDates: t5.props.highlightDates, selectingDate: t5.props.selectingDate, filterDate: t5.props.filterDate, preSelection: t5.props.preSelection, selected: t5.props.selected, selectsStart: t5.props.selectsStart, selectsEnd: t5.props.selectsEnd, selectsRange: t5.props.selectsRange, selectsDisabledDaysInRange: t5.props.selectsDisabledDaysInRange, showWeekNumber: t5.props.showWeekNumbers, startDate: t5.props.startDate, endDate: t5.props.endDate, dayClassName: t5.props.dayClassName, setOpen: t5.props.setOpen, shouldCloseOnSelect: t5.props.shouldCloseOnSelect, disabledKeyboardNavigation: t5.props.disabledKeyboardNavigation, renderDayContents: t5.props.renderDayContents, handleOnKeyDown: t5.props.handleOnKeyDown, isInputFocused: t5.props.isInputFocused, containerRef: t5.props.containerRef, calendarStartDay: t5.props.calendarStartDay, monthShowsDuplicateDaysEnd: t5.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t5.props.monthShowsDuplicateDaysStart })), !a4; ) {
        o3++, s4 = addWeeks(s4, 1);
        var i4 = n3 && o3 >= 6, p = !n3 && !t5.isWeekInMonth(s4);
        if (i4 || p) {
          if (!t5.props.peekNextMonth)
            break;
          a4 = true;
        }
      }
      return r2;
    }), ve(ke(t5), "onMonthClick", function(e4, r2) {
      t5.handleDayClick(Fe(setMonth(t5.props.day, r2)), e4);
    }), ve(ke(t5), "onMonthMouseEnter", function(e4) {
      t5.handleDayMouseEnter(Fe(setMonth(t5.props.day, e4)));
    }), ve(ke(t5), "handleMonthNavigation", function(e4, r2) {
      t5.isDisabled(r2) || t5.isExcluded(r2) || (t5.props.setPreSelection(r2), t5.MONTH_REFS[e4].current && t5.MONTH_REFS[e4].current.focus());
    }), ve(ke(t5), "onMonthKeyDown", function(e4, r2) {
      var n3 = t5.props, o3 = n3.selected, a4 = n3.preSelection, s4 = n3.disabledKeyboardNavigation, i4 = n3.showTwoColumnMonthYearPicker, p = n3.showFourColumnMonthYearPicker, c2 = n3.setPreSelection, d3 = e4.key;
      if ("Tab" !== d3 && e4.preventDefault(), !s4) {
        var u2 = Ft(p, i4), h3 = Lt[u2].verticalNavigationOffset, m3 = Lt[u2].grid;
        switch (d3) {
          case "Enter":
            t5.onMonthClick(e4, r2), c2(o3);
            break;
          case "ArrowRight":
            t5.handleMonthNavigation(11 === r2 ? 0 : r2 + 1, addMonths(a4, 1));
            break;
          case "ArrowLeft":
            t5.handleMonthNavigation(0 === r2 ? 11 : r2 - 1, subMonths(a4, 1));
            break;
          case "ArrowUp":
            t5.handleMonthNavigation(m3[0].includes(r2) ? r2 + 12 - h3 : r2 - h3, subMonths(a4, h3));
            break;
          case "ArrowDown":
            t5.handleMonthNavigation(m3[m3.length - 1].includes(r2) ? r2 - 12 + h3 : r2 + h3, addMonths(a4, h3));
        }
      }
    }), ve(ke(t5), "onQuarterClick", function(e4, r2) {
      t5.handleDayClick(Ke(setQuarter(t5.props.day, r2)), e4);
    }), ve(ke(t5), "onQuarterMouseEnter", function(e4) {
      t5.handleDayMouseEnter(Ke(setQuarter(t5.props.day, e4)));
    }), ve(ke(t5), "handleQuarterNavigation", function(e4, r2) {
      t5.isDisabled(r2) || t5.isExcluded(r2) || (t5.props.setPreSelection(r2), t5.QUARTER_REFS[e4 - 1].current && t5.QUARTER_REFS[e4 - 1].current.focus());
    }), ve(ke(t5), "onQuarterKeyDown", function(e4, r2) {
      var n3 = e4.key;
      if (!t5.props.disabledKeyboardNavigation)
        switch (n3) {
          case "Enter":
            t5.onQuarterClick(e4, r2), t5.props.setPreSelection(t5.props.selected);
            break;
          case "ArrowRight":
            t5.handleQuarterNavigation(4 === r2 ? 1 : r2 + 1, addQuarters(t5.props.preSelection, 1));
            break;
          case "ArrowLeft":
            t5.handleQuarterNavigation(1 === r2 ? 4 : r2 - 1, subQuarters(t5.props.preSelection, 1));
        }
    }), ve(ke(t5), "getMonthClassNames", function(e4) {
      var n3 = t5.props, o3 = n3.day, a4 = n3.startDate, s4 = n3.endDate, i4 = n3.selected, p = n3.minDate, c2 = n3.maxDate, l2 = n3.preSelection, d3 = n3.monthClassName, u2 = n3.excludeDates, h3 = n3.includeDates, m3 = d3 ? d3(setMonth(o3, e4)) : void 0, f = setMonth(o3, e4);
      return (0, import_classnames.default)("react-datepicker__month-text", "react-datepicker__month-".concat(e4), m3, { "react-datepicker__month-text--disabled": (p || c2 || u2 || h3) && tt(f, t5.props), "react-datepicker__month-text--selected": t5.isSelectedMonth(o3, e4, i4), "react-datepicker__month-text--keyboard-selected": !t5.props.disabledKeyboardNavigation && getMonth(l2) === e4, "react-datepicker__month-text--in-selecting-range": t5.isInSelectingRangeMonth(e4), "react-datepicker__month-text--in-range": rt(a4, s4, e4, o3), "react-datepicker__month-text--range-start": t5.isRangeStartMonth(e4), "react-datepicker__month-text--range-end": t5.isRangeEndMonth(e4), "react-datepicker__month-text--selecting-range-start": t5.isSelectingMonthRangeStart(e4), "react-datepicker__month-text--selecting-range-end": t5.isSelectingMonthRangeEnd(e4), "react-datepicker__month-text--today": t5.isCurrentMonth(o3, e4) });
    }), ve(ke(t5), "getTabIndex", function(e4) {
      var r2 = getMonth(t5.props.preSelection);
      return t5.props.disabledKeyboardNavigation || e4 !== r2 ? "-1" : "0";
    }), ve(ke(t5), "getQuarterTabIndex", function(e4) {
      var r2 = getQuarter(t5.props.preSelection);
      return t5.props.disabledKeyboardNavigation || e4 !== r2 ? "-1" : "0";
    }), ve(ke(t5), "getAriaLabel", function(e4) {
      var r2 = t5.props, n3 = r2.chooseDayAriaLabelPrefix, o3 = void 0 === n3 ? "Choose" : n3, a4 = r2.disabledDayAriaLabelPrefix, s4 = void 0 === a4 ? "Not available" : a4, i4 = r2.day, p = setMonth(i4, e4), c2 = t5.isDisabled(p) || t5.isExcluded(p) ? s4 : o3;
      return "".concat(c2, " ").concat(Oe(p, "MMMM yyyy"));
    }), ve(ke(t5), "getQuarterClassNames", function(e4) {
      var n3 = t5.props, o3 = n3.day, a4 = n3.startDate, s4 = n3.endDate, i4 = n3.selected, p = n3.minDate, c2 = n3.maxDate, l2 = n3.preSelection;
      return (0, import_classnames.default)("react-datepicker__quarter-text", "react-datepicker__quarter-".concat(e4), { "react-datepicker__quarter-text--disabled": (p || c2) && nt(setQuarter(o3, e4), t5.props), "react-datepicker__quarter-text--selected": t5.isSelectedQuarter(o3, e4, i4), "react-datepicker__quarter-text--keyboard-selected": getQuarter(l2) === e4, "react-datepicker__quarter-text--in-selecting-range": t5.isInSelectingRangeQuarter(e4), "react-datepicker__quarter-text--in-range": st(a4, s4, e4, o3), "react-datepicker__quarter-text--range-start": t5.isRangeStartQuarter(e4), "react-datepicker__quarter-text--range-end": t5.isRangeEndQuarter(e4) });
    }), ve(ke(t5), "getMonthContent", function(e4) {
      var r2 = t5.props, n3 = r2.showFullMonthYearPicker, o3 = r2.renderMonthContent, a4 = r2.locale, s4 = Xe(e4, a4), i4 = Je(e4, a4);
      return o3 ? o3(e4, s4, i4) : n3 ? i4 : s4;
    }), ve(ke(t5), "getQuarterContent", function(e4) {
      var r2 = t5.props, n3 = r2.renderQuarterContent, o3 = function(e5, t6) {
        return Oe(setQuarter(Ye(), e5), "QQQ", t6);
      }(e4, r2.locale);
      return n3 ? n3(e4, o3) : o3;
    }), ve(ke(t5), "renderMonths", function() {
      var r2 = t5.props, n3 = r2.showTwoColumnMonthYearPicker, o3 = r2.showFourColumnMonthYearPicker, a4 = r2.day, s4 = r2.selected;
      return Lt[Ft(o3, n3)].grid.map(function(r3, n4) {
        return import_react103.default.createElement("div", { className: "react-datepicker__month-wrapper", key: n4 }, r3.map(function(r4, n5) {
          return import_react103.default.createElement("div", { ref: t5.MONTH_REFS[r4], key: n5, onClick: function(e4) {
            t5.onMonthClick(e4, r4);
          }, onKeyDown: function(e4) {
            t5.onMonthKeyDown(e4, r4);
          }, onMouseEnter: function() {
            return t5.onMonthMouseEnter(r4);
          }, tabIndex: t5.getTabIndex(r4), className: t5.getMonthClassNames(r4), role: "option", "aria-label": t5.getAriaLabel(r4), "aria-current": t5.isCurrentMonth(a4, r4) ? "date" : void 0, "aria-selected": t5.isSelectedMonth(a4, r4, s4) }, t5.getMonthContent(r4));
        }));
      });
    }), ve(ke(t5), "renderQuarters", function() {
      var r2 = t5.props, n3 = r2.day, o3 = r2.selected;
      return import_react103.default.createElement("div", { className: "react-datepicker__quarter-wrapper" }, [1, 2, 3, 4].map(function(r3, a4) {
        return import_react103.default.createElement("div", { key: a4, ref: t5.QUARTER_REFS[a4], role: "option", onClick: function(e4) {
          t5.onQuarterClick(e4, r3);
        }, onKeyDown: function(e4) {
          t5.onQuarterKeyDown(e4, r3);
        }, onMouseEnter: function() {
          return t5.onQuarterMouseEnter(r3);
        }, className: t5.getQuarterClassNames(r3), "aria-selected": t5.isSelectedQuarter(n3, r3, o3), tabIndex: t5.getQuarterTabIndex(r3), "aria-current": t5.isCurrentQuarter(n3, r3) ? "date" : void 0 }, t5.getQuarterContent(r3));
      }));
    }), ve(ke(t5), "getClassNames", function() {
      var e4 = t5.props, n3 = e4.selectingDate, o3 = e4.selectsStart, a4 = e4.selectsEnd, s4 = e4.showMonthYearPicker, i4 = e4.showQuarterYearPicker;
      return (0, import_classnames.default)("react-datepicker__month", { "react-datepicker__month--selecting-range": n3 && (o3 || a4) }, { "react-datepicker__monthPicker": s4 }, { "react-datepicker__quarterPicker": i4 });
    }), t5;
  }
  return fe(o2, [{ key: "render", value: function() {
    var t5 = this.props, r2 = t5.showMonthYearPicker, n3 = t5.showQuarterYearPicker, o3 = t5.day, a3 = t5.ariaLabelPrefix, s3 = void 0 === a3 ? "month " : a3;
    return import_react103.default.createElement("div", { className: this.getClassNames(), onMouseLeave: this.handleMouseLeave, "aria-label": "".concat(s3, " ").concat(Oe(o3, "yyyy-MM")), role: "listbox" }, r2 ? this.renderMonths() : n3 ? this.renderQuarters() : this.renderWeeks());
  } }]), o2;
}();
var Kt = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2() {
    var t5;
    he(this, n2);
    for (var o2 = arguments.length, a3 = new Array(o2), i3 = 0; i3 < o2; i3++)
      a3[i3] = arguments[i3];
    return ve(ke(t5 = r2.call.apply(r2, [this].concat(a3))), "state", { height: null }), ve(ke(t5), "handleClick", function(e4) {
      (t5.props.minTime || t5.props.maxTime) && lt(e4, t5.props) || (t5.props.excludeTimes || t5.props.includeTimes || t5.props.filterTime) && ct(e4, t5.props) || t5.props.onChange(e4);
    }), ve(ke(t5), "isSelectedTime", function(e4, r3, n3) {
      return t5.props.selected && r3 === getHours(e4) && n3 === getMinutes(e4);
    }), ve(ke(t5), "liClasses", function(e4, r3, n3) {
      var o3 = ["react-datepicker__time-list-item", t5.props.timeClassName ? t5.props.timeClassName(e4, r3, n3) : void 0];
      return t5.isSelectedTime(e4, r3, n3) && o3.push("react-datepicker__time-list-item--selected"), ((t5.props.minTime || t5.props.maxTime) && lt(e4, t5.props) || (t5.props.excludeTimes || t5.props.includeTimes || t5.props.filterTime) && ct(e4, t5.props)) && o3.push("react-datepicker__time-list-item--disabled"), t5.props.injectTimes && (60 * getHours(e4) + getMinutes(e4)) % t5.props.intervals != 0 && o3.push("react-datepicker__time-list-item--injected"), o3.join(" ");
    }), ve(ke(t5), "handleOnKeyDown", function(e4, r3) {
      " " === e4.key && (e4.preventDefault(), e4.key = "Enter"), "Enter" === e4.key && t5.handleClick(r3), t5.props.handleOnKeyDown(e4);
    }), ve(ke(t5), "renderTimes", function() {
      for (var r3, n3 = [], o3 = t5.props.format ? t5.props.format : "p", a4 = t5.props.intervals, i4 = (r3 = Ye(t5.props.selected), startOfDay(r3)), p = 1440 / a4, c2 = t5.props.injectTimes && t5.props.injectTimes.sort(function(e4, t6) {
        return e4 - t6;
      }), l2 = t5.props.selected || t5.props.openToDate || Ye(), d3 = getHours(l2), u2 = getMinutes(l2), h3 = setHours(setMinutes(i4, u2), d3), m3 = 0; m3 < p; m3++) {
        var f = addMinutes(i4, m3 * a4);
        if (n3.push(f), c2) {
          var v = Dt(i4, f, m3, a4, c2);
          n3 = n3.concat(v);
        }
      }
      return n3.map(function(r4, n4) {
        return import_react103.default.createElement("li", { key: n4, onClick: t5.handleClick.bind(ke(t5), r4), className: t5.liClasses(r4, d3, u2), ref: function(e4) {
          (isBefore(r4, h3) || Ve(r4, h3)) && (t5.centerLi = e4);
        }, onKeyDown: function(e4) {
          t5.handleOnKeyDown(e4, r4);
        }, tabIndex: "0", "aria-selected": t5.isSelectedTime(r4, d3, u2) ? "true" : void 0 }, Oe(r4, o3, t5.props.locale));
      });
    }), t5;
  }
  return fe(n2, [{ key: "componentDidMount", value: function() {
    this.list.scrollTop = this.centerLi && n2.calcCenterPosition(this.props.monthRef ? this.props.monthRef.clientHeight - this.header.clientHeight : this.list.clientHeight, this.centerLi), this.props.monthRef && this.header && this.setState({ height: this.props.monthRef.clientHeight - this.header.clientHeight });
  } }, { key: "render", value: function() {
    var t5 = this, r3 = this.state.height;
    return import_react103.default.createElement("div", { className: "react-datepicker__time-container ".concat(this.props.todayButton ? "react-datepicker__time-container--with-today-button" : "") }, import_react103.default.createElement("div", { className: "react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly ? "react-datepicker__header--time--only" : ""), ref: function(e4) {
      t5.header = e4;
    } }, import_react103.default.createElement("div", { className: "react-datepicker-time__header" }, this.props.timeCaption)), import_react103.default.createElement("div", { className: "react-datepicker__time" }, import_react103.default.createElement("div", { className: "react-datepicker__time-box" }, import_react103.default.createElement("ul", { className: "react-datepicker__time-list", ref: function(e4) {
      t5.list = e4;
    }, style: r3 ? { height: r3 } : {}, tabIndex: "0" }, this.renderTimes()))));
  } }], [{ key: "defaultProps", get: function() {
    return { intervals: 30, onTimeChange: function() {
    }, todayButton: null, timeCaption: "Time" };
  } }]), n2;
}();
ve(Kt, "calcCenterPosition", function(e4, t4) {
  return t4.offsetTop - (e4 / 2 - t4.clientHeight / 2);
});
var Bt = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2(t5) {
    var a3;
    return he(this, o2), ve(ke(a3 = n2.call(this, t5)), "YEAR_REFS", Se(Array(a3.props.yearItemNumber)).map(function() {
      return import_react103.default.createRef();
    })), ve(ke(a3), "isDisabled", function(e4) {
      return Ze(e4, a3.props);
    }), ve(ke(a3), "isExcluded", function(e4) {
      return et(e4, a3.props);
    }), ve(ke(a3), "selectingDate", function() {
      var e4;
      return null !== (e4 = a3.props.selectingDate) && void 0 !== e4 ? e4 : a3.props.preSelection;
    }), ve(ke(a3), "updateFocusOnPaginate", function(e4) {
      var t6 = (function() {
        this.YEAR_REFS[e4].current.focus();
      }).bind(ke(a3));
      window.requestAnimationFrame(t6);
    }), ve(ke(a3), "handleYearClick", function(e4, t6) {
      a3.props.onDayClick && a3.props.onDayClick(e4, t6);
    }), ve(ke(a3), "handleYearNavigation", function(e4, t6) {
      var r2 = a3.props, n3 = r2.date, o3 = r2.yearItemNumber, s3 = wt(n3, o3).startPeriod;
      a3.isDisabled(t6) || a3.isExcluded(t6) || (a3.props.setPreSelection(t6), e4 - s3 == -1 ? a3.updateFocusOnPaginate(o3 - 1) : e4 - s3 === o3 ? a3.updateFocusOnPaginate(0) : a3.YEAR_REFS[e4 - s3].current.focus());
    }), ve(ke(a3), "isSameDay", function(e4, t6) {
      return He(e4, t6);
    }), ve(ke(a3), "isCurrentYear", function(e4) {
      return e4 === getYear(Ye());
    }), ve(ke(a3), "isRangeStart", function(e4) {
      return a3.props.startDate && a3.props.endDate && Qe(setYear(Ye(), e4), a3.props.startDate);
    }), ve(ke(a3), "isRangeEnd", function(e4) {
      return a3.props.startDate && a3.props.endDate && Qe(setYear(Ye(), e4), a3.props.endDate);
    }), ve(ke(a3), "isInRange", function(e4) {
      return ot(e4, a3.props.startDate, a3.props.endDate);
    }), ve(ke(a3), "isInSelectingRange", function(e4) {
      var t6 = a3.props, r2 = t6.selectsStart, n3 = t6.selectsEnd, o3 = t6.selectsRange, s3 = t6.startDate, i3 = t6.endDate;
      return !(!(r2 || n3 || o3) || !a3.selectingDate()) && (r2 && i3 ? ot(e4, a3.selectingDate(), i3) : (n3 && s3 || !(!o3 || !s3 || i3)) && ot(e4, s3, a3.selectingDate()));
    }), ve(ke(a3), "isSelectingRangeStart", function(e4) {
      if (!a3.isInSelectingRange(e4))
        return false;
      var t6 = a3.props, r2 = t6.startDate, n3 = t6.selectsStart, o3 = setYear(Ye(), e4);
      return Qe(o3, n3 ? a3.selectingDate() : r2);
    }), ve(ke(a3), "isSelectingRangeEnd", function(e4) {
      if (!a3.isInSelectingRange(e4))
        return false;
      var t6 = a3.props, r2 = t6.endDate, n3 = t6.selectsEnd, o3 = t6.selectsRange, s3 = setYear(Ye(), e4);
      return Qe(s3, n3 || o3 ? a3.selectingDate() : r2);
    }), ve(ke(a3), "isKeyboardSelected", function(e4) {
      var t6 = Ae2(setYear(a3.props.date, e4));
      return !a3.props.disabledKeyboardNavigation && !a3.props.inline && !He(t6, Ae2(a3.props.selected)) && He(t6, Ae2(a3.props.preSelection));
    }), ve(ke(a3), "onYearClick", function(e4, t6) {
      var r2 = a3.props.date;
      a3.handleYearClick(Ae2(setYear(r2, t6)), e4);
    }), ve(ke(a3), "onYearKeyDown", function(e4, t6) {
      var r2 = e4.key;
      if (!a3.props.disabledKeyboardNavigation)
        switch (r2) {
          case "Enter":
            a3.onYearClick(e4, t6), a3.props.setPreSelection(a3.props.selected);
            break;
          case "ArrowRight":
            a3.handleYearNavigation(t6 + 1, addYears(a3.props.preSelection, 1));
            break;
          case "ArrowLeft":
            a3.handleYearNavigation(t6 - 1, subYears(a3.props.preSelection, 1));
        }
    }), ve(ke(a3), "getYearClassNames", function(e4) {
      var t6 = a3.props, n3 = t6.minDate, o3 = t6.maxDate, s3 = t6.selected, i3 = t6.excludeDates, p = t6.includeDates, c2 = t6.filterDate;
      return (0, import_classnames.default)("react-datepicker__year-text", { "react-datepicker__year-text--selected": e4 === getYear(s3), "react-datepicker__year-text--disabled": (n3 || o3 || i3 || p || c2) && at(e4, a3.props), "react-datepicker__year-text--keyboard-selected": a3.isKeyboardSelected(e4), "react-datepicker__year-text--range-start": a3.isRangeStart(e4), "react-datepicker__year-text--range-end": a3.isRangeEnd(e4), "react-datepicker__year-text--in-range": a3.isInRange(e4), "react-datepicker__year-text--in-selecting-range": a3.isInSelectingRange(e4), "react-datepicker__year-text--selecting-range-start": a3.isSelectingRangeStart(e4), "react-datepicker__year-text--selecting-range-end": a3.isSelectingRangeEnd(e4), "react-datepicker__year-text--today": a3.isCurrentYear(e4) });
    }), ve(ke(a3), "getYearTabIndex", function(e4) {
      return a3.props.disabledKeyboardNavigation ? "-1" : e4 === getYear(a3.props.preSelection) ? "0" : "-1";
    }), ve(ke(a3), "getYearContainerClassNames", function() {
      var e4 = a3.props, t6 = e4.selectingDate, n3 = e4.selectsStart, o3 = e4.selectsEnd, s3 = e4.selectsRange;
      return (0, import_classnames.default)("react-datepicker__year", { "react-datepicker__year--selecting-range": t6 && (n3 || o3 || s3) });
    }), ve(ke(a3), "getYearContent", function(e4) {
      return a3.props.renderYearContent ? a3.props.renderYearContent(e4) : e4;
    }), a3;
  }
  return fe(o2, [{ key: "render", value: function() {
    for (var t5 = this, r2 = [], n3 = this.props, o3 = n3.date, a3 = n3.yearItemNumber, s3 = n3.onYearMouseEnter, i3 = n3.onYearMouseLeave, p = wt(o3, a3), c2 = p.startPeriod, l2 = p.endPeriod, d3 = function(n4) {
      r2.push(import_react103.default.createElement("div", { ref: t5.YEAR_REFS[n4 - c2], onClick: function(e4) {
        t5.onYearClick(e4, n4);
      }, onKeyDown: function(e4) {
        t5.onYearKeyDown(e4, n4);
      }, tabIndex: t5.getYearTabIndex(n4), className: t5.getYearClassNames(n4), onMouseEnter: function(e4) {
        return s3(e4, n4);
      }, onMouseLeave: function(e4) {
        return i3(e4, n4);
      }, key: n4, "aria-current": t5.isCurrentYear(n4) ? "date" : void 0 }, t5.getYearContent(n4)));
    }, u2 = c2; u2 <= l2; u2++)
      d3(u2);
    return import_react103.default.createElement("div", { className: this.getYearContainerClassNames() }, import_react103.default.createElement("div", { className: "react-datepicker__year-wrapper", onMouseLeave: this.props.clearSelectingDate }, r2));
  } }]), o2;
}();
var Qt = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2(t5) {
    var o2;
    return he(this, n2), ve(ke(o2 = r2.call(this, t5)), "onTimeChange", function(e4) {
      o2.setState({ time: e4 });
      var t6 = /* @__PURE__ */ new Date();
      t6.setHours(e4.split(":")[0]), t6.setMinutes(e4.split(":")[1]), o2.props.onChange(t6);
    }), ve(ke(o2), "renderTimeInput", function() {
      var t6 = o2.state.time, r3 = o2.props, n3 = r3.date, a3 = r3.timeString, s3 = r3.customTimeInput;
      return s3 ? import_react103.default.cloneElement(s3, { date: n3, value: t6, onChange: o2.onTimeChange }) : import_react103.default.createElement("input", { type: "time", className: "react-datepicker-time__input", placeholder: "Time", name: "time-input", required: true, value: t6, onChange: function(e4) {
        o2.onTimeChange(e4.target.value || a3);
      } });
    }), o2.state = { time: o2.props.timeString }, o2;
  }
  return fe(n2, [{ key: "render", value: function() {
    return import_react103.default.createElement("div", { className: "react-datepicker__input-time-container" }, import_react103.default.createElement("div", { className: "react-datepicker-time__caption" }, this.props.timeInputLabel), import_react103.default.createElement("div", { className: "react-datepicker-time__input-container" }, import_react103.default.createElement("div", { className: "react-datepicker-time__input" }, this.renderTimeInput())));
  } }], [{ key: "getDerivedStateFromProps", value: function(e4, t5) {
    return e4.timeString !== t5.time ? { time: e4.timeString } : null;
  } }]), n2;
}();
function Wt(t4) {
  var r2 = t4.className, n2 = t4.children, o2 = t4.showPopperArrow, a3 = t4.arrowProps, s3 = void 0 === a3 ? {} : a3;
  return import_react103.default.createElement("div", { className: r2 }, o2 && import_react103.default.createElement("div", ye({ className: "react-datepicker__triangle" }, s3)), n2);
}
var jt = ["react-datepicker__year-select", "react-datepicker__month-select", "react-datepicker__month-year-select"];
var Ht = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2(t5) {
    var a3;
    return he(this, o2), ve(ke(a3 = n2.call(this, t5)), "handleClickOutside", function(e4) {
      a3.props.onClickOutside(e4);
    }), ve(ke(a3), "setClickOutsideRef", function() {
      return a3.containerRef.current;
    }), ve(ke(a3), "handleDropdownFocus", function(e4) {
      (function() {
        var e5 = ((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).className || "").split(/\s+/);
        return jt.some(function(t6) {
          return e5.indexOf(t6) >= 0;
        });
      })(e4.target) && a3.props.onDropdownFocus();
    }), ve(ke(a3), "getDateInView", function() {
      var e4 = a3.props, t6 = e4.preSelection, r2 = e4.selected, n3 = e4.openToDate, o3 = ft(a3.props), s3 = vt(a3.props), i3 = Ye(), p = n3 || r2 || t6;
      return p || (o3 && isBefore(i3, o3) ? o3 : s3 && isAfter(i3, s3) ? s3 : i3);
    }), ve(ke(a3), "increaseMonth", function() {
      a3.setState(function(e4) {
        var t6 = e4.date;
        return { date: addMonths(t6, 1) };
      }, function() {
        return a3.handleMonthChange(a3.state.date);
      });
    }), ve(ke(a3), "decreaseMonth", function() {
      a3.setState(function(e4) {
        var t6 = e4.date;
        return { date: subMonths(t6, 1) };
      }, function() {
        return a3.handleMonthChange(a3.state.date);
      });
    }), ve(ke(a3), "handleDayClick", function(e4, t6, r2) {
      a3.props.onSelect(e4, t6, r2), a3.props.setPreSelection && a3.props.setPreSelection(e4);
    }), ve(ke(a3), "handleDayMouseEnter", function(e4) {
      a3.setState({ selectingDate: e4 }), a3.props.onDayMouseEnter && a3.props.onDayMouseEnter(e4);
    }), ve(ke(a3), "handleMonthMouseLeave", function() {
      a3.setState({ selectingDate: null }), a3.props.onMonthMouseLeave && a3.props.onMonthMouseLeave();
    }), ve(ke(a3), "handleYearMouseEnter", function(e4, t6) {
      a3.setState({ selectingDate: setYear(Ye(), t6) }), a3.props.onYearMouseEnter && a3.props.onYearMouseEnter(e4, t6);
    }), ve(ke(a3), "handleYearMouseLeave", function(e4, t6) {
      a3.props.onYearMouseLeave && a3.props.onYearMouseLeave(e4, t6);
    }), ve(ke(a3), "handleYearChange", function(e4) {
      a3.props.onYearChange && (a3.props.onYearChange(e4), a3.setState({ isRenderAriaLiveMessage: true })), a3.props.adjustDateOnChange && (a3.props.onSelect && a3.props.onSelect(e4), a3.props.setOpen && a3.props.setOpen(true)), a3.props.setPreSelection && a3.props.setPreSelection(e4);
    }), ve(ke(a3), "handleMonthChange", function(e4) {
      a3.handleCustomMonthChange(e4), a3.props.adjustDateOnChange && (a3.props.onSelect && a3.props.onSelect(e4), a3.props.setOpen && a3.props.setOpen(true)), a3.props.setPreSelection && a3.props.setPreSelection(e4);
    }), ve(ke(a3), "handleCustomMonthChange", function(e4) {
      a3.props.onMonthChange && (a3.props.onMonthChange(e4), a3.setState({ isRenderAriaLiveMessage: true }));
    }), ve(ke(a3), "handleMonthYearChange", function(e4) {
      a3.handleYearChange(e4), a3.handleMonthChange(e4);
    }), ve(ke(a3), "changeYear", function(e4) {
      a3.setState(function(t6) {
        var r2 = t6.date;
        return { date: setYear(r2, e4) };
      }, function() {
        return a3.handleYearChange(a3.state.date);
      });
    }), ve(ke(a3), "changeMonth", function(e4) {
      a3.setState(function(t6) {
        var r2 = t6.date;
        return { date: setMonth(r2, e4) };
      }, function() {
        return a3.handleMonthChange(a3.state.date);
      });
    }), ve(ke(a3), "changeMonthYear", function(e4) {
      a3.setState(function(t6) {
        var r2 = t6.date;
        return { date: setYear(setMonth(r2, getMonth(e4)), getYear(e4)) };
      }, function() {
        return a3.handleMonthYearChange(a3.state.date);
      });
    }), ve(ke(a3), "header", function() {
      var t6 = Le(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a3.state.date, a3.props.locale, a3.props.calendarStartDay), n3 = [];
      return a3.props.showWeekNumbers && n3.push(import_react103.default.createElement("div", { key: "W", className: "react-datepicker__day-name" }, a3.props.weekLabel || "#")), n3.concat([0, 1, 2, 3, 4, 5, 6].map(function(n4) {
        var o3 = addDays(t6, n4), s3 = a3.formatWeekday(o3, a3.props.locale), i3 = a3.props.weekDayClassName ? a3.props.weekDayClassName(o3) : void 0;
        return import_react103.default.createElement("div", { key: n4, className: (0, import_classnames.default)("react-datepicker__day-name", i3) }, s3);
      }));
    }), ve(ke(a3), "formatWeekday", function(e4, t6) {
      return a3.props.formatWeekDay ? function(e5, t7, r2) {
        return t7(Oe(e5, "EEEE", r2));
      }(e4, a3.props.formatWeekDay, t6) : a3.props.useWeekdaysShort ? function(e5, t7) {
        return Oe(e5, "EEE", t7);
      }(e4, t6) : function(e5, t7) {
        return Oe(e5, "EEEEEE", t7);
      }(e4, t6);
    }), ve(ke(a3), "decreaseYear", function() {
      a3.setState(function(e4) {
        var t6 = e4.date;
        return { date: subYears(t6, a3.props.showYearPicker ? a3.props.yearItemNumber : 1) };
      }, function() {
        return a3.handleYearChange(a3.state.date);
      });
    }), ve(ke(a3), "clearSelectingDate", function() {
      a3.setState({ selectingDate: null });
    }), ve(ke(a3), "renderPreviousButton", function() {
      if (!a3.props.renderCustomHeader) {
        var t6;
        switch (true) {
          case a3.props.showMonthYearPicker:
            t6 = ht(a3.state.date, a3.props);
            break;
          case a3.props.showYearPicker:
            t6 = function(e4) {
              var t7 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = t7.minDate, n4 = t7.yearItemNumber, o4 = void 0 === n4 ? Ne : n4, a4 = wt(Ae2(subYears(e4, o4)), o4).endPeriod, s4 = r3 && getYear(r3);
              return s4 && s4 > a4 || false;
            }(a3.state.date, a3.props);
            break;
          default:
            t6 = dt(a3.state.date, a3.props);
        }
        if ((a3.props.forceShowMonthNavigation || a3.props.showDisabledMonthNavigation || !t6) && !a3.props.showTimeSelectOnly) {
          var r2 = ["react-datepicker__navigation", "react-datepicker__navigation--previous"], n3 = a3.decreaseMonth;
          (a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker || a3.props.showYearPicker) && (n3 = a3.decreaseYear), t6 && a3.props.showDisabledMonthNavigation && (r2.push("react-datepicker__navigation--previous--disabled"), n3 = null);
          var o3 = a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker || a3.props.showYearPicker, s3 = a3.props, i3 = s3.previousMonthButtonLabel, p = s3.previousYearButtonLabel, c2 = a3.props, l2 = c2.previousMonthAriaLabel, d3 = void 0 === l2 ? "string" == typeof i3 ? i3 : "Previous Month" : l2, u2 = c2.previousYearAriaLabel, h3 = void 0 === u2 ? "string" == typeof p ? p : "Previous Year" : u2;
          return import_react103.default.createElement("button", { type: "button", className: r2.join(" "), onClick: n3, onKeyDown: a3.props.handleOnKeyDown, "aria-label": o3 ? h3 : d3 }, import_react103.default.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--previous"].join(" ") }, o3 ? a3.props.previousYearButtonLabel : a3.props.previousMonthButtonLabel));
        }
      }
    }), ve(ke(a3), "increaseYear", function() {
      a3.setState(function(e4) {
        var t6 = e4.date;
        return { date: addYears(t6, a3.props.showYearPicker ? a3.props.yearItemNumber : 1) };
      }, function() {
        return a3.handleYearChange(a3.state.date);
      });
    }), ve(ke(a3), "renderNextButton", function() {
      if (!a3.props.renderCustomHeader) {
        var t6;
        switch (true) {
          case a3.props.showMonthYearPicker:
            t6 = mt(a3.state.date, a3.props);
            break;
          case a3.props.showYearPicker:
            t6 = function(e4) {
              var t7 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = t7.maxDate, n4 = t7.yearItemNumber, o4 = void 0 === n4 ? Ne : n4, a4 = wt(addYears(e4, o4), o4).startPeriod, s4 = r3 && getYear(r3);
              return s4 && s4 < a4 || false;
            }(a3.state.date, a3.props);
            break;
          default:
            t6 = ut(a3.state.date, a3.props);
        }
        if ((a3.props.forceShowMonthNavigation || a3.props.showDisabledMonthNavigation || !t6) && !a3.props.showTimeSelectOnly) {
          var r2 = ["react-datepicker__navigation", "react-datepicker__navigation--next"];
          a3.props.showTimeSelect && r2.push("react-datepicker__navigation--next--with-time"), a3.props.todayButton && r2.push("react-datepicker__navigation--next--with-today-button");
          var n3 = a3.increaseMonth;
          (a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker || a3.props.showYearPicker) && (n3 = a3.increaseYear), t6 && a3.props.showDisabledMonthNavigation && (r2.push("react-datepicker__navigation--next--disabled"), n3 = null);
          var o3 = a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker || a3.props.showYearPicker, s3 = a3.props, i3 = s3.nextMonthButtonLabel, p = s3.nextYearButtonLabel, c2 = a3.props, l2 = c2.nextMonthAriaLabel, d3 = void 0 === l2 ? "string" == typeof i3 ? i3 : "Next Month" : l2, h3 = c2.nextYearAriaLabel, m3 = void 0 === h3 ? "string" == typeof p ? p : "Next Year" : h3;
          return import_react103.default.createElement("button", { type: "button", className: r2.join(" "), onClick: n3, onKeyDown: a3.props.handleOnKeyDown, "aria-label": o3 ? m3 : d3 }, import_react103.default.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--next"].join(" ") }, o3 ? a3.props.nextYearButtonLabel : a3.props.nextMonthButtonLabel));
        }
      }
    }), ve(ke(a3), "renderCurrentMonth", function() {
      var t6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a3.state.date, r2 = ["react-datepicker__current-month"];
      return a3.props.showYearDropdown && r2.push("react-datepicker__current-month--hasYearDropdown"), a3.props.showMonthDropdown && r2.push("react-datepicker__current-month--hasMonthDropdown"), a3.props.showMonthYearDropdown && r2.push("react-datepicker__current-month--hasMonthYearDropdown"), import_react103.default.createElement("div", { className: r2.join(" ") }, Oe(t6, a3.props.dateFormat, a3.props.locale));
    }), ve(ke(a3), "renderYearDropdown", function() {
      var t6 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a3.props.showYearDropdown && !t6)
        return import_react103.default.createElement(St, { adjustDateOnChange: a3.props.adjustDateOnChange, date: a3.state.date, onSelect: a3.props.onSelect, setOpen: a3.props.setOpen, dropdownMode: a3.props.dropdownMode, onChange: a3.changeYear, minDate: a3.props.minDate, maxDate: a3.props.maxDate, year: getYear(a3.state.date), scrollableYearDropdown: a3.props.scrollableYearDropdown, yearDropdownItemNumber: a3.props.yearDropdownItemNumber });
    }), ve(ke(a3), "renderMonthDropdown", function() {
      var t6 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a3.props.showMonthDropdown && !t6)
        return import_react103.default.createElement(_t, { dropdownMode: a3.props.dropdownMode, locale: a3.props.locale, onChange: a3.changeMonth, month: getMonth(a3.state.date), useShortMonthInDropdown: a3.props.useShortMonthInDropdown });
    }), ve(ke(a3), "renderMonthYearDropdown", function() {
      var t6 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
      if (a3.props.showMonthYearDropdown && !t6)
        return import_react103.default.createElement(Nt, { dropdownMode: a3.props.dropdownMode, locale: a3.props.locale, dateFormat: a3.props.dateFormat, onChange: a3.changeMonthYear, minDate: a3.props.minDate, maxDate: a3.props.maxDate, date: a3.state.date, scrollableMonthYearDropdown: a3.props.scrollableMonthYearDropdown });
    }), ve(ke(a3), "handleTodayButtonClick", function(e4) {
      a3.props.onSelect(Be(), e4), a3.props.setPreSelection && a3.props.setPreSelection(Be());
    }), ve(ke(a3), "renderTodayButton", function() {
      if (a3.props.todayButton && !a3.props.showTimeSelectOnly)
        return import_react103.default.createElement("div", { className: "react-datepicker__today-button", onClick: function(e4) {
          return a3.handleTodayButtonClick(e4);
        } }, a3.props.todayButton);
    }), ve(ke(a3), "renderDefaultHeader", function(t6) {
      var r2 = t6.monthDate, n3 = t6.i;
      return import_react103.default.createElement("div", { className: "react-datepicker__header ".concat(a3.props.showTimeSelect ? "react-datepicker__header--has-time-select" : "") }, a3.renderCurrentMonth(r2), import_react103.default.createElement("div", { className: "react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a3.props.dropdownMode), onFocus: a3.handleDropdownFocus }, a3.renderMonthDropdown(0 !== n3), a3.renderMonthYearDropdown(0 !== n3), a3.renderYearDropdown(0 !== n3)), import_react103.default.createElement("div", { className: "react-datepicker__day-names" }, a3.header(r2)));
    }), ve(ke(a3), "renderCustomHeader", function() {
      var t6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r2 = t6.monthDate, n3 = t6.i;
      if (a3.props.showTimeSelect && !a3.state.monthContainer || a3.props.showTimeSelectOnly)
        return null;
      var o3 = dt(a3.state.date, a3.props), s3 = ut(a3.state.date, a3.props), i3 = ht(a3.state.date, a3.props), p = mt(a3.state.date, a3.props), c2 = !a3.props.showMonthYearPicker && !a3.props.showQuarterYearPicker && !a3.props.showYearPicker;
      return import_react103.default.createElement("div", { className: "react-datepicker__header react-datepicker__header--custom", onFocus: a3.props.onDropdownFocus }, a3.props.renderCustomHeader(de(de({}, a3.state), {}, { customHeaderCount: n3, monthDate: r2, changeMonth: a3.changeMonth, changeYear: a3.changeYear, decreaseMonth: a3.decreaseMonth, increaseMonth: a3.increaseMonth, decreaseYear: a3.decreaseYear, increaseYear: a3.increaseYear, prevMonthButtonDisabled: o3, nextMonthButtonDisabled: s3, prevYearButtonDisabled: i3, nextYearButtonDisabled: p })), c2 && import_react103.default.createElement("div", { className: "react-datepicker__day-names" }, a3.header(r2)));
    }), ve(ke(a3), "renderYearHeader", function() {
      var t6 = a3.state.date, r2 = a3.props, n3 = r2.showYearPicker, o3 = wt(t6, r2.yearItemNumber), s3 = o3.startPeriod, i3 = o3.endPeriod;
      return import_react103.default.createElement("div", { className: "react-datepicker__header react-datepicker-year-header" }, n3 ? "".concat(s3, " - ").concat(i3) : getYear(t6));
    }), ve(ke(a3), "renderHeader", function(e4) {
      switch (true) {
        case void 0 !== a3.props.renderCustomHeader:
          return a3.renderCustomHeader(e4);
        case (a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker || a3.props.showYearPicker):
          return a3.renderYearHeader(e4);
        default:
          return a3.renderDefaultHeader(e4);
      }
    }), ve(ke(a3), "renderMonths", function() {
      if (!a3.props.showTimeSelectOnly && !a3.props.showYearPicker) {
        for (var t6 = [], r2 = a3.props.showPreviousMonths ? a3.props.monthsShown - 1 : 0, n3 = subMonths(a3.state.date, r2), o3 = 0; o3 < a3.props.monthsShown; ++o3) {
          var s3 = o3 - a3.props.monthSelectedIn, i3 = addMonths(n3, s3), p = "month-".concat(o3), c2 = o3 < a3.props.monthsShown - 1, d3 = o3 > 0;
          t6.push(import_react103.default.createElement("div", { key: p, ref: function(e4) {
            a3.monthContainer = e4;
          }, className: "react-datepicker__month-container" }, a3.renderHeader({ monthDate: i3, i: o3 }), import_react103.default.createElement(At, { chooseDayAriaLabelPrefix: a3.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: a3.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: a3.props.weekAriaLabelPrefix, ariaLabelPrefix: a3.props.monthAriaLabelPrefix, onChange: a3.changeMonthYear, day: i3, dayClassName: a3.props.dayClassName, calendarStartDay: a3.props.calendarStartDay, monthClassName: a3.props.monthClassName, onDayClick: a3.handleDayClick, handleOnKeyDown: a3.props.handleOnDayKeyDown, onDayMouseEnter: a3.handleDayMouseEnter, onMouseLeave: a3.handleMonthMouseLeave, onWeekSelect: a3.props.onWeekSelect, orderInDisplay: o3, formatWeekNumber: a3.props.formatWeekNumber, locale: a3.props.locale, minDate: a3.props.minDate, maxDate: a3.props.maxDate, excludeDates: a3.props.excludeDates, excludeDateIntervals: a3.props.excludeDateIntervals, highlightDates: a3.props.highlightDates, selectingDate: a3.state.selectingDate, includeDates: a3.props.includeDates, includeDateIntervals: a3.props.includeDateIntervals, inline: a3.props.inline, shouldFocusDayInline: a3.props.shouldFocusDayInline, fixedHeight: a3.props.fixedHeight, filterDate: a3.props.filterDate, preSelection: a3.props.preSelection, setPreSelection: a3.props.setPreSelection, selected: a3.props.selected, selectsStart: a3.props.selectsStart, selectsEnd: a3.props.selectsEnd, selectsRange: a3.props.selectsRange, selectsDisabledDaysInRange: a3.props.selectsDisabledDaysInRange, showWeekNumbers: a3.props.showWeekNumbers, startDate: a3.props.startDate, endDate: a3.props.endDate, peekNextMonth: a3.props.peekNextMonth, setOpen: a3.props.setOpen, shouldCloseOnSelect: a3.props.shouldCloseOnSelect, renderDayContents: a3.props.renderDayContents, renderMonthContent: a3.props.renderMonthContent, renderQuarterContent: a3.props.renderQuarterContent, renderYearContent: a3.props.renderYearContent, disabledKeyboardNavigation: a3.props.disabledKeyboardNavigation, showMonthYearPicker: a3.props.showMonthYearPicker, showFullMonthYearPicker: a3.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: a3.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: a3.props.showFourColumnMonthYearPicker, showYearPicker: a3.props.showYearPicker, showQuarterYearPicker: a3.props.showQuarterYearPicker, isInputFocused: a3.props.isInputFocused, containerRef: a3.containerRef, monthShowsDuplicateDaysEnd: c2, monthShowsDuplicateDaysStart: d3 })));
        }
        return t6;
      }
    }), ve(ke(a3), "renderYears", function() {
      if (!a3.props.showTimeSelectOnly)
        return a3.props.showYearPicker ? import_react103.default.createElement("div", { className: "react-datepicker__year--container" }, a3.renderHeader(), import_react103.default.createElement(Bt, ye({ onDayClick: a3.handleDayClick, selectingDate: a3.state.selectingDate, clearSelectingDate: a3.clearSelectingDate, date: a3.state.date }, a3.props, { onYearMouseEnter: a3.handleYearMouseEnter, onYearMouseLeave: a3.handleYearMouseLeave }))) : void 0;
    }), ve(ke(a3), "renderTimeSection", function() {
      if (a3.props.showTimeSelect && (a3.state.monthContainer || a3.props.showTimeSelectOnly))
        return import_react103.default.createElement(Kt, { selected: a3.props.selected, openToDate: a3.props.openToDate, onChange: a3.props.onTimeChange, timeClassName: a3.props.timeClassName, format: a3.props.timeFormat, includeTimes: a3.props.includeTimes, intervals: a3.props.timeIntervals, minTime: a3.props.minTime, maxTime: a3.props.maxTime, excludeTimes: a3.props.excludeTimes, filterTime: a3.props.filterTime, timeCaption: a3.props.timeCaption, todayButton: a3.props.todayButton, showMonthDropdown: a3.props.showMonthDropdown, showMonthYearDropdown: a3.props.showMonthYearDropdown, showYearDropdown: a3.props.showYearDropdown, withPortal: a3.props.withPortal, monthRef: a3.state.monthContainer, injectTimes: a3.props.injectTimes, locale: a3.props.locale, handleOnKeyDown: a3.props.handleOnKeyDown, showTimeSelectOnly: a3.props.showTimeSelectOnly });
    }), ve(ke(a3), "renderInputTimeSection", function() {
      var t6 = new Date(a3.props.selected), r2 = Ie(t6) && Boolean(a3.props.selected) ? "".concat(gt(t6.getHours()), ":").concat(gt(t6.getMinutes())) : "";
      if (a3.props.showTimeInput)
        return import_react103.default.createElement(Qt, { date: t6, timeString: r2, timeInputLabel: a3.props.timeInputLabel, onChange: a3.props.onTimeChange, customTimeInput: a3.props.customTimeInput });
    }), ve(ke(a3), "renderAriaLiveRegion", function() {
      var t6, r2 = wt(a3.state.date, a3.props.yearItemNumber), n3 = r2.startPeriod, o3 = r2.endPeriod;
      return t6 = a3.props.showYearPicker ? "".concat(n3, " - ").concat(o3) : a3.props.showMonthYearPicker || a3.props.showQuarterYearPicker ? getYear(a3.state.date) : "".concat(Je(getMonth(a3.state.date), a3.props.locale), " ").concat(getYear(a3.state.date)), import_react103.default.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, a3.state.isRenderAriaLiveMessage && t6);
    }), ve(ke(a3), "renderChildren", function() {
      if (a3.props.children)
        return import_react103.default.createElement("div", { className: "react-datepicker__children-container" }, a3.props.children);
    }), a3.containerRef = import_react103.default.createRef(), a3.state = { date: a3.getDateInView(), selectingDate: null, monthContainer: null, isRenderAriaLiveMessage: false }, a3;
  }
  return fe(o2, [{ key: "componentDidMount", value: function() {
    var e4 = this;
    this.props.showTimeSelect && (this.assignMonthContainer = void e4.setState({ monthContainer: e4.monthContainer }));
  } }, { key: "componentDidUpdate", value: function(e4) {
    var t5 = this;
    if (!this.props.preSelection || He(this.props.preSelection, e4.preSelection) && this.props.monthSelectedIn === e4.monthSelectedIn)
      this.props.openToDate && !He(this.props.openToDate, e4.openToDate) && this.setState({ date: this.props.openToDate });
    else {
      var r2 = !We2(this.state.date, this.props.preSelection);
      this.setState({ date: this.props.preSelection }, function() {
        return r2 && t5.handleCustomMonthChange(t5.state.date);
      });
    }
  } }, { key: "render", value: function() {
    var t5 = this.props.container || Wt;
    return import_react103.default.createElement("div", { ref: this.containerRef }, import_react103.default.createElement(t5, { className: (0, import_classnames.default)("react-datepicker", this.props.className, { "react-datepicker--time-only": this.props.showTimeSelectOnly }), showPopperArrow: this.props.showPopperArrow, arrowProps: this.props.arrowProps }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren()));
  } }], [{ key: "defaultProps", get: function() {
    return { onDropdownFocus: function() {
    }, monthsShown: 1, monthSelectedIn: 0, forceShowMonthNavigation: false, timeCaption: "Time", previousYearButtonLabel: "Previous Year", nextYearButtonLabel: "Next Year", previousMonthButtonLabel: "Previous Month", nextMonthButtonLabel: "Next Month", customTimeInput: null, yearItemNumber: Ne };
  } }]), o2;
}();
var Vt = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2(e4) {
    var t5;
    return he(this, n2), (t5 = r2.call(this, e4)).el = document.createElement("div"), t5;
  }
  return fe(n2, [{ key: "componentDidMount", value: function() {
    this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId), this.portalRoot || (this.portalRoot = document.createElement("div"), this.portalRoot.setAttribute("id", this.props.portalId), (this.props.portalHost || document.body).appendChild(this.portalRoot)), this.portalRoot.appendChild(this.el);
  } }, { key: "componentWillUnmount", value: function() {
    this.portalRoot.removeChild(this.el);
  } }, { key: "render", value: function() {
    return import_react_dom3.default.createPortal(this.props.children, this.el);
  } }]), n2;
}();
var qt = function(e4) {
  return !e4.disabled && -1 !== e4.tabIndex;
};
var Ut = function(t4) {
  De(n2, import_react103.default.Component);
  var r2 = be(n2);
  function n2(t5) {
    var o2;
    return he(this, n2), ve(ke(o2 = r2.call(this, t5)), "getTabChildren", function() {
      return Array.prototype.slice.call(o2.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"), 1, -1).filter(qt);
    }), ve(ke(o2), "handleFocusStart", function() {
      var e4 = o2.getTabChildren();
      e4 && e4.length > 1 && e4[e4.length - 1].focus();
    }), ve(ke(o2), "handleFocusEnd", function() {
      var e4 = o2.getTabChildren();
      e4 && e4.length > 1 && e4[0].focus();
    }), o2.tabLoopRef = import_react103.default.createRef(), o2;
  }
  return fe(n2, [{ key: "render", value: function() {
    return this.props.enableTabLoop ? import_react103.default.createElement("div", { className: "react-datepicker__tab-loop", ref: this.tabLoopRef }, import_react103.default.createElement("div", { className: "react-datepicker__tab-loop__start", tabIndex: "0", onFocus: this.handleFocusStart }), this.props.children, import_react103.default.createElement("div", { className: "react-datepicker__tab-loop__end", tabIndex: "0", onFocus: this.handleFocusEnd })) : this.props.children;
  } }], [{ key: "defaultProps", get: function() {
    return { enableTabLoop: true };
  } }]), n2;
}();
var zt = function(t4) {
  De(o2, import_react103.default.Component);
  var n2 = be(o2);
  function o2() {
    return he(this, o2), n2.apply(this, arguments);
  }
  return fe(o2, [{ key: "render", value: function() {
    var t5, n3 = this.props, o3 = n3.className, a3 = n3.wrapperClassName, s3 = n3.hidePopper, i3 = n3.popperComponent, p = n3.popperModifiers, c2 = n3.popperPlacement, l2 = n3.popperProps, d3 = n3.targetComponent, u2 = n3.enableTabLoop, h3 = n3.popperOnKeyDown, m3 = n3.portalId, f = n3.portalHost;
    if (!s3) {
      var v = (0, import_classnames.default)("react-datepicker-popper", o3);
      t5 = import_react103.default.createElement(Popper, ye({ modifiers: p, placement: c2 }, l2), function(t6) {
        var r2 = t6.ref, n4 = t6.style, o4 = t6.placement, a4 = t6.arrowProps;
        return import_react103.default.createElement(Ut, { enableTabLoop: u2 }, import_react103.default.createElement("div", { ref: r2, style: n4, className: v, "data-placement": o4, onKeyDown: h3 }, import_react103.default.cloneElement(i3, { arrowProps: a4 })));
      });
    }
    this.props.popperContainer && (t5 = import_react103.default.createElement(this.props.popperContainer, {}, t5)), m3 && !s3 && (t5 = import_react103.default.createElement(Vt, { portalId: m3, portalHost: f }, t5));
    var y3 = (0, import_classnames.default)("react-datepicker-wrapper", a3);
    return import_react103.default.createElement(Manager, { className: "react-datepicker-manager" }, import_react103.default.createElement(Reference, null, function(t6) {
      var r2 = t6.ref;
      return import_react103.default.createElement("div", { ref: r2, className: y3 }, d3);
    }), t5);
  } }], [{ key: "defaultProps", get: function() {
    return { hidePopper: true, popperModifiers: [], popperProps: {}, popperPlacement: "bottom-start" };
  } }]), o2;
}();
var $t = "react-datepicker-ignore-onclickoutside";
var Gt = react_onclickoutside_es_default(Ht);
var Jt = "Date input not valid.";
var Xt = function(t4) {
  De(a3, import_react103.default.Component);
  var o2 = be(a3);
  function a3(t5) {
    var s3;
    return he(this, a3), ve(ke(s3 = o2.call(this, t5)), "getPreSelection", function() {
      return s3.props.openToDate ? s3.props.openToDate : s3.props.selectsEnd && s3.props.startDate ? s3.props.startDate : s3.props.selectsStart && s3.props.endDate ? s3.props.endDate : Ye();
    }), ve(ke(s3), "calcInitialState", function() {
      var e4, t6 = s3.getPreSelection(), r2 = ft(s3.props), n2 = vt(s3.props), o3 = r2 && isBefore(t6, startOfDay(r2)) ? r2 : n2 && isAfter(t6, endOfDay(n2)) ? n2 : t6;
      return { open: s3.props.startOpen || false, preventFocus: false, preSelection: null !== (e4 = s3.props.selectsRange ? s3.props.startDate : s3.props.selected) && void 0 !== e4 ? e4 : o3, highlightDates: yt(s3.props.highlightDates), focused: false, shouldFocusDayInline: false, isRenderAriaLiveMessage: false };
    }), ve(ke(s3), "clearPreventFocusTimeout", function() {
      s3.preventFocusTimeout && clearTimeout(s3.preventFocusTimeout);
    }), ve(ke(s3), "setFocus", function() {
      s3.input && s3.input.focus && s3.input.focus({ preventScroll: true });
    }), ve(ke(s3), "setBlur", function() {
      s3.input && s3.input.blur && s3.input.blur(), s3.cancelFocusInput();
    }), ve(ke(s3), "setOpen", function(e4) {
      var t6 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      s3.setState({ open: e4, preSelection: e4 && s3.state.open ? s3.state.preSelection : s3.calcInitialState().preSelection, lastPreSelectChange: er }, function() {
        e4 || s3.setState(function(e5) {
          return { focused: !!t6 && e5.focused };
        }, function() {
          !t6 && s3.setBlur(), s3.setState({ inputValue: null });
        });
      });
    }), ve(ke(s3), "inputOk", function() {
      return isDate(s3.state.preSelection);
    }), ve(ke(s3), "isCalendarOpen", function() {
      return void 0 === s3.props.open ? s3.state.open && !s3.props.disabled && !s3.props.readOnly : s3.props.open;
    }), ve(ke(s3), "handleFocus", function(e4) {
      s3.state.preventFocus || (s3.props.onFocus(e4), s3.props.preventOpenOnFocus || s3.props.readOnly || s3.setOpen(true)), s3.setState({ focused: true });
    }), ve(ke(s3), "cancelFocusInput", function() {
      clearTimeout(s3.inputFocusTimeout), s3.inputFocusTimeout = null;
    }), ve(ke(s3), "deferFocusInput", function() {
      s3.cancelFocusInput(), s3.inputFocusTimeout = setTimeout(function() {
        return s3.setFocus();
      }, 1);
    }), ve(ke(s3), "handleDropdownFocus", function() {
      s3.cancelFocusInput();
    }), ve(ke(s3), "handleBlur", function(e4) {
      (!s3.state.open || s3.props.withPortal || s3.props.showTimeInput) && s3.props.onBlur(e4), s3.setState({ focused: false });
    }), ve(ke(s3), "handleCalendarClickOutside", function(e4) {
      s3.props.inline || s3.setOpen(false), s3.props.onClickOutside(e4), s3.props.withPortal && e4.preventDefault();
    }), ve(ke(s3), "handleChange", function() {
      for (var e4 = arguments.length, t6 = new Array(e4), r2 = 0; r2 < e4; r2++)
        t6[r2] = arguments[r2];
      var n2 = t6[0];
      if (!s3.props.onChangeRaw || (s3.props.onChangeRaw.apply(ke(s3), t6), "function" == typeof n2.isDefaultPrevented && !n2.isDefaultPrevented())) {
        s3.setState({ inputValue: n2.target.value, lastPreSelectChange: Zt });
        var o3, a4, i3, p, c2, l2, d3, u2, h3 = (o3 = n2.target.value, a4 = s3.props.dateFormat, i3 = s3.props.locale, p = s3.props.strictParsing, c2 = s3.props.minDate, l2 = null, d3 = Ge(i3) || Ge($e2()), u2 = true, Array.isArray(a4) ? (a4.forEach(function(e5) {
          var t7 = parse(o3, e5, /* @__PURE__ */ new Date(), { locale: d3 });
          p && (u2 = Ie(t7, c2) && o3 === Oe(t7, e5, i3)), Ie(t7, c2) && u2 && (l2 = t7);
        }), l2) : (l2 = parse(o3, a4, /* @__PURE__ */ new Date(), { locale: d3 }), p ? u2 = Ie(l2) && o3 === Oe(l2, a4, i3) : Ie(l2) || (a4 = a4.match(xe).map(function(e5) {
          var t7 = e5[0];
          return "p" === t7 || "P" === t7 ? d3 ? (0, Pe[t7])(e5, d3.formatLong) : t7 : e5;
        }).join(""), o3.length > 0 && (l2 = parse(o3, a4.slice(0, o3.length), /* @__PURE__ */ new Date())), Ie(l2) || (l2 = new Date(o3))), Ie(l2) && u2 ? l2 : null));
        s3.props.showTimeSelectOnly && s3.props.selected && !He(h3, s3.props.selected) && (h3 = set(s3.props.selected, null == h3 ? { hours: getHours(s3.props.selected), minutes: getMinutes(s3.props.selected), seconds: getSeconds(s3.props.selected) } : { hours: getHours(h3), minutes: getMinutes(h3), seconds: getSeconds(h3) })), !h3 && n2.target.value || s3.setSelected(h3, n2, true);
      }
    }), ve(ke(s3), "handleSelect", function(e4, t6, r2) {
      if (s3.setState({ preventFocus: true }, function() {
        return s3.preventFocusTimeout = setTimeout(function() {
          return s3.setState({ preventFocus: false });
        }, 50), s3.preventFocusTimeout;
      }), s3.props.onChangeRaw && s3.props.onChangeRaw(t6), s3.setSelected(e4, t6, false, r2), s3.props.showDateSelect && s3.setState({ isRenderAriaLiveMessage: true }), !s3.props.shouldCloseOnSelect || s3.props.showTimeSelect)
        s3.setPreSelection(e4);
      else if (!s3.props.inline) {
        s3.props.selectsRange || s3.setOpen(false);
        var n2 = s3.props, o3 = n2.startDate, a4 = n2.endDate;
        !o3 || a4 || isBefore(e4, o3) || s3.setOpen(false);
      }
    }), ve(ke(s3), "setSelected", function(e4, t6, r2, n2) {
      var o3 = e4;
      if (s3.props.showYearPicker) {
        if (null !== o3 && at(getYear(o3), s3.props))
          return;
      } else if (s3.props.showMonthYearPicker) {
        if (null !== o3 && tt(o3, s3.props))
          return;
      } else if (null !== o3 && Ze(o3, s3.props))
        return;
      var a4 = s3.props, i3 = a4.onChange, p = a4.selectsRange, c2 = a4.startDate, l2 = a4.endDate;
      if (!Ve(s3.props.selected, o3) || s3.props.allowSameDay || p)
        if (null !== o3 && (!s3.props.selected || r2 && (s3.props.showTimeSelect || s3.props.showTimeSelectOnly || s3.props.showTimeInput) || (o3 = Re(o3, { hour: getHours(s3.props.selected), minute: getMinutes(s3.props.selected), second: getSeconds(s3.props.selected) })), s3.props.inline || s3.setState({ preSelection: o3 }), s3.props.focusSelectedMonth || s3.setState({ monthSelectedIn: n2 })), p) {
          var d3 = c2 && !l2, u2 = c2 && l2;
          !c2 && !l2 ? i3([o3, null], t6) : d3 && (isBefore(o3, c2) ? i3([o3, null], t6) : i3([c2, o3], t6)), u2 && i3([o3, null], t6);
        } else
          i3(o3, t6);
      r2 || (s3.props.onSelect(o3, t6), s3.setState({ inputValue: null }));
    }), ve(ke(s3), "setPreSelection", function(e4) {
      var t6 = void 0 !== s3.props.minDate, r2 = void 0 !== s3.props.maxDate, n2 = true;
      if (e4) {
        var o3 = startOfDay(e4);
        if (t6 && r2)
          n2 = qe(e4, s3.props.minDate, s3.props.maxDate);
        else if (t6) {
          var a4 = startOfDay(s3.props.minDate);
          n2 = isAfter(e4, a4) || Ve(o3, a4);
        } else if (r2) {
          var i3 = endOfDay(s3.props.maxDate);
          n2 = isBefore(e4, i3) || Ve(o3, i3);
        }
      }
      n2 && s3.setState({ preSelection: e4 });
    }), ve(ke(s3), "handleTimeChange", function(e4) {
      var t6 = Re(s3.props.selected ? s3.props.selected : s3.getPreSelection(), { hour: getHours(e4), minute: getMinutes(e4) });
      s3.setState({ preSelection: t6 }), s3.props.onChange(t6), s3.props.shouldCloseOnSelect && s3.setOpen(false), s3.props.showTimeInput && s3.setOpen(true), (s3.props.showTimeSelectOnly || s3.props.showTimeSelect) && s3.setState({ isRenderAriaLiveMessage: true }), s3.setState({ inputValue: null });
    }), ve(ke(s3), "onInputClick", function() {
      s3.props.disabled || s3.props.readOnly || s3.setOpen(true), s3.props.onInputClick();
    }), ve(ke(s3), "onInputKeyDown", function(e4) {
      s3.props.onKeyDown(e4);
      var t6 = e4.key;
      if (s3.state.open || s3.props.inline || s3.props.preventOpenOnFocus) {
        if (s3.state.open) {
          if ("ArrowDown" === t6 || "ArrowUp" === t6) {
            e4.preventDefault();
            var r2 = s3.calendar.componentNode && s3.calendar.componentNode.querySelector('.react-datepicker__day[tabindex="0"]');
            return void (r2 && r2.focus({ preventScroll: true }));
          }
          var n2 = Ye(s3.state.preSelection);
          "Enter" === t6 ? (e4.preventDefault(), s3.inputOk() && s3.state.lastPreSelectChange === er ? (s3.handleSelect(n2, e4), !s3.props.shouldCloseOnSelect && s3.setPreSelection(n2)) : s3.setOpen(false)) : "Escape" === t6 ? (e4.preventDefault(), s3.setOpen(false)) : "Tab" === t6 && e4.shiftKey && s3.setOpen(false), s3.inputOk() || s3.props.onInputError({ code: 1, msg: Jt });
        }
      } else
        "ArrowDown" !== t6 && "ArrowUp" !== t6 && "Enter" !== t6 || s3.onInputClick();
    }), ve(ke(s3), "onPortalKeyDown", function(e4) {
      "Escape" === e4.key && (e4.preventDefault(), s3.setState({ preventFocus: true }, function() {
        s3.setOpen(false), setTimeout(function() {
          s3.setFocus(), s3.setState({ preventFocus: false });
        });
      }));
    }), ve(ke(s3), "onDayKeyDown", function(e4) {
      s3.props.onKeyDown(e4);
      var t6 = e4.key, r2 = Ye(s3.state.preSelection);
      if ("Enter" === t6)
        e4.preventDefault(), s3.handleSelect(r2, e4), !s3.props.shouldCloseOnSelect && s3.setPreSelection(r2);
      else if ("Escape" === t6)
        e4.preventDefault(), s3.setOpen(false), s3.inputOk() || s3.props.onInputError({ code: 1, msg: Jt });
      else if (!s3.props.disabledKeyboardNavigation) {
        var n2;
        switch (t6) {
          case "ArrowLeft":
            n2 = subDays(r2, 1);
            break;
          case "ArrowRight":
            n2 = addDays(r2, 1);
            break;
          case "ArrowUp":
            n2 = subWeeks(r2, 1);
            break;
          case "ArrowDown":
            n2 = addWeeks(r2, 1);
            break;
          case "PageUp":
            n2 = subMonths(r2, 1);
            break;
          case "PageDown":
            n2 = addMonths(r2, 1);
            break;
          case "Home":
            n2 = subYears(r2, 1);
            break;
          case "End":
            n2 = addYears(r2, 1);
        }
        if (!n2)
          return void (s3.props.onInputError && s3.props.onInputError({ code: 1, msg: Jt }));
        if (e4.preventDefault(), s3.setState({ lastPreSelectChange: er }), s3.props.adjustDateOnChange && s3.setSelected(n2), s3.setPreSelection(n2), s3.props.inline) {
          var o3 = getMonth(r2), a4 = getMonth(n2), i3 = getYear(r2), d3 = getYear(n2);
          o3 !== a4 || i3 !== d3 ? s3.setState({ shouldFocusDayInline: true }) : s3.setState({ shouldFocusDayInline: false });
        }
      }
    }), ve(ke(s3), "onPopperKeyDown", function(e4) {
      "Escape" === e4.key && (e4.preventDefault(), s3.setState({ preventFocus: true }, function() {
        s3.setOpen(false), setTimeout(function() {
          s3.setFocus(), s3.setState({ preventFocus: false });
        });
      }));
    }), ve(ke(s3), "onClearClick", function(e4) {
      e4 && e4.preventDefault && e4.preventDefault(), s3.props.selectsRange ? s3.props.onChange([null, null], e4) : s3.props.onChange(null, e4), s3.setState({ inputValue: null });
    }), ve(ke(s3), "clear", function() {
      s3.onClearClick();
    }), ve(ke(s3), "onScroll", function(e4) {
      "boolean" == typeof s3.props.closeOnScroll && s3.props.closeOnScroll ? e4.target !== document && e4.target !== document.documentElement && e4.target !== document.body || s3.setOpen(false) : "function" == typeof s3.props.closeOnScroll && s3.props.closeOnScroll(e4) && s3.setOpen(false);
    }), ve(ke(s3), "renderCalendar", function() {
      return s3.props.inline || s3.isCalendarOpen() ? import_react103.default.createElement(Gt, { ref: function(e4) {
        s3.calendar = e4;
      }, locale: s3.props.locale, calendarStartDay: s3.props.calendarStartDay, chooseDayAriaLabelPrefix: s3.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: s3.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: s3.props.weekAriaLabelPrefix, monthAriaLabelPrefix: s3.props.monthAriaLabelPrefix, adjustDateOnChange: s3.props.adjustDateOnChange, setOpen: s3.setOpen, shouldCloseOnSelect: s3.props.shouldCloseOnSelect, dateFormat: s3.props.dateFormatCalendar, useWeekdaysShort: s3.props.useWeekdaysShort, formatWeekDay: s3.props.formatWeekDay, dropdownMode: s3.props.dropdownMode, selected: s3.props.selected, preSelection: s3.state.preSelection, onSelect: s3.handleSelect, onWeekSelect: s3.props.onWeekSelect, openToDate: s3.props.openToDate, minDate: s3.props.minDate, maxDate: s3.props.maxDate, selectsStart: s3.props.selectsStart, selectsEnd: s3.props.selectsEnd, selectsRange: s3.props.selectsRange, startDate: s3.props.startDate, endDate: s3.props.endDate, excludeDates: s3.props.excludeDates, excludeDateIntervals: s3.props.excludeDateIntervals, filterDate: s3.props.filterDate, onClickOutside: s3.handleCalendarClickOutside, formatWeekNumber: s3.props.formatWeekNumber, highlightDates: s3.state.highlightDates, includeDates: s3.props.includeDates, includeDateIntervals: s3.props.includeDateIntervals, includeTimes: s3.props.includeTimes, injectTimes: s3.props.injectTimes, inline: s3.props.inline, shouldFocusDayInline: s3.state.shouldFocusDayInline, peekNextMonth: s3.props.peekNextMonth, showMonthDropdown: s3.props.showMonthDropdown, showPreviousMonths: s3.props.showPreviousMonths, useShortMonthInDropdown: s3.props.useShortMonthInDropdown, showMonthYearDropdown: s3.props.showMonthYearDropdown, showWeekNumbers: s3.props.showWeekNumbers, showYearDropdown: s3.props.showYearDropdown, withPortal: s3.props.withPortal, forceShowMonthNavigation: s3.props.forceShowMonthNavigation, showDisabledMonthNavigation: s3.props.showDisabledMonthNavigation, scrollableYearDropdown: s3.props.scrollableYearDropdown, scrollableMonthYearDropdown: s3.props.scrollableMonthYearDropdown, todayButton: s3.props.todayButton, weekLabel: s3.props.weekLabel, outsideClickIgnoreClass: $t, fixedHeight: s3.props.fixedHeight, monthsShown: s3.props.monthsShown, monthSelectedIn: s3.state.monthSelectedIn, onDropdownFocus: s3.handleDropdownFocus, onMonthChange: s3.props.onMonthChange, onYearChange: s3.props.onYearChange, dayClassName: s3.props.dayClassName, weekDayClassName: s3.props.weekDayClassName, monthClassName: s3.props.monthClassName, timeClassName: s3.props.timeClassName, showDateSelect: s3.props.showDateSelect, showTimeSelect: s3.props.showTimeSelect, showTimeSelectOnly: s3.props.showTimeSelectOnly, onTimeChange: s3.handleTimeChange, timeFormat: s3.props.timeFormat, timeIntervals: s3.props.timeIntervals, minTime: s3.props.minTime, maxTime: s3.props.maxTime, excludeTimes: s3.props.excludeTimes, filterTime: s3.props.filterTime, timeCaption: s3.props.timeCaption, className: s3.props.calendarClassName, container: s3.props.calendarContainer, yearItemNumber: s3.props.yearItemNumber, yearDropdownItemNumber: s3.props.yearDropdownItemNumber, previousMonthAriaLabel: s3.props.previousMonthAriaLabel, previousMonthButtonLabel: s3.props.previousMonthButtonLabel, nextMonthAriaLabel: s3.props.nextMonthAriaLabel, nextMonthButtonLabel: s3.props.nextMonthButtonLabel, previousYearAriaLabel: s3.props.previousYearAriaLabel, previousYearButtonLabel: s3.props.previousYearButtonLabel, nextYearAriaLabel: s3.props.nextYearAriaLabel, nextYearButtonLabel: s3.props.nextYearButtonLabel, timeInputLabel: s3.props.timeInputLabel, disabledKeyboardNavigation: s3.props.disabledKeyboardNavigation, renderCustomHeader: s3.props.renderCustomHeader, popperProps: s3.props.popperProps, renderDayContents: s3.props.renderDayContents, renderMonthContent: s3.props.renderMonthContent, renderQuarterContent: s3.props.renderQuarterContent, renderYearContent: s3.props.renderYearContent, onDayMouseEnter: s3.props.onDayMouseEnter, onMonthMouseLeave: s3.props.onMonthMouseLeave, onYearMouseEnter: s3.props.onYearMouseEnter, onYearMouseLeave: s3.props.onYearMouseLeave, selectsDisabledDaysInRange: s3.props.selectsDisabledDaysInRange, showTimeInput: s3.props.showTimeInput, showMonthYearPicker: s3.props.showMonthYearPicker, showFullMonthYearPicker: s3.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: s3.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: s3.props.showFourColumnMonthYearPicker, showYearPicker: s3.props.showYearPicker, showQuarterYearPicker: s3.props.showQuarterYearPicker, showPopperArrow: s3.props.showPopperArrow, excludeScrollbar: s3.props.excludeScrollbar, handleOnKeyDown: s3.props.onKeyDown, handleOnDayKeyDown: s3.onDayKeyDown, isInputFocused: s3.state.focused, customTimeInput: s3.props.customTimeInput, setPreSelection: s3.setPreSelection }, s3.props.children) : null;
    }), ve(ke(s3), "renderAriaLiveRegion", function() {
      var t6, r2 = s3.props, n2 = r2.dateFormat, o3 = r2.locale, a4 = s3.props.showTimeInput || s3.props.showTimeSelect ? "PPPPp" : "PPPP";
      return t6 = s3.props.selectsRange ? "Selected start date: ".concat(Te(s3.props.startDate, { dateFormat: a4, locale: o3 }), ". ").concat(s3.props.endDate ? "End date: " + Te(s3.props.endDate, { dateFormat: a4, locale: o3 }) : "") : s3.props.showTimeSelectOnly ? "Selected time: ".concat(Te(s3.props.selected, { dateFormat: n2, locale: o3 })) : s3.props.showYearPicker ? "Selected year: ".concat(Te(s3.props.selected, { dateFormat: "yyyy", locale: o3 })) : s3.props.showMonthYearPicker ? "Selected month: ".concat(Te(s3.props.selected, { dateFormat: "MMMM yyyy", locale: o3 })) : s3.props.showQuarterYearPicker ? "Selected quarter: ".concat(Te(s3.props.selected, { dateFormat: "yyyy, QQQ", locale: o3 })) : "Selected date: ".concat(Te(s3.props.selected, { dateFormat: a4, locale: o3 })), import_react103.default.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, t6);
    }), ve(ke(s3), "renderDateInput", function() {
      var t6, n2 = (0, import_classnames.default)(s3.props.className, ve({}, $t, s3.state.open)), o3 = s3.props.customInput || import_react103.default.createElement("input", { type: "text" }), a4 = s3.props.customInputRef || "ref", i3 = "string" == typeof s3.props.value ? s3.props.value : "string" == typeof s3.state.inputValue ? s3.state.inputValue : s3.props.selectsRange ? function(e4, t7, r2) {
        if (!e4)
          return "";
        var n3 = Te(e4, r2), o4 = t7 ? Te(t7, r2) : "";
        return "".concat(n3, " - ").concat(o4);
      }(s3.props.startDate, s3.props.endDate, s3.props) : Te(s3.props.selected, s3.props);
      return import_react103.default.cloneElement(o3, (ve(t6 = {}, a4, function(e4) {
        s3.input = e4;
      }), ve(t6, "value", i3), ve(t6, "onBlur", s3.handleBlur), ve(t6, "onChange", s3.handleChange), ve(t6, "onClick", s3.onInputClick), ve(t6, "onFocus", s3.handleFocus), ve(t6, "onKeyDown", s3.onInputKeyDown), ve(t6, "id", s3.props.id), ve(t6, "name", s3.props.name), ve(t6, "form", s3.props.form), ve(t6, "autoFocus", s3.props.autoFocus), ve(t6, "placeholder", s3.props.placeholderText), ve(t6, "disabled", s3.props.disabled), ve(t6, "autoComplete", s3.props.autoComplete), ve(t6, "className", (0, import_classnames.default)(o3.props.className, n2)), ve(t6, "title", s3.props.title), ve(t6, "readOnly", s3.props.readOnly), ve(t6, "required", s3.props.required), ve(t6, "tabIndex", s3.props.tabIndex), ve(t6, "aria-describedby", s3.props.ariaDescribedBy), ve(t6, "aria-invalid", s3.props.ariaInvalid), ve(t6, "aria-labelledby", s3.props.ariaLabelledBy), ve(t6, "aria-required", s3.props.ariaRequired), t6));
    }), ve(ke(s3), "renderClearButton", function() {
      var t6 = s3.props, r2 = t6.isClearable, n2 = t6.selected, o3 = t6.startDate, a4 = t6.endDate, i3 = t6.clearButtonTitle, p = t6.clearButtonClassName, c2 = void 0 === p ? "" : p, l2 = t6.ariaLabelClose, d3 = void 0 === l2 ? "Close" : l2;
      return !r2 || null == n2 && null == o3 && null == a4 ? null : import_react103.default.createElement("button", { type: "button", className: "react-datepicker__close-icon ".concat(c2).trim(), "aria-label": d3, onClick: s3.onClearClick, title: i3, tabIndex: -1 });
    }), s3.state = s3.calcInitialState(), s3;
  }
  return fe(a3, [{ key: "componentDidMount", value: function() {
    window.addEventListener("scroll", this.onScroll, true);
  } }, { key: "componentDidUpdate", value: function(e4, t5) {
    var r2, n2;
    e4.inline && (r2 = e4.selected, n2 = this.props.selected, r2 && n2 ? getMonth(r2) !== getMonth(n2) || getYear(r2) !== getYear(n2) : r2 !== n2) && this.setPreSelection(this.props.selected), void 0 !== this.state.monthSelectedIn && e4.monthsShown !== this.props.monthsShown && this.setState({ monthSelectedIn: 0 }), e4.highlightDates !== this.props.highlightDates && this.setState({ highlightDates: yt(this.props.highlightDates) }), t5.focused || Ve(e4.selected, this.props.selected) || this.setState({ inputValue: null }), t5.open !== this.state.open && (false === t5.open && true === this.state.open && this.props.onCalendarOpen(), true === t5.open && false === this.state.open && this.props.onCalendarClose());
  } }, { key: "componentWillUnmount", value: function() {
    this.clearPreventFocusTimeout(), window.removeEventListener("scroll", this.onScroll, true);
  } }, { key: "renderInputContainer", value: function() {
    var t5 = this.props.showIcon;
    return import_react103.default.createElement("div", { className: "react-datepicker__input-container".concat(t5 ? " react-datepicker__view-calendar-icon" : "") }, t5 && import_react103.default.createElement("svg", { className: "react-datepicker__calendar-icon", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, import_react103.default.createElement("path", { d: "M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z" })), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton());
  } }, { key: "render", value: function() {
    var t5 = this.renderCalendar();
    if (this.props.inline)
      return t5;
    if (this.props.withPortal) {
      var r2 = this.state.open ? import_react103.default.createElement(Ut, { enableTabLoop: this.props.enableTabLoop }, import_react103.default.createElement("div", { className: "react-datepicker__portal", tabIndex: -1, onKeyDown: this.onPortalKeyDown }, t5)) : null;
      return this.state.open && this.props.portalId && (r2 = import_react103.default.createElement(Vt, { portalId: this.props.portalId, portalHost: this.props.portalHost }, r2)), import_react103.default.createElement("div", null, this.renderInputContainer(), r2);
    }
    return import_react103.default.createElement(zt, { className: this.props.popperClassName, wrapperClassName: this.props.wrapperClassName, hidePopper: !this.isCalendarOpen(), portalId: this.props.portalId, portalHost: this.props.portalHost, popperModifiers: this.props.popperModifiers, targetComponent: this.renderInputContainer(), popperContainer: this.props.popperContainer, popperComponent: t5, popperPlacement: this.props.popperPlacement, popperProps: this.props.popperProps, popperOnKeyDown: this.onPopperKeyDown, enableTabLoop: this.props.enableTabLoop });
  } }], [{ key: "defaultProps", get: function() {
    return { allowSameDay: false, dateFormat: "MM/dd/yyyy", dateFormatCalendar: "LLLL yyyy", onChange: function() {
    }, disabled: false, disabledKeyboardNavigation: false, dropdownMode: "scroll", onFocus: function() {
    }, onBlur: function() {
    }, onKeyDown: function() {
    }, onInputClick: function() {
    }, onSelect: function() {
    }, onClickOutside: function() {
    }, onMonthChange: function() {
    }, onCalendarOpen: function() {
    }, onCalendarClose: function() {
    }, preventOpenOnFocus: false, onYearChange: function() {
    }, onInputError: function() {
    }, monthsShown: 1, readOnly: false, withPortal: false, selectsDisabledDaysInRange: false, shouldCloseOnSelect: true, showTimeSelect: false, showTimeInput: false, showPreviousMonths: false, showMonthYearPicker: false, showFullMonthYearPicker: false, showTwoColumnMonthYearPicker: false, showFourColumnMonthYearPicker: false, showYearPicker: false, showQuarterYearPicker: false, strictParsing: false, timeIntervals: 30, timeCaption: "Time", previousMonthAriaLabel: "Previous Month", previousMonthButtonLabel: "Previous Month", nextMonthAriaLabel: "Next Month", nextMonthButtonLabel: "Next Month", previousYearAriaLabel: "Previous Year", previousYearButtonLabel: "Previous Year", nextYearAriaLabel: "Next Year", nextYearButtonLabel: "Next Year", timeInputLabel: "Time", enableTabLoop: true, yearItemNumber: Ne, focusSelectedMonth: false, showPopperArrow: true, excludeScrollbar: true, customTimeInput: null, calendarStartDay: void 0 };
  } }]), a3;
}();
var Zt = "input";
var er = "navigate";

// node_modules/@bigcommerce/big-design/dist/es/components/Input/Input.js
var import_react104 = __toESM(require_react());
var StyleableInput = (_ref) => {
  let {
    chips,
    description,
    disabled,
    error: error2,
    forwardedRef,
    label,
    labelId,
    ...props
  } = _ref;
  const [focus2, setFocus] = (0, import_react104.useState)(false);
  const uniqueInputId = (0, import_react104.useId)();
  const id = props.id ? props.id : uniqueInputId;
  const {
    errors
  } = useInputErrors(id, error2);
  const handleFocus = (event) => {
    const {
      onFocus
    } = props;
    setFocus(true);
    return onFocus && onFocus(event);
  };
  const handleBlur = (event) => {
    const {
      onBlur
    } = props;
    setFocus(false);
    return onBlur && onBlur(event);
  };
  const renderedLabel = (0, import_react104.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react104.default.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        renderOptional: !props.required
      }, label);
    }
    if ((0, import_react104.isValidElement)(label) && label.type === FormControlLabel) {
      return (0, import_react104.cloneElement)(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning("label must be either a string or a FormControlLabel component.");
  }, [id, label, labelId, props.required]);
  const renderedDescription = (0, import_react104.useMemo)(() => {
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return import_react104.default.createElement(FormControlDescription, null, description);
    }
    if ((0, import_react104.isValidElement)(description) && description.type === FormControlDescription) {
      return description;
    }
    warning("description must be either a string or a FormControlDescription component.");
  }, [description]);
  const renderedIconLeft = (0, import_react104.useMemo)(() => {
    if (!props.iconLeft) {
      return null;
    }
    return import_react104.default.createElement(StyledIconWrapper, {
      paddingLeft: "xSmall",
      paddingRight: "xxSmall"
    }, props.iconLeft);
  }, [props.iconLeft]);
  const renderedIconRight = (0, import_react104.useMemo)(() => {
    if (!props.iconRight) {
      return null;
    }
    return import_react104.default.createElement(StyledIconWrapper, {
      paddingLeft: "xxSmall",
      paddingRight: "xSmall"
    }, props.iconRight);
  }, [props.iconRight]);
  const renderedChips = (0, import_react104.useMemo)(() => {
    if (!chips) {
      return null;
    }
    return chips.map((chip) => import_react104.default.createElement(Chip, _extends({}, chip, {
      key: chip.label,
      marginBottom: "none"
    })));
  }, [chips]);
  return import_react104.default.createElement("div", null, renderedLabel, renderedDescription, import_react104.default.createElement(StyledInputWrapper, {
    disabled,
    error: errors,
    focus: focus2
  }, renderedIconLeft, import_react104.default.createElement(StyledInputContent, {
    chips
  }, renderedChips, import_react104.default.createElement(StyledInput, _extends({}, props, {
    chips,
    disabled,
    error: errors,
    id,
    onBlur: handleBlur,
    onFocus: handleFocus,
    ref: forwardedRef
  }))), renderedIconRight));
};
var Input = typedMemo((0, import_react104.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react104.default.createElement(StyleableInput, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Datepicker/Header.js
var import_react105 = __toESM(require_react());
var Header = (_ref) => {
  let {
    date = /* @__PURE__ */ new Date(),
    decreaseMonth,
    increaseMonth,
    months,
    prevMonthButtonDisabled,
    nextMonthButtonDisabled
  } = _ref;
  return import_react105.default.createElement(Flex, {
    alignItems: "center",
    justifyContent: "space-between"
  }, import_react105.default.createElement(Button, {
    disabled: prevMonthButtonDisabled,
    iconOnly: import_react105.default.createElement(ChevronLeftIcon, {
      title: "View previous month."
    }),
    onClick: decreaseMonth,
    title: "View previous month.",
    type: "button",
    variant: "subtle"
  }), import_react105.default.createElement(Text, {
    as: "span",
    bold: true,
    marginBottom: "none"
  }, `${months[date.getMonth()]} ${date.getFullYear()}`), import_react105.default.createElement(Button, {
    disabled: nextMonthButtonDisabled,
    iconOnly: import_react105.default.createElement(ChevronRightIcon, {
      title: "View next month."
    }),
    onClick: increaseMonth,
    title: "View next month.",
    type: "button",
    variant: "subtle"
  }));
};
var Header_default = Header;

// node_modules/@bigcommerce/big-design/dist/es/components/Datepicker/styled.js
var StyledDatepicker = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledDatepicker",
  componentId: "sc-ayer8k-0"
})(["& .react-datepicker-wrapper{display:inline-block;width:100%;}& .react-datepicker__input-container{display:inline-block;font-family:", ";position:relative;width:100%;}& .react-datepicker__month-container{margin:", ";}& .react-datepicker__month{margin-top:", ";text-align:center;}& .react-datepicker__header{border-top-left-radius:", ";border-top-right-radius:", ";position:relative;text-align:center;}& .react-datepicker__current-month{font-weight:", ";}& .react-datepicker__day-names,.react-datepicker__week{white-space:nowrap;}& .react-datepicker__day,.react-datepicker__month-text{cursor:pointer;}& .react-datepicker__day-name,.react-datepicker__day{color:", ";display:inline-block;line-height:", ";margin:", ";text-align:center;width:", ";}& .react-datepicker__day:hover{background:", ";border-radius:", ";color:", ";outline:none;}& .react-datepicker__day:focus{border-radius:", ";color:", ";outline:none;}& .react-datepicker__day--keyboard-selected{background:", ";border-radius:", ";color:", ";outline:none;}& .react-datepicker__day:active{background:", ";border-radius:", ";color:", ";outline:none;}& .react-datepicker__day--today::after{background:", ";bottom:", ";content:'';display:block;height:", ";margin-left:", ";position:relative;width:", ";}& .react-datepicker__day--selected{background:", ";border-radius:", ";color:", ";}& .react-datepicker__day--selected:hover.react-datepicker__day--today::after{bottom:", ";}& .react-datepicker__day--selected.react-datepicker__day--today::after{bottom:-", ";}& .react-datepicker__day--disabled{color:", ";}& .react-datepicker__day--outside-month{opacity:0;visibility:hidden;}& .bc-datepicker{", ";background:", ";display:flex;font-family:", ";font-size:", ";position:relative;}& .react-datepicker-popper{z-index:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.typography.fontFamily;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.medium;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.xSmall;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.spacing.xxSmall;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.xxSmall;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.typography.fontWeight.semiBold;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.colors.secondary60;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.lineHeight.xLarge;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.spacing.xxSmall;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.lineHeight.xLarge;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.colors.primary10;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.borderRadius.normal;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.colors.secondary70;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.borderRadius.normal;
}, (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.colors.secondary70;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.colors.primary10;
}, (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.borderRadius.normal;
}, (_ref18) => {
  let {
    theme: theme2
  } = _ref18;
  return theme2.colors.secondary70;
}, (_ref19) => {
  let {
    theme: theme2
  } = _ref19;
  return theme2.colors.primary20;
}, (_ref20) => {
  let {
    theme: theme2
  } = _ref20;
  return theme2.borderRadius.normal;
}, (_ref21) => {
  let {
    theme: theme2
  } = _ref21;
  return theme2.colors.secondary70;
}, (_ref22) => {
  let {
    theme: theme2
  } = _ref22;
  return theme2.colors.primary;
}, (_ref23) => {
  let {
    theme: theme2
  } = _ref23;
  return theme2.helpers.remCalc(1);
}, (_ref24) => {
  let {
    theme: theme2
  } = _ref24;
  return theme2.helpers.remCalc(2);
}, (_ref25) => {
  let {
    theme: theme2
  } = _ref25;
  return theme2.spacing.xxSmall;
}, (_ref26) => {
  let {
    theme: theme2
  } = _ref26;
  return theme2.spacing.xLarge;
}, (_ref27) => {
  let {
    theme: theme2
  } = _ref27;
  return theme2.colors.primary;
}, (_ref28) => {
  let {
    theme: theme2
  } = _ref28;
  return theme2.borderRadius.normal;
}, (_ref29) => {
  let {
    theme: theme2
  } = _ref29;
  return theme2.colors.white;
}, (_ref30) => {
  let {
    theme: theme2
  } = _ref30;
  return theme2.helpers.remCalc(1);
}, (_ref31) => {
  let {
    theme: theme2
  } = _ref31;
  return theme2.spacing.xxSmall;
}, (_ref32) => {
  let {
    theme: theme2
  } = _ref32;
  return theme2.colors.secondary;
}, (_ref33) => {
  let {
    theme: theme2
  } = _ref33;
  return theme2.shadow.floating;
}, (_ref34) => {
  let {
    theme: theme2
  } = _ref34;
  return theme2.colors.white;
}, (_ref35) => {
  let {
    theme: theme2
  } = _ref35;
  return theme2.typography.fontFamily;
}, (_ref36) => {
  let {
    theme: theme2
  } = _ref36;
  return theme2.typography.fontSize.small;
}, (_ref37) => {
  let {
    theme: theme2
  } = _ref37;
  return theme2.zIndex.popover;
});
StyledDatepicker.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Datepicker/Datepicker.js
var RawDatepicker = (_ref) => {
  let {
    dateFormat = "EE, dd MMM, yyyy",
    disabled,
    error: error2,
    forwardedRef,
    label,
    locale: locale2 = "en-US",
    min: min2,
    max: max2,
    onDateChange,
    required: required2,
    placeholder: placeholder2,
    value,
    ...props
  } = _ref;
  const [selected, setSelected] = (0, import_react106.useState)();
  const localization = createLocalizationProvider(locale2);
  Ue(locale2, localization);
  const updateDate = (value2) => onDateChange(value2 ? value2.toISOString() : value2);
  (0, import_react106.useEffect)(() => {
    if (typeof value === "string") {
      setSelected(new Date(value));
    } else {
      setSelected(void 0);
    }
  }, [value]);
  return import_react106.default.createElement(StyledDatepicker, null, import_react106.default.createElement(Xt, {
    calendarClassName: "bc-datepicker",
    className: "calendar-input",
    customInput: import_react106.default.createElement(Input, _extends({
      error: error2,
      label
    }, props)),
    dateFormat: dateFormat || "EE, dd MMM, yyyy",
    disabled,
    locale: locale2,
    maxDate: max2 ? new Date(max2) : void 0,
    minDate: min2 ? new Date(min2) : void 0,
    onChange: updateDate,
    placeholderText: placeholder2,
    ref: forwardedRef,
    renderCustomHeader: (_ref2) => {
      let {
        date,
        decreaseMonth,
        increaseMonth,
        prevMonthButtonDisabled,
        nextMonthButtonDisabled
      } = _ref2;
      return import_react106.default.createElement(Header_default, {
        date,
        decreaseMonth,
        increaseMonth,
        months: localization.monthsLong,
        nextMonthButtonDisabled,
        prevMonthButtonDisabled
      });
    },
    required: required2,
    selected
  }));
};
var Datepicker = (0, import_react106.memo)((0, import_react106.forwardRef)((props, ref2) => import_react106.default.createElement(RawDatepicker, _extends({}, props, {
  forwardedRef: ref2
}))));

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Description/Description.js
var import_react107 = __toESM(require_react());
var FieldsetDescription = (0, import_react107.memo)((_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react107.default.createElement(Small, props);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Fieldset.js
var import_react109 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Legend/Legend.js
var import_react108 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Legend/styled.js
var StyledFieldsetLegend = styled_components_browser_esm_default(StyleableH4).attrs({
  as: "legend"
}).withConfig({
  displayName: "styled__StyledFieldsetLegend",
  componentId: "sc-n32oj8-0"
})(["&:not(:last-child){margin-bottom:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xxSmall;
});
StyledFieldsetLegend.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Legend/Legend.js
var FieldsetLegend = (0, import_react108.memo)((_ref) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref;
  return import_react108.default.createElement(StyledFieldsetLegend, props);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/styled.js
var StyledFieldset = styled_components_browser_esm_default.fieldset.withConfig({
  displayName: "styled__StyledFieldset",
  componentId: "sc-ac9lek-0"
})(["border:none;margin:0 0 ", ";padding:0;&:last-child{margin:0;}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xLarge;
});
StyledFieldset.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Fieldset/Fieldset.js
var Fieldset = (0, import_react109.memo)((_ref) => {
  let {
    className,
    legend,
    description,
    children,
    style: style2,
    ...props
  } = _ref;
  const renderedLegend = (0, import_react109.useMemo)(() => {
    if (typeof legend === "string") {
      return import_react109.default.createElement(FieldsetLegend, null, legend);
    }
    if ((0, import_react109.isValidElement)(legend) && legend.type === FieldsetLegend) {
      return legend;
    }
    if (!legend) {
      return null;
    }
    warning("legend must be either a string or a FieldsetLegend component.");
  }, [legend]);
  const renderedDescription = (0, import_react109.useMemo)(() => {
    if (typeof description === "string") {
      return import_react109.default.createElement(FieldsetDescription, null, description);
    }
    if ((0, import_react109.isValidElement)(description) && description.type === FieldsetDescription) {
      return description;
    }
    if (!description) {
      return null;
    }
    warning("description must be either a string or a FieldsetDescription component.");
  }, [description]);
  return import_react109.default.createElement(StyledFieldset, props, renderedLegend, renderedDescription, children);
});

// node_modules/@bigcommerce/big-design/dist/es/components/GlobalStyles/GlobalStyles.js
var GlobalStyles = $e(["", " body{font-family:", ";}"], normalize(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.typography.fontFamily;
});
GlobalStyles.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/InlineMessage/InlineMessage.js
var import_react110 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/InlineMessage/styled.js
var StyledInlineMessage = styled_components_browser_esm_default(Grid).withConfig({
  displayName: "styled__StyledInlineMessage",
  componentId: "sc-14477sa-0"
})(["border:", ";border-radius:", ";grid-gap:", ";grid-template-columns:", ";padding:", ";", " ", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.border.box;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.borderRadius.normal;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.xSmall;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return `${theme2.spacing.large} 1fr ${theme2.spacing.large}`;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.xSmall;
}, (_ref6) => {
  let {
    onClose
  } = _ref6;
  return onClose ? Ae(["grid-template-areas:'icon messages close';grid-template-columns:", ";"], (_ref7) => {
    let {
      theme: theme2
    } = _ref7;
    return `${theme2.spacing.large} 1fr ${theme2.spacing.medium}`;
  }) : Ae(["grid-template-areas:'icon messages';grid-template-columns:", ";"], (_ref8) => {
    let {
      theme: theme2
    } = _ref8;
    return `${theme2.spacing.large} 1fr`;
  });
}, (_ref9) => {
  let {
    theme: theme2,
    type
  } = _ref9;
  return type && getBorderStyle(type, theme2);
});
var StyledHeader2 = styled_components_browser_esm_default(StyleableH4).withConfig({
  displayName: "styled__StyledHeader",
  componentId: "sc-14477sa-1"
})(["font-size:", ";line-height:", ";margin-bottom:", ";"], (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.typography.fontSize.small;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.spacing.large;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.spacing.none;
});
var StyledMessageItem2 = styled_components_browser_esm_default(StyleableSmall).attrs({
  as: "span"
}).withConfig({
  displayName: "styled__StyledMessageItem",
  componentId: "sc-14477sa-2"
})(["color:", ";vertical-align:middle;"], (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.colors.secondary70;
});
var StyledLink5 = styled_components_browser_esm_default(Link).withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-14477sa-3"
})(["font-size:", ";vertical-align:middle;"], (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.typography.fontSize.small;
});
var StyledActionsWrapper = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledActionsWrapper",
  componentId: "sc-14477sa-4"
})(["margin-bottom:-", ";margin-left:-", ";margin-right:-", ";"], (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.spacing.xSmall;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.spacing.xxSmall;
}, (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.spacing.xxSmall;
});
StyledInlineMessage.defaultProps = {
  theme
};
StyledHeader2.defaultProps = {
  theme
};
StyledMessageItem2.defaultProps = {
  theme
};
StyledLink5.defaultProps = {
  theme
};
StyledActionsWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/InlineMessage/InlineMessage.js
var InlineMessage = (0, import_react110.memo)((_ref) => {
  let {
    className,
    style: style2,
    header,
    ...props
  } = _ref;
  const filteredProps = excludePaddingProps(props);
  const icon = (0, import_react110.useMemo)(() => props.type && getMessagingIcon(props.type, true), [props.type]);
  const renderedMessages = (0, import_react110.useMemo)(() => props.messages.map((_ref2, index) => {
    let {
      text,
      link
    } = _ref2;
    return import_react110.default.createElement(Box, {
      key: index
    }, import_react110.default.createElement(StyledMessageItem2, null, text), " ", link && import_react110.default.createElement(StyledLink5, link, link.text));
  }), [props.messages]);
  const renderedHeader = (0, import_react110.useMemo)(() => header && import_react110.default.createElement(StyledHeader2, null, header), [header]);
  const renderedActions = (0, import_react110.useMemo)(() => props.actions && import_react110.default.createElement(StyledActionsWrapper, {
    flexDirection: "row",
    flexWrap: "wrap",
    marginTop: "xSmall"
  }, props.actions.map((_ref3, index) => {
    let {
      text,
      variant = "secondary",
      ...actionProps
    } = _ref3;
    return import_react110.default.createElement(Button, _extends({}, excludeMarginProps(actionProps), {
      key: index,
      marginBottom: "xSmall",
      marginHorizontal: "xxSmall",
      mobileWidth: "auto",
      variant: getActionVariant(variant)
    }), text);
  })), [props.actions]);
  return import_react110.default.createElement(StyledInlineMessage, _extends({}, filteredProps, {
    backgroundColor: "white",
    role: "alert"
  }), import_react110.default.createElement(GridItem, {
    gridArea: "icon"
  }, icon), import_react110.default.createElement(GridItem, {
    gridArea: "messages"
  }, renderedHeader, renderedMessages, renderedActions), props.onClose && import_react110.default.createElement(GridItem, null, import_react110.default.createElement(MessagingButton, {
    iconOnly: import_react110.default.createElement(CloseIcon, {
      size: "medium",
      title: "Close."
    }),
    onClick: props.onClose
  })));
});
InlineMessage.defaultProps = {
  messages: [],
  type: "success"
};

// node_modules/@bigcommerce/big-design/dist/es/components/Message/Message.js
var import_react111 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Message/styled.js
var StyledMessage = styled_components_browser_esm_default(Grid).withConfig({
  displayName: "styled__StyledMessage",
  componentId: "sc-1fctd93-0"
})(["", " grid-gap:", ";padding:", ";", " ", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.shadow.raised;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.small;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.small;
}, (_ref4) => {
  let {
    onClose
  } = _ref4;
  return onClose ? Ae(["grid-template-areas:'icon messages close';grid-template-columns:", ";"], (_ref5) => {
    let {
      theme: theme2
    } = _ref5;
    return `${theme2.spacing.xLarge} 1fr ${theme2.spacing.large}`;
  }) : Ae(["grid-template-areas:'icon messages';grid-template-columns:", ";"], (_ref6) => {
    let {
      theme: theme2
    } = _ref6;
    return `${theme2.spacing.xLarge} 1fr`;
  });
}, (_ref7) => {
  let {
    theme: theme2,
    type
  } = _ref7;
  return type && getBorderStyle(type, theme2);
});
var StyledHeader3 = styled_components_browser_esm_default(StyleableH4).withConfig({
  displayName: "styled__StyledHeader",
  componentId: "sc-1fctd93-1"
})(["line-height:", ";margin-bottom:", ";"], (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.spacing.large;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.spacing.none;
});
var StyledMessageItem3 = styled_components_browser_esm_default(StyleableSmall).attrs({
  as: "span"
}).withConfig({
  displayName: "styled__StyledMessageItem",
  componentId: "sc-1fctd93-2"
})(["color:", ";vertical-align:middle;"], (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.colors.secondary70;
});
var StyledLink6 = styled_components_browser_esm_default(Link).withConfig({
  displayName: "styled__StyledLink",
  componentId: "sc-1fctd93-3"
})(["font-size:", ";vertical-align:middle;"], (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.typography.fontSize.small;
});
var StyledActionsWrapper2 = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledActionsWrapper",
  componentId: "sc-1fctd93-4"
})(["margin-bottom:-", ";margin-left:-", ";margin-right:-", ";"], (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.spacing.xSmall;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.spacing.xxSmall;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.spacing.xxSmall;
});
StyledMessage.defaultProps = {
  theme
};
StyledHeader3.defaultProps = {
  theme
};
StyledMessageItem3.defaultProps = {
  theme
};
StyledLink6.defaultProps = {
  theme
};
StyledActionsWrapper2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Message/Message.js
var Message = (0, import_react111.memo)((_ref) => {
  let {
    className,
    style: style2,
    header,
    ...props
  } = _ref;
  const filteredProps = excludePaddingProps(props);
  const icon = (0, import_react111.useMemo)(() => props.type && getMessagingIcon(props.type), [props.type]);
  const renderedMessages = (0, import_react111.useMemo)(() => props.messages.map((_ref2, index) => {
    let {
      text,
      link
    } = _ref2;
    return import_react111.default.createElement(Box, {
      key: index
    }, import_react111.default.createElement(StyledMessageItem3, null, text), " ", link && import_react111.default.createElement(StyledLink6, link, link.text));
  }), [props.messages]);
  const renderedHeader = (0, import_react111.useMemo)(() => header && import_react111.default.createElement(StyledHeader3, null, header), [header]);
  const renderedActions = (0, import_react111.useMemo)(() => props.actions && import_react111.default.createElement(StyledActionsWrapper2, {
    flexDirection: "row",
    flexWrap: "wrap",
    marginTop: "xSmall"
  }, props.actions.map((_ref3, index) => {
    let {
      text,
      variant = "secondary",
      ...actionProps
    } = _ref3;
    return import_react111.default.createElement(Button, _extends({}, excludeMarginProps(actionProps), {
      key: index,
      marginBottom: "xSmall",
      marginHorizontal: "xxSmall",
      mobileWidth: "auto",
      variant: getActionVariant(variant)
    }), text);
  })), [props.actions]);
  return import_react111.default.createElement(StyledMessage, _extends({}, filteredProps, {
    backgroundColor: "white",
    role: "alert"
  }), import_react111.default.createElement(GridItem, {
    gridArea: "icon"
  }, icon), import_react111.default.createElement(GridItem, {
    gridArea: "messages"
  }, renderedHeader, renderedMessages, renderedActions), props.onClose && import_react111.default.createElement(GridItem, null, import_react111.default.createElement(MessagingButton, {
    iconOnly: import_react111.default.createElement(CloseIcon, {
      size: "large",
      title: "Close."
    }),
    onClick: props.onClose
  })));
});
Message.defaultProps = {
  messages: [],
  type: "success"
};

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a3, b2) {
  return a3.tabIndex === b2.tabIndex ? a3.documentOrder - b2.documentOrder : a3.tabIndex - b2.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r2 = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r2;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i3 = 0; i3 < nodes.length; i3++) {
    if (nodes[i3].checked && nodes[i3].form === form) {
      return nodes[i3];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i3 = 0; i3 < parentNode.children.length; i3++) {
          var child = parentNode.children.item(i3);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i3) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i3,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusable = function focusable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorFocusable.bind(null, options),
      flatten: true,
      getShadowRoot: options.getShadowRoot
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
  }
  return candidates;
};
var isTabbable = function isTabbable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options, node);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
var isFocusable = function isFocusable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorFocusable(options, node);
};

// node_modules/focus-trap/dist/focus-trap.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = null != arguments[i3] ? arguments[i3] : {};
    i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  key = _toPropertyKey2(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPrimitive2(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey2(arg) {
  var key = _toPrimitive2(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var activeFocusTraps = {
  activateTrap: function activateTrap(trapStack, trap) {
    if (trapStack.length > 0) {
      var activeTrap = trapStack[trapStack.length - 1];
      if (activeTrap !== trap) {
        activeTrap.pause();
      }
    }
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex === -1) {
      trapStack.push(trap);
    } else {
      trapStack.splice(trapIndex, 1);
      trapStack.push(trap);
    }
  },
  deactivateTrap: function deactivateTrap(trapStack, trap) {
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex !== -1) {
      trapStack.splice(trapIndex, 1);
    }
    if (trapStack.length > 0) {
      trapStack[trapStack.length - 1].unpause();
    }
  }
};
var isSelectableInput = function isSelectableInput2(node) {
  return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
};
var isEscapeEvent = function isEscapeEvent2(e4) {
  return (e4 === null || e4 === void 0 ? void 0 : e4.key) === "Escape" || (e4 === null || e4 === void 0 ? void 0 : e4.key) === "Esc" || (e4 === null || e4 === void 0 ? void 0 : e4.keyCode) === 27;
};
var isTabEvent = function isTabEvent2(e4) {
  return (e4 === null || e4 === void 0 ? void 0 : e4.key) === "Tab" || (e4 === null || e4 === void 0 ? void 0 : e4.keyCode) === 9;
};
var isKeyForward = function isKeyForward2(e4) {
  return isTabEvent(e4) && !e4.shiftKey;
};
var isKeyBackward = function isKeyBackward2(e4) {
  return isTabEvent(e4) && e4.shiftKey;
};
var delay = function delay2(fn) {
  return setTimeout(fn, 0);
};
var findIndex2 = function findIndex3(arr, fn) {
  var idx = -1;
  arr.every(function(value, i3) {
    if (fn(value)) {
      idx = i3;
      return false;
    }
    return true;
  });
  return idx;
};
var valueOrHandler = function valueOrHandler2(value) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }
  return typeof value === "function" ? value.apply(void 0, params) : value;
};
var getActualTarget = function getActualTarget2(event) {
  return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
};
var internalTrapStack = [];
var createFocusTrap = function createFocusTrap2(elements, userOptions) {
  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
  var config2 = _objectSpread2({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true,
    delayInitialFocus: true,
    isKeyForward,
    isKeyBackward
  }, userOptions);
  var state = {
    // containers given to createFocusTrap()
    // @type {Array<HTMLElement>}
    containers: [],
    // list of objects identifying tabbable nodes in `containers` in the trap
    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
    //  is active, but the trap should never get to a state where there isn't at least one group
    //  with at least one tabbable node in it (that would lead to an error condition that would
    //  result in an error being thrown)
    // @type {Array<{
    //   container: HTMLElement,
    //   tabbableNodes: Array<HTMLElement>, // empty if none
    //   focusableNodes: Array<HTMLElement>, // empty if none
    //   posTabIndexesFound: boolean,
    //   firstTabbableNode: HTMLElement|undefined,
    //   lastTabbableNode: HTMLElement|undefined,
    //   firstDomTabbableNode: HTMLElement|undefined,
    //   lastDomTabbableNode: HTMLElement|undefined,
    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
    // }>}
    containerGroups: [],
    // same order/length as `containers` list
    // references to objects in `containerGroups`, but only those that actually have
    //  tabbable nodes in them
    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
    //  the same length
    tabbableGroups: [],
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false,
    // timer ID for when delayInitialFocus is true and initial focus in this trap
    //  has been delayed during activation
    delayInitialFocusTimer: void 0,
    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
    recentNavEvent: void 0
  };
  var trap;
  var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
    return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config2[configOptionName || optionName];
  };
  var findContainerIndex = function findContainerIndex2(element, event) {
    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
    return state.containerGroups.findIndex(function(_ref) {
      var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
      //  web components if the `tabbableOptions.getShadowRoot` option was used for
      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
      //  look inside web components even if open)
      (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
        return node === element;
      });
    });
  };
  var getNodeForOption = function getNodeForOption2(optionName) {
    var optionValue = config2[optionName];
    if (typeof optionValue === "function") {
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      optionValue = optionValue.apply(void 0, params);
    }
    if (optionValue === true) {
      optionValue = void 0;
    }
    if (!optionValue) {
      if (optionValue === void 0 || optionValue === false) {
        return optionValue;
      }
      throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
    }
    var node = optionValue;
    if (typeof optionValue === "string") {
      node = doc.querySelector(optionValue);
      if (!node) {
        throw new Error("`".concat(optionName, "` as selector refers to no known node"));
      }
    }
    return node;
  };
  var getInitialFocusNode = function getInitialFocusNode2() {
    var node = getNodeForOption("initialFocus");
    if (node === false) {
      return false;
    }
    if (node === void 0 || !isFocusable(node, config2.tabbableOptions)) {
      if (findContainerIndex(doc.activeElement) >= 0) {
        node = doc.activeElement;
      } else {
        var firstTabbableGroup = state.tabbableGroups[0];
        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
        node = firstTabbableNode || getNodeForOption("fallbackFocus");
      }
    }
    if (!node) {
      throw new Error("Your focus-trap needs to have at least one focusable element");
    }
    return node;
  };
  var updateTabbableNodes = function updateTabbableNodes2() {
    state.containerGroups = state.containers.map(function(container) {
      var tabbableNodes = tabbable(container, config2.tabbableOptions);
      var focusableNodes = focusable(container, config2.tabbableOptions);
      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
      var firstDomTabbableNode = focusableNodes.find(function(node) {
        return isTabbable(node);
      });
      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
        return isTabbable(node);
      });
      var posTabIndexesFound = !!tabbableNodes.find(function(node) {
        return getTabIndex(node) > 0;
      });
      return {
        container,
        tabbableNodes,
        focusableNodes,
        /** True if at least one node with positive `tabindex` was found in this container. */
        posTabIndexesFound,
        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
        firstTabbableNode,
        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
        lastTabbableNode,
        // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
        //  because that API doesn't work with Shadow DOM as well as it should (@see
        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
        //  to address an edge case related to positive tabindex support, this seems like a much easier,
        //  "close enough most of the time" alternative for positive tabindexes which should generally
        //  be avoided anyway...
        /** First tabbable node in container, __DOM__ order; `undefined` if none. */
        firstDomTabbableNode,
        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
        lastDomTabbableNode,
        /**
         * Finds the __tabbable__ node that follows the given node in the specified direction,
         *  in this container, if any.
         * @param {HTMLElement} node
         * @param {boolean} [forward] True if going in forward tab order; false if going
         *  in reverse.
         * @returns {HTMLElement|undefined} The next tabbable node, if any.
         */
        nextTabbableNode: function nextTabbableNode(node) {
          var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var nodeIdx = tabbableNodes.indexOf(node);
          if (nodeIdx < 0) {
            if (forward) {
              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                return isTabbable(el);
              });
            }
            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
              return isTabbable(el);
            });
          }
          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
        }
      };
    });
    state.tabbableGroups = state.containerGroups.filter(function(group) {
      return group.tabbableNodes.length > 0;
    });
    if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
      throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
    }
    if (state.containerGroups.find(function(g) {
      return g.posTabIndexesFound;
    }) && state.containerGroups.length > 1) {
      throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
    }
  };
  var tryFocus = function tryFocus2(node) {
    if (node === false) {
      return;
    }
    if (node === doc.activeElement) {
      return;
    }
    if (!node || !node.focus) {
      tryFocus2(getInitialFocusNode());
      return;
    }
    node.focus({
      preventScroll: !!config2.preventScroll
    });
    state.mostRecentlyFocusedNode = node;
    if (isSelectableInput(node)) {
      node.select();
    }
  };
  var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
    var node = getNodeForOption("setReturnFocus", previousActiveElement);
    return node ? node : node === false ? false : previousActiveElement;
  };
  var findNextNavNode = function findNextNavNode2(_ref2) {
    var target = _ref2.target, event = _ref2.event, _ref2$isBackward = _ref2.isBackward, isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;
    target = target || getActualTarget(event);
    updateTabbableNodes();
    var destinationNode = null;
    if (state.tabbableGroups.length > 0) {
      var containerIndex = findContainerIndex(target, event);
      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
      if (containerIndex < 0) {
        if (isBackward) {
          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
        } else {
          destinationNode = state.tabbableGroups[0].firstTabbableNode;
        }
      } else if (isBackward) {
        var startOfGroupIndex = findIndex2(state.tabbableGroups, function(_ref3) {
          var firstTabbableNode = _ref3.firstTabbableNode;
          return target === firstTabbableNode;
        });
        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config2.tabbableOptions) && !isTabbable(target, config2.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
          startOfGroupIndex = containerIndex;
        }
        if (startOfGroupIndex >= 0) {
          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
          var destinationGroup = state.tabbableGroups[destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target, false);
        }
      } else {
        var lastOfGroupIndex = findIndex2(state.tabbableGroups, function(_ref4) {
          var lastTabbableNode = _ref4.lastTabbableNode;
          return target === lastTabbableNode;
        });
        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config2.tabbableOptions) && !isTabbable(target, config2.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
          lastOfGroupIndex = containerIndex;
        }
        if (lastOfGroupIndex >= 0) {
          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target);
        }
      }
    } else {
      destinationNode = getNodeForOption("fallbackFocus");
    }
    return destinationNode;
  };
  var checkPointerDown = function checkPointerDown2(e4) {
    var target = getActualTarget(e4);
    if (findContainerIndex(target, e4) >= 0) {
      return;
    }
    if (valueOrHandler(config2.clickOutsideDeactivates, e4)) {
      trap.deactivate({
        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
        //  which will result in the outside click setting focus to the node
        //  that was clicked (and if not focusable, to "nothing"); by setting
        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
        //  on activation (or the configured `setReturnFocus` node), whether the
        //  outside click was on a focusable node or not
        returnFocus: config2.returnFocusOnDeactivate
      });
      return;
    }
    if (valueOrHandler(config2.allowOutsideClick, e4)) {
      return;
    }
    e4.preventDefault();
  };
  var checkFocusIn = function checkFocusIn2(event) {
    var target = getActualTarget(event);
    var targetContained = findContainerIndex(target, event) >= 0;
    if (targetContained || target instanceof Document) {
      if (targetContained) {
        state.mostRecentlyFocusedNode = target;
      }
    } else {
      event.stopImmediatePropagation();
      var nextNode;
      var navAcrossContainers = true;
      if (state.mostRecentlyFocusedNode) {
        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
          if (tabbableNodes.length > 0) {
            var mruTabIdx = tabbableNodes.findIndex(function(node) {
              return node === state.mostRecentlyFocusedNode;
            });
            if (mruTabIdx >= 0) {
              if (config2.isKeyForward(state.recentNavEvent)) {
                if (mruTabIdx + 1 < tabbableNodes.length) {
                  nextNode = tabbableNodes[mruTabIdx + 1];
                  navAcrossContainers = false;
                }
              } else {
                if (mruTabIdx - 1 >= 0) {
                  nextNode = tabbableNodes[mruTabIdx - 1];
                  navAcrossContainers = false;
                }
              }
            }
          }
        } else {
          if (!state.containerGroups.some(function(g) {
            return g.tabbableNodes.some(function(n2) {
              return getTabIndex(n2) > 0;
            });
          })) {
            navAcrossContainers = false;
          }
        }
      } else {
        navAcrossContainers = false;
      }
      if (navAcrossContainers) {
        nextNode = findNextNavNode({
          // move FROM the MRU node, not event-related node (which will be the node that is
          //  outside the trap causing the focus escape we're trying to fix)
          target: state.mostRecentlyFocusedNode,
          isBackward: config2.isKeyBackward(state.recentNavEvent)
        });
      }
      if (nextNode) {
        tryFocus(nextNode);
      } else {
        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
      }
    }
    state.recentNavEvent = void 0;
  };
  var checkKeyNav = function checkKeyNav2(event) {
    var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    state.recentNavEvent = event;
    var destinationNode = findNextNavNode({
      event,
      isBackward
    });
    if (destinationNode) {
      if (isTabEvent(event)) {
        event.preventDefault();
      }
      tryFocus(destinationNode);
    }
  };
  var checkKey = function checkKey2(event) {
    if (isEscapeEvent(event) && valueOrHandler(config2.escapeDeactivates, event) !== false) {
      event.preventDefault();
      trap.deactivate();
      return;
    }
    if (config2.isKeyForward(event) || config2.isKeyBackward(event)) {
      checkKeyNav(event, config2.isKeyBackward(event));
    }
  };
  var checkClick = function checkClick2(e4) {
    var target = getActualTarget(e4);
    if (findContainerIndex(target, e4) >= 0) {
      return;
    }
    if (valueOrHandler(config2.clickOutsideDeactivates, e4)) {
      return;
    }
    if (valueOrHandler(config2.allowOutsideClick, e4)) {
      return;
    }
    e4.preventDefault();
    e4.stopImmediatePropagation();
  };
  var addListeners = function addListeners2() {
    if (!state.active) {
      return;
    }
    activeFocusTraps.activateTrap(trapStack, trap);
    state.delayInitialFocusTimer = config2.delayInitialFocus ? delay(function() {
      tryFocus(getInitialFocusNode());
    }) : tryFocus(getInitialFocusNode());
    doc.addEventListener("focusin", checkFocusIn, true);
    doc.addEventListener("mousedown", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("touchstart", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("click", checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener("keydown", checkKey, {
      capture: true,
      passive: false
    });
    return trap;
  };
  var removeListeners = function removeListeners2() {
    if (!state.active) {
      return;
    }
    doc.removeEventListener("focusin", checkFocusIn, true);
    doc.removeEventListener("mousedown", checkPointerDown, true);
    doc.removeEventListener("touchstart", checkPointerDown, true);
    doc.removeEventListener("click", checkClick, true);
    doc.removeEventListener("keydown", checkKey, true);
    return trap;
  };
  var checkDomRemoval = function checkDomRemoval2(mutations) {
    var isFocusedNodeRemoved = mutations.some(function(mutation) {
      var removedNodes = Array.from(mutation.removedNodes);
      return removedNodes.some(function(node) {
        return node === state.mostRecentlyFocusedNode;
      });
    });
    if (isFocusedNodeRemoved) {
      tryFocus(getInitialFocusNode());
    }
  };
  var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
  var updateObservedNodes = function updateObservedNodes2() {
    if (!mutationObserver) {
      return;
    }
    mutationObserver.disconnect();
    if (state.active && !state.paused) {
      state.containers.map(function(container) {
        mutationObserver.observe(container, {
          subtree: true,
          childList: true
        });
      });
    }
  };
  trap = {
    get active() {
      return state.active;
    },
    get paused() {
      return state.paused;
    },
    activate: function activate(activateOptions) {
      if (state.active) {
        return this;
      }
      var onActivate = getOption(activateOptions, "onActivate");
      var onPostActivate = getOption(activateOptions, "onPostActivate");
      var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
      if (!checkCanFocusTrap) {
        updateTabbableNodes();
      }
      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = doc.activeElement;
      onActivate === null || onActivate === void 0 ? void 0 : onActivate();
      var finishActivation = function finishActivation2() {
        if (checkCanFocusTrap) {
          updateTabbableNodes();
        }
        addListeners();
        updateObservedNodes();
        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();
      };
      if (checkCanFocusTrap) {
        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
        return this;
      }
      finishActivation();
      return this;
    },
    deactivate: function deactivate(deactivateOptions) {
      if (!state.active) {
        return this;
      }
      var options = _objectSpread2({
        onDeactivate: config2.onDeactivate,
        onPostDeactivate: config2.onPostDeactivate,
        checkCanReturnFocus: config2.checkCanReturnFocus
      }, deactivateOptions);
      clearTimeout(state.delayInitialFocusTimer);
      state.delayInitialFocusTimer = void 0;
      removeListeners();
      state.active = false;
      state.paused = false;
      updateObservedNodes();
      activeFocusTraps.deactivateTrap(trapStack, trap);
      var onDeactivate = getOption(options, "onDeactivate");
      var onPostDeactivate = getOption(options, "onPostDeactivate");
      var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
      var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();
      var finishDeactivation = function finishDeactivation2() {
        delay(function() {
          if (returnFocus) {
            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
          }
          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();
        });
      };
      if (returnFocus && checkCanReturnFocus) {
        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
        return this;
      }
      finishDeactivation();
      return this;
    },
    pause: function pause(pauseOptions) {
      if (state.paused || !state.active) {
        return this;
      }
      var onPause = getOption(pauseOptions, "onPause");
      var onPostPause = getOption(pauseOptions, "onPostPause");
      state.paused = true;
      onPause === null || onPause === void 0 ? void 0 : onPause();
      removeListeners();
      updateObservedNodes();
      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();
      return this;
    },
    unpause: function unpause(unpauseOptions) {
      if (!state.paused || !state.active) {
        return this;
      }
      var onUnpause = getOption(unpauseOptions, "onUnpause");
      var onPostUnpause = getOption(unpauseOptions, "onPostUnpause");
      state.paused = false;
      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();
      updateTabbableNodes();
      addListeners();
      updateObservedNodes();
      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();
      return this;
    },
    updateContainerElements: function updateContainerElements(containerElements) {
      var elementsAsArray = [].concat(containerElements).filter(Boolean);
      state.containers = elementsAsArray.map(function(element) {
        return typeof element === "string" ? doc.querySelector(element) : element;
      });
      if (state.active) {
        updateTabbableNodes();
      }
      updateObservedNodes();
      return this;
    }
  };
  trap.updateContainerElements(elements);
  return trap;
};

// node_modules/@bigcommerce/big-design/dist/es/components/Modal/Modal.js
var import_react112 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/@bigcommerce/big-design/dist/es/components/Modal/styled.js
var StyledModal = styled_components_browser_esm_default.div.attrs({
  "aria-modal": true,
  role: "dialog",
  tabIndex: -1
}).withConfig({
  displayName: "styled__StyledModal",
  componentId: "sc-b0pzor-0"
})(["align-items:center;display:flex;height:100%;justify-content:center;left:0;position:fixed;top:0;width:100%;z-index:", ";", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.zIndex.modalBackdrop;
}, (props) => props.backdrop && props.variant && Ae(["background:", ";"], rgba(props.theme.colors.secondary70, props.variant === "dialog" ? 0.5 : 0.7)));
var StyledModalContent = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledModalContent",
  componentId: "sc-b0pzor-1"
})(["background:", ";box-sizing:border-box;position:fixed;z-index:", ";", " ", ""], (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.white;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.zIndex.modal;
}, (_ref4) => {
  let {
    theme: theme2,
    variant
  } = _ref4;
  return variant === "dialog" && Ae(["", ";max-width:", ";width:90%;"], theme2.shadow.floating, theme2.breakpointValues.tablet);
}, (_ref5) => {
  let {
    theme: theme2,
    variant
  } = _ref5;
  return variant === "modal" && Ae(["height:100%;width:100%;", "{", ";height:auto;max-height:90vh;max-width:", ";}", "{max-height:80vh;}"], theme2.breakpoints.tablet, theme2.shadow.floating, theme2.breakpointValues.tablet, theme2.breakpoints.desktop);
});
var StyledModalActions = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledModalActions",
  componentId: "sc-b0pzor-2"
})(["padding:", ";", "{padding:", ";}"], (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.medium;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.breakpoints.tablet;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.spacing.xLarge;
});
var StyledModalHeader = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledModalHeader",
  componentId: "sc-b0pzor-3"
})(["padding:", ";", "{padding:", ";}"], (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.spacing.medium;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.breakpoints.tablet;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.spacing.xLarge;
});
var StyledModalClose = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledModalClose",
  componentId: "sc-b0pzor-4"
})(["position:absolute;top:", ";right:", ";", "{display:none;}"], (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.spacing.xxSmall;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.spacing.xxSmall;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.breakpoints.tablet;
});
var StyledModalBody = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledModalBody",
  componentId: "sc-b0pzor-5"
})(["flex-grow:1;padding:0 ", ";overflow-y:auto;", "{padding:0 ", ";}"], (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.spacing.medium;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.breakpoints.tablet;
}, (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.spacing.xLarge;
});
StyledModal.defaultProps = {
  theme
};
StyledModalActions.defaultProps = {
  theme
};
StyledModalBody.defaultProps = {
  theme
};
StyledModalClose.defaultProps = {
  theme
};
StyledModalContent.defaultProps = {
  theme
};
StyledModalHeader.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Modal/Modal.js
var Modal = typedMemo((props) => {
  const [modalContainer, setModalContainer] = (0, import_react112.useState)(null);
  (0, import_react112.useEffect)(() => {
    const container = document.createElement("div");
    document.body.appendChild(container);
    setModalContainer(container);
  }, []);
  (0, import_react112.useEffect)(() => {
    return () => {
      if (modalContainer) {
        document.body.removeChild(modalContainer);
      }
    };
  }, [modalContainer]);
  return props.isOpen && modalContainer ? (0, import_react_dom4.createPortal)(import_react112.default.createElement(InternalModal, props), modalContainer) : null;
});
var InternalModal = (_ref) => {
  let {
    actions,
    backdrop = true,
    children,
    closeOnClickOutside = false,
    closeOnEscKey = true,
    header,
    onClose = () => null,
    variant = "modal"
  } = _ref;
  const initialBodyOverflowYRef = (0, import_react112.useRef)("");
  const internalTrap = (0, import_react112.useRef)(null);
  const headerUniqueId = (0, import_react112.useId)();
  const [modalRef, setModalRef] = (0, import_react112.useState)(null);
  const onClickAway = (event) => {
    if (closeOnClickOutside && modalRef === event.target) {
      onClose();
    }
  };
  const onKeyDown = (event) => {
    if (closeOnEscKey && event.key === "Escape") {
      onClose();
    }
  };
  (0, import_react112.useEffect)(() => {
    initialBodyOverflowYRef.current = document.body.style.overflowY || "";
    document.body.style.overflowY = "hidden";
    return () => {
      document.body.style.overflowY = initialBodyOverflowYRef.current;
    };
  }, []);
  (0, import_react112.useEffect)(() => {
    if (modalRef && internalTrap.current === null) {
      internalTrap.current = createFocusTrap(modalRef, {
        fallbackFocus: modalRef
      });
      internalTrap.current.activate();
    }
    return () => {
      var _a;
      (_a = internalTrap.current) == null ? void 0 : _a.deactivate();
    };
  }, [internalTrap, modalRef]);
  const renderedClose = (0, import_react112.useMemo)(() => variant === "modal" && import_react112.default.createElement(StyledModalClose, null, import_react112.default.createElement(MessagingButton, {
    iconOnly: import_react112.default.createElement(CloseIcon, {
      title: "Close"
    }),
    onClick: onClose
  })), [onClose, variant]);
  const renderedHeader = (0, import_react112.useMemo)(() => header && typeof header === "string" && import_react112.default.createElement(StyledModalHeader, {
    id: headerUniqueId
  }, import_react112.default.createElement(H2, {
    margin: "none"
  }, header)), [header, headerUniqueId]);
  const renderedActions = (0, import_react112.useMemo)(() => Array.isArray(actions) && import_react112.default.createElement(StyledModalActions, {
    justifyContent: "flex-end"
  }, actions.map((_ref2, index) => {
    let {
      text,
      onClick,
      ...props
    } = _ref2;
    return import_react112.default.createElement(Button, _extends({
      key: index
    }, props, {
      onClick: (event) => {
        var _a;
        (_a = internalTrap.current) == null ? void 0 : _a.deactivate();
        if (typeof onClick === "function") {
          onClick(event);
        }
      }
    }), text);
  })), [actions]);
  return import_react112.default.createElement(StyledModal, {
    backdrop,
    onClick: onClickAway,
    onKeyDown,
    ref: setModalRef,
    tabIndex: -1,
    variant
  }, import_react112.default.createElement(StyledModalContent, {
    "aria-labelledby": headerUniqueId,
    flexDirection: "column",
    variant
  }, renderedClose, renderedHeader, import_react112.default.createElement(StyledModalBody, null, children), renderedActions));
};

// node_modules/@bigcommerce/big-design/dist/es/components/MultiSelect/MultiSelect.js
var import_react113 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Select/styled.js
var StyledStatusMessage = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledStatusMessage",
  componentId: "sc-1v66t78-0"
})(["", ""], hideVisually());
var StyledDropdownIcon = styled_components_browser_esm_default(ArrowDropDownIcon).withConfig({
  displayName: "styled__StyledDropdownIcon",
  componentId: "sc-1v66t78-1"
})(["", ""], (_ref) => {
  let {
    disabled
  } = _ref;
  return !disabled && Ae([":hover{cursor:pointer;}"]);
});
var StyledInputContainer = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledInputContainer",
  componentId: "sc-1v66t78-2"
})(["input[readonly]{cursor:pointer;}"]);
var DropdownButton = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__DropdownButton",
  componentId: "sc-1v66t78-3"
})(["color:", ";height:auto;padding:0;"], (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary60;
});
StyledStatusMessage.defaultProps = {
  theme
};
StyledDropdownIcon.defaultProps = {
  theme
};
StyledInputContainer.defaultProps = {
  theme
};
DropdownButton.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/MultiSelect/MultiSelect.js
var MultiSelect = typedMemo((_ref) => {
  let {
    action,
    autoComplete = "off",
    autoWidth = false,
    className,
    disabled,
    filterable = true,
    id,
    inputRef,
    label,
    labelId,
    maxHeight,
    onClose,
    onOpen,
    onOptionsChange,
    options,
    placeholder: placeholder2,
    placement = "bottom-start",
    positionFixed = false,
    required: required2,
    style: style2,
    value,
    ...props
  } = _ref;
  const defaultRef = (0, import_react113.createRef)();
  const multiSelectUniqueId = (0, import_react113.useId)();
  const [inputValue, setInputValue] = (0, import_react113.useState)("");
  const ariaLabelledBy = (0, import_react113.useMemo)(() => {
    if (props["aria-label"] && !label) {
      return {
        "aria-labelledby": void 0
      };
    }
    return {};
  }, [label, props]);
  const flattenOptions = (0, import_react113.useCallback)((options2) => {
    const isGroups2 = (options3) => options3.every((option) => "options" in option && !("value" in option));
    return isGroups2(options2) ? options2.map((group) => group.options).reduce((acum, curr) => acum.concat(curr), []) : options2;
  }, []);
  const flattenedOptions = (0, import_react113.useMemo)(() => action ? [...flattenOptions(options), action] : flattenOptions(options), [action, flattenOptions, options]);
  const selectedOptions = (0, import_react113.useMemo)(() => {
    return flattenedOptions.filter((option) => "value" in option && !!value && value.find((val) => val === option.value) !== void 0) || [];
  }, [flattenedOptions, value]);
  const [filteredOptions, setFilteredOptions] = (0, import_react113.useState)(flattenedOptions);
  (0, import_react113.useEffect)(() => setFilteredOptions(flattenedOptions), [flattenedOptions]);
  (0, import_react113.useEffect)(() => {
    setInputValue("");
  }, [selectedOptions]);
  const getFirstMatchingOptionIndex = (filteredOptions2) => {
    return filteredOptions2.findIndex((option) => !option.disabled);
  };
  const handleSetInputValue = (_ref2) => {
    let {
      inputValue: inputValue2,
      isOpen: isOpen2
    } = _ref2;
    if (filterable && isOpen2 === true) {
      const newFilteredOptions = filterOptions(inputValue2);
      const firstMatchingOptionIndex = getFirstMatchingOptionIndex(newFilteredOptions);
      setFilteredOptions(newFilteredOptions);
      setHighlightedIndex(firstMatchingOptionIndex);
    }
    setInputValue(inputValue2 || "");
  };
  const filterOptions = function() {
    let inputVal = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    return flattenedOptions.filter((option) => option === action || option.content.toLowerCase().startsWith(inputVal.trim().toLowerCase()));
  };
  const handleOnIsOpenChange = (_ref3) => {
    let {
      isOpen: isOpen2
    } = _ref3;
    if (filterable && !isOpen2) {
      setFilteredOptions(flattenedOptions);
    }
    if (isOpen2 && typeof onOpen === "function") {
      onOpen();
    }
    if (!isOpen2 && typeof onClose === "function") {
      onClose();
    }
  };
  const handleOnSelectedItemChange = (changes) => {
    if (action && changes.selectedItem === action) {
      action.onActionClick(inputValue);
    }
  };
  const handleStateReducer = (state, actionAndChanges) => {
    switch (actionAndChanges.type) {
      case useCombobox.stateChangeTypes.InputBlur:
        return {
          ...actionAndChanges.changes,
          inputValue: ""
        };
      case useCombobox.stateChangeTypes.InputFocus:
        return {
          ...actionAndChanges.changes,
          isOpen: false
          // keep the menu closed when input gets focused.
        };
      case useCombobox.stateChangeTypes.InputKeyDownEnter:
      case useCombobox.stateChangeTypes.ItemClick: {
        if (!actionAndChanges.changes.selectedItem) {
          return actionAndChanges.changes;
        }
        const isSelectAction = (item) => item === action;
        if (isSelectAction(actionAndChanges.changes.selectedItem)) {
          return {
            ...actionAndChanges.changes,
            inputValue: state.inputValue
          };
        }
        const isChecked = Boolean(selectedOptions.find((i3) => actionAndChanges.changes.selectedItem && "value" in actionAndChanges.changes.selectedItem && i3.value === actionAndChanges.changes.selectedItem.value));
        isChecked ? removeItem(actionAndChanges.changes.selectedItem) : addSelectedItem(actionAndChanges.changes.selectedItem);
        return {
          ...actionAndChanges.changes,
          highlightedIndex: state.highlightedIndex,
          inputValue: "",
          isOpen: true
        };
      }
      default:
        return actionAndChanges.changes;
    }
  };
  const removeItem = (0, import_react113.useCallback)((item) => {
    if (!item) {
      return;
    }
    const newOptions = selectedOptions.filter((i3) => i3.value !== item.value) || [];
    onOptionsChange(newOptions.map((option) => option.value), newOptions);
    setFilteredOptions(flattenedOptions);
  }, [flattenedOptions, onOptionsChange, selectedOptions]);
  const addSelectedItem = (0, import_react113.useCallback)((item) => {
    if (!item) {
      return;
    }
    const newOptions = [...selectedOptions, item];
    onOptionsChange(newOptions.map((option) => option.value), newOptions);
    setFilteredOptions(flattenedOptions);
  }, [flattenedOptions, onOptionsChange, selectedOptions]);
  const {
    getInputProps,
    getItemProps,
    getLabelProps,
    getMenuProps,
    getToggleButtonProps,
    highlightedIndex,
    isOpen,
    openMenu,
    setHighlightedIndex
  } = useCombobox({
    id: multiSelectUniqueId,
    initialHighlightedIndex: 0,
    inputId: id,
    inputValue,
    itemToString: (option) => option ? option.content : "",
    items: filteredOptions,
    labelId,
    onInputValueChange: handleSetInputValue,
    onIsOpenChange: handleOnIsOpenChange,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: null,
    stateReducer: handleStateReducer
  });
  const referenceRef = (0, import_react113.useRef)(null);
  const popperRef = (0, import_react113.useRef)(null);
  const {
    styles,
    attributes,
    update: update2
  } = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: "eventListeners",
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: "offset",
      options: {
        offset: [0, 4]
      }
    }],
    strategy: positionFixed ? "fixed" : "absolute",
    placement
  });
  (0, import_react113.useEffect)(() => {
    if (!isOpen) {
      setInputValue("");
    }
  }, [isOpen]);
  const setCallbackRef = (0, import_react113.useCallback)((ref2) => {
    if (typeof inputRef === "function") {
      inputRef(ref2);
    }
  }, [inputRef]);
  const getInputRef = (0, import_react113.useCallback)(() => {
    if (inputRef && typeof inputRef === "object") {
      return inputRef;
    } else if (typeof inputRef === "function") {
      return setCallbackRef;
    }
    return defaultRef;
  }, [defaultRef, inputRef, setCallbackRef]);
  const renderLabel = (0, import_react113.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react113.default.createElement(FormControlLabel, _extends({}, getLabelProps(), {
        renderOptional: !required2
      }), label);
    }
    if ((0, import_react113.isValidElement)(label) && label.type === FormControlLabel) {
      return (0, import_react113.cloneElement)(label, getLabelProps());
    }
    warning("label must be either a string or a FormControlLabel component.");
  }, [getLabelProps, label, required2]);
  const renderToggle = (0, import_react113.useMemo)(() => {
    return import_react113.default.createElement(DropdownButton, _extends({}, getToggleButtonProps({
      disabled,
      type: "button"
    }), {
      "aria-label": "toggle menu",
      variant: "subtle"
    }), import_react113.default.createElement(StyledDropdownIcon, null));
  }, [disabled, getToggleButtonProps]);
  const renderInput = (0, import_react113.useMemo)(() => {
    return import_react113.default.createElement(StyledInputContainer, {
      ref: referenceRef
    }, import_react113.default.createElement(Input, _extends({}, getInputProps({
      ...props,
      ...ariaLabelledBy,
      autoComplete,
      disabled,
      onClick: () => {
        !isOpen && openMenu();
      },
      onFocus: (event) => {
        if (typeof props.onFocus === "function") {
          props.onFocus(event);
        }
      },
      onKeyDown: (event) => {
        switch (event.key) {
          case "Backspace":
            if (!inputValue) {
              removeItem(selectedOptions[selectedOptions.length - 1]);
            }
            break;
          case "Enter":
            event.preventDefault();
            if (isOpen === false) {
              openMenu();
              event.nativeEvent.preventDownshiftDefault = true;
            }
            break;
          case "Escape":
            if (isOpen === false) {
              onOptionsChange([], []);
            }
            break;
        }
      },
      placeholder: placeholder2,
      ref: getInputRef()
    }), {
      chips: selectedOptions.map((option) => ({
        label: option.content,
        onDelete: disabled ? void 0 : () => removeItem(option)
      })),
      iconRight: renderToggle,
      readOnly: !filterable,
      required: required2 && selectedOptions.length === 0
    })));
  }, [autoComplete, ariaLabelledBy, disabled, filterable, getInputProps, getInputRef, inputValue, isOpen, onOptionsChange, openMenu, placeholder2, props, removeItem, renderToggle, required2, selectedOptions]);
  return import_react113.default.createElement("div", null, renderLabel, renderInput, import_react113.default.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), import_react113.default.createElement(List, {
    action,
    addItem: addSelectedItem,
    autoWidth,
    filteredItems: filteredOptions,
    getItemProps,
    getMenuProps: () => getMenuProps({
      ...ariaLabelledBy
    }),
    highlightedIndex,
    isOpen,
    items: options,
    maxHeight,
    removeItem,
    selectedItems: selectedOptions,
    update: update2
  })));
});

// node_modules/@bigcommerce/big-design/dist/es/components/Pagination/Pagination.js
var import_react114 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Pagination/styled.js
var StyledButton4 = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-12shuvi-0"
})(["color:", ";width:auto;"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary70;
});
StyledButton4.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Pagination/Pagination.js
var defaultGetRangeLabel = (start3, end2, totalItems) => {
  if (start3 === end2) {
    return `${start3} of ${totalItems}`;
  }
  return `${start3} - ${end2} of ${totalItems}`;
};
var Pagination = (0, import_react114.memo)((_ref) => {
  let {
    itemsPerPage,
    currentPage,
    totalItems,
    itemsPerPageOptions = [],
    onPageChange,
    onItemsPerPageChange,
    label = "pagination",
    previousLabel = "Previous page",
    nextLabel = "Next page",
    getRangeLabel = defaultGetRangeLabel
  } = _ref;
  const [maxPages, setMaxPages] = (0, import_react114.useState)(Math.max(1, Math.ceil(totalItems / itemsPerPage)));
  const [itemRange, setItemRange] = (0, import_react114.useState)({
    start: 0,
    end: 0
  });
  const handlePageOutOfBounds = (0, import_react114.useCallback)(() => {
    if (currentPage < 1 || isNaN(currentPage) || currentPage === void 0) {
      onPageChange(1);
    } else if (currentPage > maxPages) {
      onPageChange(maxPages);
    }
  }, [currentPage, maxPages, onPageChange]);
  const handlePerPageOutOfBounds = (0, import_react114.useCallback)(() => {
    if (itemsPerPage < 1 || isNaN(itemsPerPage) || itemsPerPage === void 0) {
      onItemsPerPageChange(itemsPerPageOptions[0]);
    }
  }, [itemsPerPage, onItemsPerPageChange, itemsPerPageOptions]);
  const calculateRange = (0, import_react114.useCallback)(() => {
    let firstItemInRange = itemsPerPage * (currentPage - 1) + 1;
    let lastItemInRange = itemsPerPage * currentPage;
    firstItemInRange = Math.min(firstItemInRange, totalItems);
    lastItemInRange = Math.min(lastItemInRange, totalItems);
    if (lastItemInRange === 0 || isNaN(lastItemInRange) || isNaN(firstItemInRange)) {
      firstItemInRange = 0;
      lastItemInRange = 0;
    }
    setItemRange({
      start: firstItemInRange,
      end: lastItemInRange
    });
  }, [itemsPerPage, currentPage, totalItems]);
  (0, import_react114.useEffect)(() => {
    handlePageOutOfBounds();
    handlePerPageOutOfBounds();
    calculateRange();
    setMaxPages(Math.max(1, Math.ceil(totalItems / itemsPerPage)));
  }, [calculateRange, currentPage, handlePageOutOfBounds, handlePerPageOutOfBounds, itemsPerPage, totalItems]);
  const handlePageIncrease = () => {
    onPageChange(currentPage + 1);
  };
  const handlePageDecrease = () => {
    onPageChange(currentPage - 1);
  };
  const handleRangeChange = (item) => {
    return onItemsPerPageChange(Number(item.hash));
  };
  return import_react114.default.createElement(Flex, {
    "aria-label": label,
    flexDirection: "row",
    role: "navigation"
  }, import_react114.default.createElement(FlexItem, null, import_react114.default.createElement(Dropdown, {
    items: itemsPerPageOptions.map((range) => ({
      content: `${range}`,
      hash: `${range}`,
      onItemClick: handleRangeChange
    })),
    positionFixed: true,
    toggle: import_react114.default.createElement(StyledButton4, {
      iconRight: import_react114.default.createElement(ArrowDropDownIcon, {
        size: "xxLarge"
      }),
      type: "button",
      variant: "subtle"
    }, getRangeLabel(itemRange.start, itemRange.end, totalItems))
  })), import_react114.default.createElement(FlexItem, null, import_react114.default.createElement(StyledButton4, {
    disabled: currentPage <= 1,
    iconOnly: import_react114.default.createElement(ChevronLeftIcon, {
      title: previousLabel
    }),
    onClick: handlePageDecrease,
    type: "button",
    variant: "subtle"
  }), import_react114.default.createElement(StyledButton4, {
    disabled: currentPage >= maxPages,
    iconOnly: import_react114.default.createElement(ChevronRightIcon, {
      title: nextLabel
    }),
    onClick: handlePageIncrease,
    type: "button",
    variant: "subtle"
  })));
});
Pagination.displayName = "Pagination";

// node_modules/@bigcommerce/big-design/dist/es/components/PillTabs/PillTabs.js
var import_react115 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/PillTabs/styled.js
var StyledPillTab = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledPillTab",
  componentId: "sc-1n62hko-0"
})(["", ""], (props) => props.isActive && Ae(["background-color:", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.primary20;
}));
var StyledFlexItem3 = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledFlexItem",
  componentId: "sc-1n62hko-1"
})(["", ""], (props) => !props.isVisible && Ae(["position:absolute;visibility:hidden;z-index:", ";"], (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return -theme2.zIndex.tooltip;
}));
StyledPillTab.defaultProps = {
  theme
};
StyledFlexItem3.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/PillTabs/PillTabs.js
var PillTabs = (_ref) => {
  let {
    activePills,
    items,
    onPillClick
  } = _ref;
  const parentRef = (0, import_react115.createRef)();
  const dropdownRef = (0, import_react115.createRef)();
  const [isMenuVisible, setIsMenuVisible] = (0, import_react115.useState)(false);
  const [pillsState, setPillsState] = (0, import_react115.useState)(items.map((item) => ({
    isVisible: true,
    item,
    ref: (0, import_react115.createRef)()
  })));
  const hideOverflowedPills = (0, import_react115.useCallback)(() => {
    var _a, _b;
    const parentWidth = (_a = parentRef.current) == null ? void 0 : _a.offsetWidth;
    const dropdownWidth = (_b = dropdownRef.current) == null ? void 0 : _b.offsetWidth;
    if (!parentWidth || !dropdownWidth) {
      return;
    }
    let remainingWidth = parentWidth;
    const newState = pillsState.map((stateObj) => {
      var _a2;
      const pillWidth = (_a2 = stateObj.ref.current) == null ? void 0 : _a2.offsetWidth;
      if (!pillWidth) {
        return stateObj;
      }
      if (remainingWidth - pillWidth > dropdownWidth) {
        remainingWidth -= pillWidth;
        return {
          ...stateObj,
          isVisible: true
        };
      }
      return {
        ...stateObj,
        isVisible: false
      };
    });
    const visiblePills = pillsState.filter((stateObj) => stateObj.isVisible);
    const newVisiblePills = newState.filter((stateObj) => stateObj.isVisible);
    if (visiblePills.length !== newVisiblePills.length) {
      setIsMenuVisible(newVisiblePills.length !== items.length);
      setPillsState(newState);
    }
  }, [items, parentRef, dropdownRef, pillsState]);
  const renderedDropdown = (0, import_react115.useMemo)(() => {
    const dropdownItems = pillsState.filter((stateObj) => !stateObj.isVisible).map((stateObj) => {
      const item = items.find((_ref2) => {
        let {
          title
        } = _ref2;
        return title === stateObj.item.title;
      });
      const isActive = item ? activePills.includes(item.id) : false;
      return {
        content: stateObj.item.title,
        onItemClick: () => onPillClick(stateObj.item.id),
        hash: stateObj.item.title.toLowerCase(),
        icon: isActive ? import_react115.default.createElement(CheckIcon, null) : void 0
      };
    });
    return import_react115.default.createElement(StyledFlexItem3, {
      "data-testid": "pilltabs-dropdown-toggle",
      isVisible: isMenuVisible,
      ref: dropdownRef,
      role: "listitem"
    }, import_react115.default.createElement(Dropdown, {
      items: dropdownItems,
      toggle: import_react115.default.createElement(Button, {
        iconOnly: import_react115.default.createElement(MoreHorizIcon, {
          title: "add"
        }),
        variant: "subtle"
      })
    }));
  }, [items, pillsState, isMenuVisible, dropdownRef, activePills, onPillClick]);
  (0, import_react115.useEffect)(() => {
    const itemIds = items.map((item) => item.id);
    const stateIds = pillsState.map((stateItem) => stateItem.item.id);
    if (itemIds.join() !== stateIds.join()) {
      const newState = items.map((item) => {
        const oldItem = pillsState.find((stateItem) => stateItem.item === item);
        if (oldItem) {
          return oldItem;
        }
        return {
          // hideOverflownPills will correct this field if it needs correction
          isVisible: true,
          item,
          ref: (0, import_react115.createRef)()
        };
      });
      setPillsState(newState);
    }
  }, [items, pillsState]);
  const renderedPills = (0, import_react115.useMemo)(() => items.map((item, index) => {
    const pill = pillsState[index];
    if (!pill) {
      return;
    }
    return import_react115.default.createElement(StyledFlexItem3, {
      "data-testid": `pilltabs-pill-${index}`,
      isVisible: pill.isVisible,
      key: index,
      ref: pill.ref,
      role: "listitem"
    }, import_react115.default.createElement(StyledPillTab, {
      disabled: !pill.isVisible,
      isActive: activePills.includes(item.id),
      marginRight: "xSmall",
      onClick: () => onPillClick(item.id),
      variant: "subtle"
    }, item.title));
  }), [items, pillsState, activePills, onPillClick]);
  (0, import_react115.useEffect)(() => {
    hideOverflowedPills();
  }, [items, parentRef, pillsState, hideOverflowedPills]);
  useWindowResizeListener(() => {
    hideOverflowedPills();
  });
  return items.length > 0 ? import_react115.default.createElement(Flex, {
    "data-testid": "pilltabs-wrapper",
    flexDirection: "row",
    flexWrap: "nowrap",
    ref: parentRef,
    role: "list"
  }, renderedPills, renderedDropdown) : null;
};
PillTabs.displayName = "Pill Tabs";

// node_modules/@bigcommerce/big-design/dist/es/components/Popover/Popover.js
var import_react116 = __toESM(require_react());
var Popover = (_ref) => {
  let {
    anchorElement,
    children,
    isOpen,
    role = "dialog",
    ...props
  } = _ref;
  const uniquePopoverId = (0, import_react116.useId)();
  const rest = excludeMarginProps(props);
  (0, import_react116.useEffect)(() => {
    if (!anchorElement) {
      return;
    }
    anchorElement.setAttribute("aria-controls", uniquePopoverId);
    anchorElement.setAttribute("aria-expanded", String(isOpen));
    anchorElement.setAttribute("aria-haspopup", role);
  }, [anchorElement, isOpen, role, uniquePopoverId]);
  return isOpen ? import_react116.default.createElement(InternalPopover, _extends({
    anchorElement
  }, rest, {
    id: uniquePopoverId
  }), children) : null;
};
var InternalPopover = (_ref2) => {
  let {
    anchorElement,
    children,
    closeOnClickOutside = true,
    closeOnEscKey = true,
    id,
    label,
    matchAnchorElementWidth = false,
    skidding = 0,
    distance: distance3 = 4,
    onClose = () => null,
    placement = "auto",
    role,
    ...props
  } = _ref2;
  const [popperElement, setPopperElement] = (0, import_react116.useState)(null);
  const previousFocus = (0, import_react116.useRef)(typeof document !== "undefined" ? document.activeElement : null);
  const popperModifiers = (0, import_react116.useMemo)(() => [{
    name: "offset",
    options: {
      offset: [skidding, distance3]
    }
  }, {
    name: "sameWidth",
    enabled: matchAnchorElementWidth,
    phase: "beforeWrite",
    requires: ["computeStyles"],
    fn(_ref3) {
      let {
        state
      } = _ref3;
      state.styles.popper.width = `${state.rects.reference.width}px`;
    },
    effect(_ref4) {
      let {
        state
      } = _ref4;
      const element = state.elements.reference;
      if (element instanceof HTMLElement) {
        state.elements.popper.style.width = `${element.offsetWidth}px`;
      }
    }
  }], [skidding, distance3, matchAnchorElementWidth]);
  const {
    styles,
    attributes
  } = usePopper(anchorElement, popperElement, {
    modifiers: popperModifiers,
    placement
  });
  (0, import_react116.useEffect)(() => {
    const prevFocus = previousFocus.current;
    return () => {
      if (prevFocus instanceof HTMLElement) {
        prevFocus.focus();
      }
    };
  }, []);
  (0, import_react116.useEffect)(() => {
    if (typeof document === "undefined" || !closeOnClickOutside) {
      return;
    }
    const clickHandler = (event) => {
      if (!(event.target instanceof Element)) {
        return;
      }
      if (popperElement == null ? void 0 : popperElement.contains(event.target)) {
        return;
      }
      if (anchorElement == null ? void 0 : anchorElement.contains(event.target)) {
        return;
      }
      onClose();
    };
    document.addEventListener("click", clickHandler);
    return () => {
      document.removeEventListener("click", clickHandler);
    };
  }, [anchorElement, closeOnClickOutside, onClose, popperElement]);
  (0, import_react116.useEffect)(() => {
    if (typeof document === "undefined" || !closeOnEscKey) {
      return;
    }
    const keydownHandler = (event) => {
      if (event.key === "Escape") {
        onClose();
      }
    };
    document.addEventListener("keydown", keydownHandler);
    return () => {
      document.removeEventListener("keydown", keydownHandler);
    };
  }, [closeOnEscKey, onClose]);
  return import_react116.default.createElement(Box, _extends({
    "aria-label": label,
    backgroundColor: "white",
    padding: "medium",
    role,
    shadow: "floating",
    tabIndex: -1,
    zIndex: "popover"
  }, props, attributes.popper, {
    id,
    ref: setPopperElement,
    style: styles.popper
  }), children);
};

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressBar/ProgressBar.js
var import_react117 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressBar/styled.js
var StyledProgressBar = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledProgressBar",
  componentId: "sc-1b2lkfu-0"
})(["background-color:", ";height:", ";overflow:hidden;width:100%;"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary20;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.spacing.xxSmall;
});
var StyledProgressBarFiller = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledProgressBarFiller",
  componentId: "sc-1b2lkfu-1"
})(["background-color:", ";height:100%;overflow:hidden;", ";"], (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.primary;
}, (_ref4) => {
  let {
    percent,
    theme: theme2
  } = _ref4;
  return typeof percent === "number" ? Ae(["", " width:", "%;"], withTransition(["width", "background-color", "height"]), percent) : Ae(["animation:", " 2s ease-in-out infinite;position:relative;width:6.25%;"], theme2.keyframes.loading);
});
StyledProgressBar.defaultProps = {
  theme
};
StyledProgressBarFiller.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/ProgressBar/ProgressBar.js
var ProgressBar = (_ref) => {
  let {
    percent
  } = _ref;
  return typeof percent === "number" ? import_react117.default.createElement(StyledProgressBar, {
    "aria-valuemax": 100,
    "aria-valuemin": 0,
    "aria-valuenow": percent,
    role: "progressbar"
  }, import_react117.default.createElement(StyledProgressBarFiller, {
    percent
  })) : import_react117.default.createElement(StyledProgressBar, {
    role: "progressbar"
  }, import_react117.default.createElement(StyledProgressBarFiller, null));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Search/Search.js
var import_react118 = __toESM(require_react());
var Search = (_ref) => {
  let {
    value,
    onChange,
    onSubmit,
    placeholder: placeholder2 = "Search",
    "aria-label": ariaLabel = "Search",
    autoComplete = "off",
    ...props
  } = _ref;
  const handleSubmit = (event) => {
    event.preventDefault();
    event.stopPropagation();
    if (typeof onSubmit === "function") {
      onSubmit(event);
    }
  };
  return import_react118.default.createElement(Form, {
    fullWidth: true,
    onSubmit: handleSubmit
  }, import_react118.default.createElement(Flex, {
    alignItems: "center",
    backgroundColor: "white",
    flexDirection: "row",
    paddingBottom: "xxSmall"
  }, import_react118.default.createElement(FlexItem, {
    flexGrow: 1,
    marginRight: "small"
  }, import_react118.default.createElement(Input, _extends({}, props, {
    "aria-label": ariaLabel,
    autoComplete,
    iconLeft: import_react118.default.createElement(SearchIcon, {
      color: "secondary50"
    }),
    onChange,
    placeholder: placeholder2,
    type: "search",
    value
  }))), import_react118.default.createElement(Button, {
    mobileWidth: "auto",
    type: "submit",
    variant: "secondary"
  }, "Search")));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Select/Select.js
var import_react119 = __toESM(require_react());
var Select = typedMemo((_ref) => {
  let {
    action,
    autoComplete = "off",
    autoWidth = false,
    className,
    disabled,
    filterable = true,
    id,
    inputRef,
    label,
    labelId,
    maxHeight,
    onClose,
    onOpen,
    onOptionChange,
    options,
    placeholder: placeholder2,
    placement = "bottom-start",
    positionFixed = false,
    required: required2,
    style: style2,
    value,
    ...props
  } = _ref;
  const defaultRef = (0, import_react119.createRef)();
  const selectUniqueId = (0, import_react119.useId)();
  const [inputValue, setInputValue] = (0, import_react119.useState)("");
  const ariaLabelledBy = (0, import_react119.useMemo)(() => {
    if (props["aria-label"] && !label) {
      return {
        "aria-labelledby": void 0
      };
    }
    return {};
  }, [label, props]);
  const flattenOptions = (0, import_react119.useCallback)((options2) => {
    const isGroups2 = (options3) => options3.every((option) => "options" in option && !("value" in option));
    return isGroups2(options2) ? options2.map((group) => group.options).reduce((acum, curr) => acum.concat(curr), []) : options2;
  }, []);
  const flattenedOptions = (0, import_react119.useMemo)(() => action ? [...flattenOptions(options), action] : flattenOptions(options), [action, flattenOptions, options]);
  const selectedOption = (0, import_react119.useMemo)(() => {
    return flattenedOptions.find((option) => "value" in option && option.value === value);
  }, [flattenedOptions, value]);
  const [filteredOptions, setFilteredOptions] = (0, import_react119.useState)(flattenedOptions);
  (0, import_react119.useEffect)(() => setFilteredOptions(flattenedOptions), [flattenedOptions]);
  const getFirstMatchingOptionIndex = (filteredOptions2) => {
    return filteredOptions2.findIndex((option) => !option.disabled);
  };
  const handleOnSelectedItemChange = (changes) => {
    if (action && changes.selectedItem && changes.selectedItem.content === action.content) {
      action.onActionClick(inputValue || null);
    } else if (changes.selectedItem && "value" in changes.selectedItem && typeof onOptionChange === "function") {
      onOptionChange(changes.selectedItem.value, changes.selectedItem);
    }
  };
  const handleOnInputValueChange = (_ref2) => {
    let {
      inputValue: inputValue2,
      isOpen: isOpen2
    } = _ref2;
    if (filterable && isOpen2 === true) {
      const newFilteredOptions = filterOptions(inputValue2);
      const firstMatchingOptionIndex = getFirstMatchingOptionIndex(newFilteredOptions);
      setFilteredOptions(newFilteredOptions);
      if (inputValue2 !== "") {
        setHighlightedIndex(firstMatchingOptionIndex);
      } else if (selectedItem) {
        const selectedItemIndex = flattenedOptions.indexOf(selectedItem);
        setHighlightedIndex(selectedItemIndex);
      }
    }
    setInputValue(inputValue2 || "");
  };
  const filterOptions = function() {
    let inputVal = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    return flattenedOptions.filter((option) => option.content === (action && action.content) || option.content.toLowerCase().startsWith(inputVal.trim().toLowerCase()));
  };
  const handleOnIsOpenChange = (_ref3) => {
    let {
      isOpen: isOpen2
    } = _ref3;
    if (filterable && !isOpen2) {
      setFilteredOptions(flattenedOptions);
    }
    if (isOpen2 && typeof onOpen === "function") {
      onOpen();
    }
    if (!isOpen2 && typeof onClose === "function") {
      onClose();
    }
  };
  const handleStateReducer = (_state, actionAndChanges) => {
    switch (actionAndChanges.type) {
      case useCombobox.stateChangeTypes.InputBlur:
        return {
          ...actionAndChanges.changes,
          inputValue: selectedOption ? selectedOption.content : ""
        };
      case useCombobox.stateChangeTypes.InputFocus:
        return {
          ...actionAndChanges.changes,
          isOpen: false
          // keep the menu closed when input gets focused.
        };
      default:
        return actionAndChanges.changes;
    }
  };
  const {
    closeMenu,
    getInputProps,
    getItemProps,
    getLabelProps,
    getMenuProps,
    getToggleButtonProps,
    highlightedIndex,
    isOpen,
    openMenu,
    selectedItem,
    setHighlightedIndex
  } = useCombobox({
    id: selectUniqueId,
    inputId: id,
    inputValue,
    itemToString: (item) => item ? item.content : "",
    items: filteredOptions,
    labelId,
    onInputValueChange: handleOnInputValueChange,
    onIsOpenChange: handleOnIsOpenChange,
    onSelectedItemChange: handleOnSelectedItemChange,
    selectedItem: selectedOption || null,
    stateReducer: handleStateReducer
  });
  const referenceRef = (0, import_react119.useRef)(null);
  const popperRef = (0, import_react119.useRef)(null);
  const {
    styles,
    attributes,
    update: update2
  } = usePopper(referenceRef.current, popperRef.current, {
    modifiers: [{
      name: "eventListeners",
      options: {
        scroll: isOpen,
        resize: isOpen
      }
    }, {
      name: "offset",
      options: {
        offset: [0, 4]
      }
    }],
    strategy: positionFixed ? "fixed" : "absolute",
    placement
  });
  const setCallbackRef = (0, import_react119.useCallback)((ref2) => {
    if (typeof inputRef === "function") {
      inputRef(ref2);
    }
  }, [inputRef]);
  const getInputRef = (0, import_react119.useCallback)(() => {
    if (inputRef && typeof inputRef === "object") {
      return inputRef;
    } else if (typeof inputRef === "function") {
      return setCallbackRef;
    }
    return defaultRef;
  }, [defaultRef, inputRef, setCallbackRef]);
  const renderLabel = (0, import_react119.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react119.default.createElement(FormControlLabel, _extends({}, getLabelProps(), {
        renderOptional: !required2
      }), label);
    }
    if ((0, import_react119.isValidElement)(label) && label.type === FormControlLabel) {
      return (0, import_react119.cloneElement)(label, getLabelProps());
    }
    warning("label must be either a string or a FormControlLabel component.");
  }, [getLabelProps, label, required2]);
  const renderToggle = (0, import_react119.useMemo)(() => {
    return import_react119.default.createElement(DropdownButton, _extends({}, getToggleButtonProps({
      disabled,
      type: "button"
    }), {
      "aria-label": "toggle menu",
      variant: "subtle"
    }), import_react119.default.createElement(StyledDropdownIcon, null));
  }, [disabled, getToggleButtonProps]);
  const renderInput = (0, import_react119.useMemo)(() => {
    return import_react119.default.createElement(StyledInputContainer, {
      ref: referenceRef
    }, import_react119.default.createElement(Input, _extends({}, getInputProps({
      ...props,
      ...ariaLabelledBy,
      autoComplete,
      disabled,
      onClick: () => {
        !isOpen && openMenu();
      },
      onFocus: (event) => {
        if (typeof props.onFocus === "function") {
          props.onFocus(event);
        }
      },
      onKeyDown: (event) => {
        switch (event.key) {
          case "Enter":
            event.preventDefault();
            if (isOpen === false) {
              openMenu();
              event.nativeEvent.preventDownshiftDefault = true;
            }
            break;
          case "Escape":
            if (isOpen === false) {
              onOptionChange();
            } else {
              closeMenu();
            }
            event.nativeEvent.preventDownshiftDefault = true;
            break;
        }
      },
      placeholder: placeholder2,
      ref: getInputRef(),
      readOnly: !filterable,
      required: required2
    }), {
      iconLeft: selectedItem == null ? void 0 : selectedItem.icon,
      iconRight: renderToggle
    })));
  }, [autoComplete, ariaLabelledBy, closeMenu, disabled, filterable, getInputProps, getInputRef, isOpen, onOptionChange, openMenu, placeholder2, props, renderToggle, required2, selectedItem]);
  return import_react119.default.createElement("div", null, renderLabel, renderInput, import_react119.default.createElement(Box, _extends({
    ref: popperRef,
    style: styles.popper
  }, attributes.poppper, {
    zIndex: "popover"
  }), import_react119.default.createElement(List, {
    action,
    autoWidth,
    filteredItems: filteredOptions,
    getItemProps,
    getMenuProps: () => getMenuProps({
      ...ariaLabelledBy
    }),
    highlightedIndex,
    isOpen,
    items: options,
    maxHeight,
    selectedItem: selectedItem && "value" in selectedItem ? selectedItem : null,
    update: update2
  })));
});

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTable/StatefulTable.js
var import_react138 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Table.js
var import_react137 = __toESM(require_react());

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react128 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread22(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = null != arguments[i3] ? arguments[i3] : {};
    i3 % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

// node_modules/redux/es/redux.js
var $$observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var randomString = function randomString2() {
  return Math.random().toString(36).substring(7).split("").join(".");
};
var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
function isPlainObject2(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0)
    return "undefined";
  if (val === null)
    return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val))
    return "array";
  if (isDate2(val))
    return "date";
  if (isError(val))
    return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate2(val) {
  if (val instanceof Date)
    return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer2, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer2, preloadedState);
  }
  if (typeof reducer2 !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer2) + "'");
  }
  var currentReducer = reducer2;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState2() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject2(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i3 = 0; i3 < listeners.length; i3++) {
      var listener = listeners[i3];
      listener();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState2());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState: getState2,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function bindActionCreator(actionCreator, dispatch) {
  return function() {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === "function") {
    return bindActionCreator(actionCreators, dispatch);
  }
  if (typeof actionCreators !== "object" || actionCreators === null) {
    throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + `'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
  }
  var boundActionCreators = {};
  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === "function") {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a3, b2) {
    return function() {
      return a3(b2.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore4) {
    return function() {
      var store = createStore4.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread22(_objectSpread22({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}

// node_modules/react-redux/es/components/Provider.js
var import_react122 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/react-redux/es/components/Context.js
var import_react120 = __toESM(require_react());
var ReactReduxContext = import_react120.default.createContext(null);
if (true) {
  ReactReduxContext.displayName = "ReactRedux";
}

// node_modules/react-redux/es/utils/batch.js
function defaultNoopBatch(callback) {
  callback();
}
var batch = defaultNoopBatch;
var setBatch = function setBatch2(newBatch) {
  return batch = newBatch;
};
var getBatch = function getBatch2() {
  return batch;
};

// node_modules/react-redux/es/utils/Subscription.js
function createListenerCollection() {
  var batch2 = getBatch();
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify2() {
      batch2(function() {
        var listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get2() {
      var listeners = [];
      var listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null)
          return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
var nullListeners = {
  notify: function notify() {
  },
  get: function get() {
    return [];
  }
};
function createSubscription(store, parentSub) {
  var unsubscribe;
  var listeners = nullListeners;
  function addNestedSub(listener) {
    trySubscribe();
    return listeners.subscribe(listener);
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  var subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: function getListeners() {
      return listeners;
    }
  };
  return subscription;
}

// node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
var import_react121 = __toESM(require_react());
var useIsomorphicLayoutEffect4 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react121.useLayoutEffect : import_react121.useEffect;

// node_modules/react-redux/es/components/Provider.js
function Provider(_ref) {
  var store = _ref.store, context = _ref.context, children = _ref.children;
  var contextValue = (0, import_react122.useMemo)(function() {
    var subscription = createSubscription(store);
    return {
      store,
      subscription
    };
  }, [store]);
  var previousState = (0, import_react122.useMemo)(function() {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect4(function() {
    var subscription = contextValue.subscription;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function() {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return import_react122.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
if (true) {
  Provider.propTypes = {
    store: import_prop_types3.default.shape({
      subscribe: import_prop_types3.default.func.isRequired,
      dispatch: import_prop_types3.default.func.isRequired,
      getState: import_prop_types3.default.func.isRequired
    }),
    context: import_prop_types3.default.object,
    children: import_prop_types3.default.any
  };
}
var Provider_default = Provider;

// node_modules/react-redux/es/components/connectAdvanced.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var import_react123 = __toESM(require_react());
var import_react_is2 = __toESM(require_react_is());
var _excluded6 = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"];
var _excluded22 = ["reactReduxForwardedRef"];
var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [null, null];
var stringifyComponent = function stringifyComponent2(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};
function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  useIsomorphicLayoutEffect4(function() {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  if (!shouldHandleStateChanges)
    return;
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates2() {
    if (didUnsubscribe) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error2;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e4) {
      error2 = e4;
      lastThrownError = e4;
    }
    if (!error2) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      forceComponentUpdateDispatch({
        type: "STORE_UPDATED",
        payload: {
          error: error2
        }
      });
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper2() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
var initStateUpdates = function initStateUpdates2() {
  return [null, 0];
};
function connectAdvanced(selectorFactory, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }
  var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef76 = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded6);
  if (true) {
    if (renderCountProp !== void 0) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }
    if (withRef) {
      throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
    }
    var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    if (storeKey !== "store") {
      throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
    }
  }
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if (!(0, import_react_is2.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName,
      methodName,
      renderCountProp,
      shouldHandleStateChanges,
      storeKey,
      displayName,
      wrappedComponentName,
      WrappedComponent
    });
    var pure = connectOptions.pure;
    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    }
    var usePureOnlyMemo = pure ? import_react123.useMemo : function(callback) {
      return callback();
    };
    function ConnectFunction(props) {
      var _useMemo = (0, import_react123.useMemo)(function() {
        var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded22);
        return [props.context, reactReduxForwardedRef2, wrapperProps2];
      }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
      var ContextToUse = (0, import_react123.useMemo)(function() {
        return propsContext && propsContext.Consumer && (0, import_react_is2.isContextConsumer)(import_react123.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]);
      var contextValue = (0, import_react123.useContext)(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (!didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0, import_react123.useMemo)(function() {
        return createChildSelector(store);
      }, [store]);
      var _useMemo2 = (0, import_react123.useMemo)(function() {
        if (!shouldHandleStateChanges)
          return NO_SUBSCRIPTION_ARRAY;
        var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
        var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
        return [subscription2, notifyNestedSubs2];
      }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
      var overriddenContextValue = (0, import_react123.useMemo)(function() {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return _extends({}, contextValue, {
          subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var _useReducer = (0, import_react123.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      }
      var lastChildProps = (0, import_react123.useRef)();
      var lastWrapperProps = (0, import_react123.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, import_react123.useRef)();
      var renderIsScheduled = (0, import_react123.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function() {
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        }
        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
      var renderedWrappedComponent = (0, import_react123.useMemo)(function() {
        return import_react123.default.createElement(WrappedComponent, _extends({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = (0, import_react123.useMemo)(function() {
        if (shouldHandleStateChanges) {
          return import_react123.default.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var Connect = pure ? import_react123.default.memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef76) {
      var forwarded = import_react123.default.forwardRef(function forwardConnectRef(props, ref2) {
        return import_react123.default.createElement(Connect, _extends({}, props, {
          reactReduxForwardedRef: ref2
        }));
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, import_hoist_non_react_statics.default)(forwarded, WrappedComponent);
    }
    return (0, import_hoist_non_react_statics.default)(Connect, WrappedComponent);
  };
}

// node_modules/react-redux/es/utils/shallowEqual.js
function is(x2, y3) {
  if (x2 === y3) {
    return x2 !== 0 || y3 !== 0 || 1 / x2 === 1 / y3;
  } else {
    return x2 !== x2 && y3 !== y3;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB))
    return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length)
    return false;
  for (var i3 = 0; i3 < keysA.length; i3++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i3]) || !is(objA[keysA[i3]], objB[keysA[i3]])) {
      return false;
    }
  }
  return true;
}

// node_modules/react-redux/es/utils/bindActionCreators.js
function bindActionCreators2(actionCreators, dispatch) {
  var boundActionCreators = {};
  var _loop = function _loop2(key2) {
    var actionCreator = actionCreators[key2];
    if (typeof actionCreator === "function") {
      boundActionCreators[key2] = function() {
        return dispatch(actionCreator.apply(void 0, arguments));
      };
    }
  };
  for (var key in actionCreators) {
    _loop(key);
  }
  return boundActionCreators;
}

// node_modules/react-redux/es/utils/isPlainObject.js
function isPlainObject3(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null)
    return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}

// node_modules/react-redux/es/utils/warning.js
function warning3(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e4) {
  }
}

// node_modules/react-redux/es/utils/verifyPlainObject.js
function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject3(value)) {
    warning3(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

// node_modules/react-redux/es/connect/wrapMapToProps.js
function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === "function") {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      if (true)
        verifyPlainObject(props, displayName, methodName);
      return props;
    };
    return proxy;
  };
}

// node_modules/react-redux/es/connect/mapDispatchToProps.js
function whenMapDispatchToPropsIsFunction(mapDispatchToProps2) {
  return typeof mapDispatchToProps2 === "function" ? wrapMapToPropsFunc(mapDispatchToProps2, "mapDispatchToProps") : void 0;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps2) {
  return !mapDispatchToProps2 ? wrapMapToPropsConstant(function(dispatch) {
    return {
      dispatch
    };
  }) : void 0;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps2) {
  return mapDispatchToProps2 && typeof mapDispatchToProps2 === "object" ? wrapMapToPropsConstant(function(dispatch) {
    return bindActionCreators2(mapDispatchToProps2, dispatch);
  }) : void 0;
}
var mapDispatchToProps_default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

// node_modules/react-redux/es/connect/mapStateToProps.js
function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function() {
    return {};
  }) : void 0;
}
var mapStateToProps_default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

// node_modules/react-redux/es/connect/mergeProps.js
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
          mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true)
          verifyPlainObject(mergedProps, displayName, "mergeProps");
      }
      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function() {
    return defaultMergeProps;
  } : void 0;
}
var mergeProps_default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

// node_modules/react-redux/es/connect/verifySubselectors.js
function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
    if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
      warning3("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, displayName) {
  verify(mapStateToProps, "mapStateToProps", displayName);
  verify(mapDispatchToProps2, "mapDispatchToProps", displayName);
  verify(mergeProps, "mergeProps", displayName);
}

// node_modules/react-redux/es/connect/selectorFactory.js
var _excluded7 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps2(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps)
      dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps)
      stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps2.dependsOnOwnProps)
      dispatchProps = mapDispatchToProps2(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged)
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged)
      return handleNewPropsAndNewState();
    if (propsChanged)
      return handleNewProps();
    if (stateChanged)
      return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded7);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps2 = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);
  if (true) {
    verifySubselectors(mapStateToProps, mapDispatchToProps2, mergeProps, options.displayName);
  }
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps2, mergeProps, dispatch, options);
}

// node_modules/react-redux/es/connect/connect.js
var _excluded8 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
function match2(arg, factories, name) {
  for (var i3 = factories.length - 1; i3 >= 0; i3--) {
    var result = factories[i3](arg);
    if (result)
      return result;
  }
  return function(dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}
function strictEqual(a3, b2) {
  return a3 === b2;
}
function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps_default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps_default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps_default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
  return function connect(mapStateToProps, mapDispatchToProps2, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }
    var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded8);
    var initMapStateToProps = match2(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
    var initMapDispatchToProps = match2(mapDispatchToProps2, mapDispatchToPropsFactories, "mapDispatchToProps");
    var initMergeProps = match2(mergeProps, mergePropsFactories, "mergeProps");
    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: "connect",
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps,
      pure,
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual,
      areMergedPropsEqual
    }, extraOptions));
  };
}
var connect_default = createConnect();

// node_modules/react-redux/es/hooks/useStore.js
var import_react125 = __toESM(require_react());

// node_modules/react-redux/es/hooks/useReduxContext.js
var import_react124 = __toESM(require_react());
function useReduxContext() {
  var contextValue = (0, import_react124.useContext)(ReactReduxContext);
  if (!contextValue) {
    throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
  }
  return contextValue;
}

// node_modules/react-redux/es/hooks/useStore.js
function createStoreHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react125.useContext)(context);
  };
  return function useStore3() {
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store;
    return store;
  };
}
var useStore = createStoreHook();

// node_modules/react-redux/es/hooks/useDispatch.js
function createDispatchHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useStore3 = context === ReactReduxContext ? useStore : createStoreHook(context);
  return function useDispatch2() {
    var store = useStore3();
    return store.dispatch;
  };
}
var useDispatch = createDispatchHook();

// node_modules/react-redux/es/hooks/useSelector.js
var import_react126 = __toESM(require_react());
var refEquality = function refEquality2(a3, b2) {
  return a3 === b2;
};
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, import_react126.useReducer)(function(s3) {
    return s3 + 1;
  }, 0), forceRender = _useReducer[1];
  var subscription = (0, import_react126.useMemo)(function() {
    return createSubscription(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, import_react126.useRef)();
  var latestSelector = (0, import_react126.useRef)();
  var latestStoreState = (0, import_react126.useRef)();
  var latestSelectedState = (0, import_react126.useRef)();
  var storeState = store.getState();
  var selectedState;
  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);
      if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }
    throw err;
  }
  useIsomorphicLayoutEffect4(function() {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = void 0;
  });
  useIsomorphicLayoutEffect4(function() {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();
        if (newStoreState === latestStoreState.current) {
          return;
        }
        var _newSelectedState = latestSelector.current(newStoreState);
        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }
        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }
      forceRender();
    }
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function() {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
function createSelectorHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react126.useContext)(context);
  };
  return function useSelector2(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }
    if (true) {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== "function") {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== "function") {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0, import_react126.useDebugValue)(selectedState);
    return selectedState;
  };
}
var useSelector = createSelectorHook();

// node_modules/react-redux/es/utils/reactBatchedUpdates.js
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/react-redux/es/index.js
setBatch(import_react_dom5.unstable_batchedUpdates);

// node_modules/use-memo-one/dist/use-memo-one.esm.js
var import_react127 = __toESM(require_react());
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i3 = 0; i3 < newInputs.length; i3++) {
    if (newInputs[i3] !== lastInputs[i3]) {
      return false;
    }
  }
  return true;
}
function useMemoOne(getResult, inputs) {
  var initial = (0, import_react127.useState)(function() {
    return {
      inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = (0, import_react127.useRef)(true);
  var committed = (0, import_react127.useRef)(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs,
    result: getResult()
  };
  (0, import_react127.useEffect)(function() {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function() {
    return callback;
  }, inputs);
}
var useMemo29 = useMemoOne;
var useCallback15 = useCallbackOne;

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction2 = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction2) {
    throw new Error(prefix);
  }
  var provided = typeof message === "function" ? message() : message;
  var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
  throw new Error(value);
}

// node_modules/css-box-model/dist/css-box-model.esm.js
var getRect = function getRect2(_ref) {
  var top = _ref.top, right = _ref.right, bottom = _ref.bottom, left = _ref.left;
  var width = right - left;
  var height = bottom - top;
  var rect = {
    top,
    right,
    bottom,
    left,
    width,
    height,
    x: left,
    y: top,
    center: {
      x: (right + left) / 2,
      y: (bottom + top) / 2
    }
  };
  return rect;
};
var expand = function expand2(target, expandBy) {
  return {
    top: target.top - expandBy.top,
    left: target.left - expandBy.left,
    bottom: target.bottom + expandBy.bottom,
    right: target.right + expandBy.right
  };
};
var shrink = function shrink2(target, shrinkBy) {
  return {
    top: target.top + shrinkBy.top,
    left: target.left + shrinkBy.left,
    bottom: target.bottom - shrinkBy.bottom,
    right: target.right - shrinkBy.right
  };
};
var shift = function shift2(target, shiftBy) {
  return {
    top: target.top + shiftBy.y,
    left: target.left + shiftBy.x,
    bottom: target.bottom + shiftBy.y,
    right: target.right + shiftBy.x
  };
};
var noSpacing = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var createBox = function createBox2(_ref2) {
  var borderBox = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
  var marginBox = getRect(expand(borderBox, margin));
  var paddingBox = getRect(shrink(borderBox, border));
  var contentBox = getRect(shrink(paddingBox, padding));
  return {
    marginBox,
    borderBox: getRect(borderBox),
    paddingBox,
    contentBox,
    margin,
    border,
    padding
  };
};
var parse2 = function parse3(raw) {
  var value = raw.slice(0, -2);
  var suffix2 = raw.slice(-2);
  if (suffix2 !== "px") {
    return 0;
  }
  var result = Number(value);
  !!isNaN(result) ? true ? invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant(false) : void 0;
  return result;
};
var getWindowScroll = function getWindowScroll2() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
var offset = function offset2(original, change) {
  var borderBox = original.borderBox, border = original.border, margin = original.margin, padding = original.padding;
  var shifted = shift(borderBox, change);
  return createBox({
    borderBox: shifted,
    border,
    margin,
    padding
  });
};
var withScroll = function withScroll2(original, scroll3) {
  if (scroll3 === void 0) {
    scroll3 = getWindowScroll();
  }
  return offset(original, scroll3);
};
var calculateBox = function calculateBox2(borderBox, styles) {
  var margin = {
    top: parse2(styles.marginTop),
    right: parse2(styles.marginRight),
    bottom: parse2(styles.marginBottom),
    left: parse2(styles.marginLeft)
  };
  var padding = {
    top: parse2(styles.paddingTop),
    right: parse2(styles.paddingRight),
    bottom: parse2(styles.paddingBottom),
    left: parse2(styles.paddingLeft)
  };
  var border = {
    top: parse2(styles.borderTopWidth),
    right: parse2(styles.borderRightWidth),
    bottom: parse2(styles.borderBottomWidth),
    left: parse2(styles.borderLeftWidth)
  };
  return createBox({
    borderBox,
    margin,
    padding,
    border
  });
};
var getBox = function getBox2(el) {
  var borderBox = el.getBoundingClientRect();
  var styles = window.getComputedStyle(el);
  return calculateBox(borderBox, styles);
};

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual3(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual2(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i3 = 0; i3 < newInputs.length; i3++) {
    if (!isEqual3(newInputs[i3], lastInputs[i3])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual7) {
  if (isEqual7 === void 0) {
    isEqual7 = areInputsEqual2;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual7(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var memoize_one_esm_default = memoizeOne;

// node_modules/raf-schd/dist/raf-schd.esm.js
var rafSchd = function rafSchd2(fn) {
  var lastArgs = [];
  var frameId = null;
  var wrapperFn = function wrapperFn2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    lastArgs = args;
    if (frameId) {
      return;
    }
    frameId = requestAnimationFrame(function() {
      frameId = null;
      fn.apply(void 0, lastArgs);
    });
  };
  wrapperFn.cancel = function() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
  };
  return wrapperFn;
};
var raf_schd_esm_default = rafSchd;

// node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js
var import_react_dom6 = __toESM(require_react_dom());
var isProduction3 = false;
var spacesAndTabs = /[ \t]{2,}/g;
var lineStartWithSpaces = /^[ \t]*/gm;
var clean = function clean2(value) {
  return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
};
var getDevMessage = function getDevMessage2(message) {
  return clean("\n  %creact-beautiful-dnd\n\n  %c" + clean(message) + "\n\n  %c👷‍ This is a development only message. It will be removed in production builds.\n");
};
var getFormattedMessage = function getFormattedMessage2(message) {
  return [getDevMessage(message), "color: #00C584; font-size: 1.2em; font-weight: bold;", "line-height: 1.5", "color: #723874;"];
};
var isDisabledFlag = "__react-beautiful-dnd-disable-dev-warnings";
function log(type, message) {
  var _console;
  if (isProduction3) {
    return;
  }
  if (typeof window !== "undefined" && window[isDisabledFlag]) {
    return;
  }
  (_console = console)[type].apply(_console, getFormattedMessage(message));
}
var warning4 = log.bind(null, "warn");
var error = log.bind(null, "error");
function noop2() {
}
function getOptions(shared2, fromBinding) {
  return _extends({}, shared2, {}, fromBinding);
}
function bindEvents(el, bindings, sharedOptions) {
  var unbindings = bindings.map(function(binding) {
    var options = getOptions(sharedOptions, binding.options);
    el.addEventListener(binding.eventName, binding.fn, options);
    return function unbind() {
      el.removeEventListener(binding.eventName, binding.fn, options);
    };
  });
  return function unbindAll() {
    unbindings.forEach(function(unbind) {
      unbind();
    });
  };
}
var isProduction$1 = false;
var prefix2 = "Invariant failed";
function RbdInvariant(message) {
  this.message = message;
}
RbdInvariant.prototype.toString = function toString() {
  return this.message;
};
function invariant2(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction$1) {
    throw new RbdInvariant(prefix2);
  } else {
    throw new RbdInvariant(prefix2 + ": " + (message || ""));
  }
}
var ErrorBoundary = function(_React$Component) {
  _inheritsLoose(ErrorBoundary2, _React$Component);
  function ErrorBoundary2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.callbacks = null;
    _this.unbind = noop2;
    _this.onWindowError = function(event) {
      var callbacks = _this.getCallbacks();
      if (callbacks.isDragging()) {
        callbacks.tryAbort();
        true ? warning4("\n        An error was caught by our window 'error' event listener while a drag was occurring.\n        The active drag has been aborted.\n      ") : void 0;
      }
      var err = event.error;
      if (err instanceof RbdInvariant) {
        event.preventDefault();
        if (true) {
          error(err.message);
        }
      }
    };
    _this.getCallbacks = function() {
      if (!_this.callbacks) {
        throw new Error("Unable to find AppCallbacks in <ErrorBoundary/>");
      }
      return _this.callbacks;
    };
    _this.setCallbacks = function(callbacks) {
      _this.callbacks = callbacks;
    };
    return _this;
  }
  var _proto = ErrorBoundary2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.unbind = bindEvents(window, [{
      eventName: "error",
      fn: this.onWindowError
    }]);
  };
  _proto.componentDidCatch = function componentDidCatch(err) {
    if (err instanceof RbdInvariant) {
      if (true) {
        error(err.message);
      }
      this.setState({});
      return;
    }
    throw err;
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.unbind();
  };
  _proto.render = function render() {
    return this.props.children(this.setCallbacks);
  };
  return ErrorBoundary2;
}(import_react128.default.Component);
var dragHandleUsageInstructions = "\n  Press space bar to start a drag.\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\n  Some screen readers may require you to be in focus mode or to use your pass through key\n";
var position = function position2(index) {
  return index + 1;
};
var onDragStart = function onDragStart2(start3) {
  return "\n  You have lifted an item in position " + position(start3.source.index) + "\n";
};
var withLocation = function withLocation2(source, destination) {
  var isInHomeList = source.droppableId === destination.droppableId;
  var startPosition = position(source.index);
  var endPosition = position(destination.index);
  if (isInHomeList) {
    return "\n      You have moved the item from position " + startPosition + "\n      to position " + endPosition + "\n    ";
  }
  return "\n    You have moved the item from position " + startPosition + "\n    in list " + source.droppableId + "\n    to list " + destination.droppableId + "\n    in position " + endPosition + "\n  ";
};
var withCombine = function withCombine2(id, source, combine2) {
  var inHomeList = source.droppableId === combine2.droppableId;
  if (inHomeList) {
    return "\n      The item " + id + "\n      has been combined with " + combine2.draggableId;
  }
  return "\n      The item " + id + "\n      in list " + source.droppableId + "\n      has been combined with " + combine2.draggableId + "\n      in list " + combine2.droppableId + "\n    ";
};
var onDragUpdate = function onDragUpdate2(update2) {
  var location = update2.destination;
  if (location) {
    return withLocation(update2.source, location);
  }
  var combine2 = update2.combine;
  if (combine2) {
    return withCombine(update2.draggableId, update2.source, combine2);
  }
  return "You are over an area that cannot be dropped on";
};
var returnedToStart = function returnedToStart2(source) {
  return "\n  The item has returned to its starting position\n  of " + position(source.index) + "\n";
};
var onDragEnd = function onDragEnd2(result) {
  if (result.reason === "CANCEL") {
    return "\n      Movement cancelled.\n      " + returnedToStart(result.source) + "\n    ";
  }
  var location = result.destination;
  var combine2 = result.combine;
  if (location) {
    return "\n      You have dropped the item.\n      " + withLocation(result.source, location) + "\n    ";
  }
  if (combine2) {
    return "\n      You have dropped the item.\n      " + withCombine(result.draggableId, result.source, combine2) + "\n    ";
  }
  return "\n    The item has been dropped while not over a drop area.\n    " + returnedToStart(result.source) + "\n  ";
};
var preset = {
  dragHandleUsageInstructions,
  onDragStart,
  onDragUpdate,
  onDragEnd
};
var origin = {
  x: 0,
  y: 0
};
var add = function add2(point1, point2) {
  return {
    x: point1.x + point2.x,
    y: point1.y + point2.y
  };
};
var subtract = function subtract2(point1, point2) {
  return {
    x: point1.x - point2.x,
    y: point1.y - point2.y
  };
};
var isEqual4 = function isEqual5(point1, point2) {
  return point1.x === point2.x && point1.y === point2.y;
};
var negate = function negate2(point) {
  return {
    x: point.x !== 0 ? -point.x : 0,
    y: point.y !== 0 ? -point.y : 0
  };
};
var patch = function patch2(line, value, otherValue) {
  var _ref;
  if (otherValue === void 0) {
    otherValue = 0;
  }
  return _ref = {}, _ref[line] = value, _ref[line === "x" ? "y" : "x"] = otherValue, _ref;
};
var distance = function distance2(point1, point2) {
  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
};
var closest = function closest2(target, points) {
  return Math.min.apply(Math, points.map(function(point) {
    return distance(target, point);
  }));
};
var apply = function apply2(fn) {
  return function(point) {
    return {
      x: fn(point.x),
      y: fn(point.y)
    };
  };
};
var executeClip = function(frame, subject) {
  var result = getRect({
    top: Math.max(subject.top, frame.top),
    right: Math.min(subject.right, frame.right),
    bottom: Math.min(subject.bottom, frame.bottom),
    left: Math.max(subject.left, frame.left)
  });
  if (result.width <= 0 || result.height <= 0) {
    return null;
  }
  return result;
};
var offsetByPosition = function offsetByPosition2(spacing, point) {
  return {
    top: spacing.top + point.y,
    left: spacing.left + point.x,
    bottom: spacing.bottom + point.y,
    right: spacing.right + point.x
  };
};
var getCorners = function getCorners2(spacing) {
  return [{
    x: spacing.left,
    y: spacing.top
  }, {
    x: spacing.right,
    y: spacing.top
  }, {
    x: spacing.left,
    y: spacing.bottom
  }, {
    x: spacing.right,
    y: spacing.bottom
  }];
};
var noSpacing2 = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
var scroll = function scroll2(target, frame) {
  if (!frame) {
    return target;
  }
  return offsetByPosition(target, frame.scroll.diff.displacement);
};
var increase = function increase2(target, axis, withPlaceholder) {
  if (withPlaceholder && withPlaceholder.increasedBy) {
    var _extends2;
    return _extends({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));
  }
  return target;
};
var clip = function clip2(target, frame) {
  if (frame && frame.shouldClipSubject) {
    return executeClip(frame.pageMarginBox, target);
  }
  return getRect(target);
};
var getSubject = function(_ref) {
  var page = _ref.page, withPlaceholder = _ref.withPlaceholder, axis = _ref.axis, frame = _ref.frame;
  var scrolled = scroll(page.marginBox, frame);
  var increased = increase(scrolled, axis, withPlaceholder);
  var clipped = clip(increased, frame);
  return {
    page,
    withPlaceholder,
    active: clipped
  };
};
var scrollDroppable = function(droppable2, newScroll) {
  !droppable2.frame ? true ? invariant2(false) : invariant2(false) : void 0;
  var scrollable = droppable2.frame;
  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
  var scrollDisplacement = negate(scrollDiff);
  var frame = _extends({}, scrollable, {
    scroll: {
      initial: scrollable.scroll.initial,
      current: newScroll,
      diff: {
        value: scrollDiff,
        displacement: scrollDisplacement
      },
      max: scrollable.scroll.max
    }
  });
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: droppable2.subject.withPlaceholder,
    axis: droppable2.axis,
    frame
  });
  var result = _extends({}, droppable2, {
    frame,
    subject
  });
  return result;
};
function isInteger(value) {
  if (Number.isInteger) {
    return Number.isInteger(value);
  }
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
}
function values(map) {
  if (Object.values) {
    return Object.values(map);
  }
  return Object.keys(map).map(function(key) {
    return map[key];
  });
}
function findIndex4(list, predicate) {
  if (list.findIndex) {
    return list.findIndex(predicate);
  }
  for (var i3 = 0; i3 < list.length; i3++) {
    if (predicate(list[i3])) {
      return i3;
    }
  }
  return -1;
}
function find(list, predicate) {
  if (list.find) {
    return list.find(predicate);
  }
  var index = findIndex4(list, predicate);
  if (index !== -1) {
    return list[index];
  }
  return void 0;
}
function toArray(list) {
  return Array.prototype.slice.call(list);
}
var toDroppableMap = memoize_one_esm_default(function(droppables) {
  return droppables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDraggableMap = memoize_one_esm_default(function(draggables) {
  return draggables.reduce(function(previous, current) {
    previous[current.descriptor.id] = current;
    return previous;
  }, {});
});
var toDroppableList = memoize_one_esm_default(function(droppables) {
  return values(droppables);
});
var toDraggableList = memoize_one_esm_default(function(draggables) {
  return values(draggables);
});
var getDraggablesInsideDroppable = memoize_one_esm_default(function(droppableId, draggables) {
  var result = toDraggableList(draggables).filter(function(draggable2) {
    return droppableId === draggable2.descriptor.droppableId;
  }).sort(function(a3, b2) {
    return a3.descriptor.index - b2.descriptor.index;
  });
  return result;
});
function tryGetDestination(impact) {
  if (impact.at && impact.at.type === "REORDER") {
    return impact.at.destination;
  }
  return null;
}
function tryGetCombine(impact) {
  if (impact.at && impact.at.type === "COMBINE") {
    return impact.at.combine;
  }
  return null;
}
var removeDraggableFromList = memoize_one_esm_default(function(remove, list) {
  return list.filter(function(item) {
    return item.descriptor.id !== remove.descriptor.id;
  });
});
var moveToNextCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var location = tryGetDestination(previousImpact);
  if (!location) {
    return null;
  }
  function getImpact(target) {
    var at2 = {
      type: "COMBINE",
      combine: {
        draggableId: target,
        droppableId: destination.descriptor.id
      }
    };
    return _extends({}, previousImpact, {
      at: at2
    });
  }
  var all = previousImpact.displaced.all;
  var closestId = all.length ? all[0] : null;
  if (isMovingForward) {
    return closestId ? getImpact(closestId) : null;
  }
  var withoutDraggable = removeDraggableFromList(draggable2, insideDestination);
  if (!closestId) {
    if (!withoutDraggable.length) {
      return null;
    }
    var last = withoutDraggable[withoutDraggable.length - 1];
    return getImpact(last.descriptor.id);
  }
  var indexOfClosest = findIndex4(withoutDraggable, function(d3) {
    return d3.descriptor.id === closestId;
  });
  !(indexOfClosest !== -1) ? true ? invariant2(false, "Could not find displaced item in set") : invariant2(false) : void 0;
  var proposedIndex = indexOfClosest - 1;
  if (proposedIndex < 0) {
    return null;
  }
  var before = withoutDraggable[proposedIndex];
  return getImpact(before.descriptor.id);
};
var isHomeOf = function(draggable2, destination) {
  return draggable2.descriptor.droppableId === destination.descriptor.id;
};
var noDisplacedBy = {
  point: origin,
  value: 0
};
var emptyGroups = {
  invisible: {},
  visible: {},
  all: []
};
var noImpact = {
  displaced: emptyGroups,
  displacedBy: noDisplacedBy,
  at: null
};
var isWithin = function(lowerBound, upperBound) {
  return function(value) {
    return lowerBound <= value && value <= upperBound;
  };
};
var isPartiallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    if (isContained) {
      return true;
    }
    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;
    if (isPartiallyContained) {
      return true;
    }
    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;
    if (isTargetBiggerThanFrame) {
      return true;
    }
    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
    return isTargetBiggerOnOneAxis;
  };
};
var isTotallyVisibleThroughFrame = function(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function(subject) {
    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    return isContained;
  };
};
var vertical = {
  direction: "vertical",
  line: "y",
  crossAxisLine: "x",
  start: "top",
  end: "bottom",
  size: "height",
  crossAxisStart: "left",
  crossAxisEnd: "right",
  crossAxisSize: "width"
};
var horizontal = {
  direction: "horizontal",
  line: "x",
  crossAxisLine: "y",
  start: "left",
  end: "right",
  size: "width",
  crossAxisStart: "top",
  crossAxisEnd: "bottom",
  crossAxisSize: "height"
};
var isTotallyVisibleThroughFrameOnAxis = function(axis) {
  return function(frame) {
    var isWithinVertical = isWithin(frame.top, frame.bottom);
    var isWithinHorizontal = isWithin(frame.left, frame.right);
    return function(subject) {
      if (axis === vertical) {
        return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);
      }
      return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
    };
  };
};
var getDroppableDisplaced = function getDroppableDisplaced2(target, destination) {
  var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;
  return offsetByPosition(target, displacement);
};
var isVisibleInDroppable = function isVisibleInDroppable2(target, destination, isVisibleThroughFrameFn) {
  if (!destination.subject.active) {
    return false;
  }
  return isVisibleThroughFrameFn(destination.subject.active)(target);
};
var isVisibleInViewport = function isVisibleInViewport2(target, viewport, isVisibleThroughFrameFn) {
  return isVisibleThroughFrameFn(viewport)(target);
};
var isVisible = function isVisible2(_ref) {
  var toBeDisplaced = _ref.target, destination = _ref.destination, viewport = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
  var displacedTarget = withDroppableDisplacement2 ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;
  return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);
};
var isPartiallyVisible = function isPartiallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
  }));
};
var isTotallyVisible = function isTotallyVisible2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
  }));
};
var isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis2(args) {
  return isVisible(_extends({}, args, {
    isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)
  }));
};
var getShouldAnimate = function getShouldAnimate2(id, last, forceShouldAnimate) {
  if (typeof forceShouldAnimate === "boolean") {
    return forceShouldAnimate;
  }
  if (!last) {
    return true;
  }
  var invisible = last.invisible, visible = last.visible;
  if (invisible[id]) {
    return false;
  }
  var previous = visible[id];
  return previous ? previous.shouldAnimate : true;
};
function getTarget(draggable2, displacedBy) {
  var marginBox = draggable2.page.marginBox;
  var expandBy = {
    top: displacedBy.point.y,
    right: 0,
    bottom: 0,
    left: displacedBy.point.x
  };
  return getRect(expand(marginBox, expandBy));
}
function getDisplacementGroups(_ref) {
  var afterDragging = _ref.afterDragging, destination = _ref.destination, displacedBy = _ref.displacedBy, viewport = _ref.viewport, forceShouldAnimate = _ref.forceShouldAnimate, last = _ref.last;
  return afterDragging.reduce(function process2(groups, draggable2) {
    var target = getTarget(draggable2, displacedBy);
    var id = draggable2.descriptor.id;
    groups.all.push(id);
    var isVisible3 = isPartiallyVisible({
      target,
      destination,
      viewport,
      withDroppableDisplacement: true
    });
    if (!isVisible3) {
      groups.invisible[draggable2.descriptor.id] = true;
      return groups;
    }
    var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);
    var displacement = {
      draggableId: id,
      shouldAnimate
    };
    groups.visible[id] = displacement;
    return groups;
  }, {
    all: [],
    visible: {},
    invisible: {}
  });
}
function getIndexOfLastItem(draggables, options) {
  if (!draggables.length) {
    return 0;
  }
  var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;
  return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;
}
function goAtEnd(_ref) {
  var insideDestination = _ref.insideDestination, inHomeList = _ref.inHomeList, displacedBy = _ref.displacedBy, destination = _ref.destination;
  var newIndex = getIndexOfLastItem(insideDestination, {
    inHomeList
  });
  return {
    displaced: emptyGroups,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index: newIndex
      }
    }
  };
}
function calculateReorderImpact(_ref2) {
  var draggable2 = _ref2.draggable, insideDestination = _ref2.insideDestination, destination = _ref2.destination, viewport = _ref2.viewport, displacedBy = _ref2.displacedBy, last = _ref2.last, index = _ref2.index, forceShouldAnimate = _ref2.forceShouldAnimate;
  var inHomeList = isHomeOf(draggable2, destination);
  if (index == null) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var match3 = find(insideDestination, function(item) {
    return item.descriptor.index === index;
  });
  if (!match3) {
    return goAtEnd({
      insideDestination,
      inHomeList,
      displacedBy,
      destination
    });
  }
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var sliceFrom = insideDestination.indexOf(match3);
  var impacted = withoutDragging.slice(sliceFrom);
  var displaced = getDisplacementGroups({
    afterDragging: impacted,
    destination,
    displacedBy,
    last,
    viewport: viewport.frame,
    forceShouldAnimate
  });
  return {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: {
        droppableId: destination.descriptor.id,
        index
      }
    }
  };
}
function didStartAfterCritical(draggableId, afterCritical) {
  return Boolean(afterCritical.effected[draggableId]);
}
var fromCombine = function(_ref) {
  var isMovingForward = _ref.isMovingForward, destination = _ref.destination, draggables = _ref.draggables, combine2 = _ref.combine, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var combineId = combine2.draggableId;
  var combineWith = draggables[combineId];
  var combineWithIndex = combineWith.descriptor.index;
  var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);
  if (didCombineWithStartAfterCritical) {
    if (isMovingForward) {
      return combineWithIndex;
    }
    return combineWithIndex - 1;
  }
  if (isMovingForward) {
    return combineWithIndex + 1;
  }
  return combineWithIndex;
};
var fromReorder = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, insideDestination = _ref.insideDestination, location = _ref.location;
  if (!insideDestination.length) {
    return null;
  }
  var currentIndex = location.index;
  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
  var firstIndex = insideDestination[0].descriptor.index;
  var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;
  var upperBound = isInHomeList ? lastIndex : lastIndex + 1;
  if (proposedIndex < firstIndex) {
    return null;
  }
  if (proposedIndex > upperBound) {
    return null;
  }
  return proposedIndex;
};
var moveToNextIndex = function(_ref) {
  var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var wasAt = previousImpact.at;
  !wasAt ? true ? invariant2(false, "Cannot move in direction without previous impact location") : invariant2(false) : void 0;
  if (wasAt.type === "REORDER") {
    var _newIndex = fromReorder({
      isMovingForward,
      isInHomeList,
      location: wasAt.destination,
      insideDestination
    });
    if (_newIndex == null) {
      return null;
    }
    return calculateReorderImpact({
      draggable: draggable2,
      insideDestination,
      destination,
      viewport,
      last: previousImpact.displaced,
      displacedBy: previousImpact.displacedBy,
      index: _newIndex
    });
  }
  var newIndex = fromCombine({
    isMovingForward,
    destination,
    displaced: previousImpact.displaced,
    draggables,
    combine: wasAt.combine,
    afterCritical
  });
  if (newIndex == null) {
    return null;
  }
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    last: previousImpact.displaced,
    displacedBy: previousImpact.displacedBy,
    index: newIndex
  });
};
var getCombinedItemDisplacement = function(_ref) {
  var displaced = _ref.displaced, afterCritical = _ref.afterCritical, combineWith = _ref.combineWith, displacedBy = _ref.displacedBy;
  var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);
  if (didStartAfterCritical(combineWith, afterCritical)) {
    return isDisplaced ? origin : negate(displacedBy.point);
  }
  return isDisplaced ? displacedBy.point : origin;
};
var whenCombining = function(_ref) {
  var afterCritical = _ref.afterCritical, impact = _ref.impact, draggables = _ref.draggables;
  var combine2 = tryGetCombine(impact);
  !combine2 ? true ? invariant2(false) : invariant2(false) : void 0;
  var combineWith = combine2.draggableId;
  var center = draggables[combineWith].page.borderBox.center;
  var displaceBy = getCombinedItemDisplacement({
    displaced: impact.displaced,
    afterCritical,
    combineWith,
    displacedBy: impact.displacedBy
  });
  return add(center, displaceBy);
};
var distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter2(axis, box) {
  return box.margin[axis.start] + box.borderBox[axis.size] / 2;
};
var distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter2(axis, box) {
  return box.margin[axis.end] + box.borderBox[axis.size] / 2;
};
var getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter2(axis, target, isMoving) {
  return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;
};
var goAfter = function goAfter2(_ref) {
  var axis = _ref.axis, moveRelativeTo = _ref.moveRelativeTo, isMoving = _ref.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goBefore = function goBefore2(_ref2) {
  var axis = _ref2.axis, moveRelativeTo = _ref2.moveRelativeTo, isMoving = _ref2.isMoving;
  return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));
};
var goIntoStart = function goIntoStart2(_ref3) {
  var axis = _ref3.axis, moveInto = _ref3.moveInto, isMoving = _ref3.isMoving;
  return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));
};
var whenReordering = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, draggables = _ref.draggables, droppable2 = _ref.droppable, afterCritical = _ref.afterCritical;
  var insideDestination = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var draggablePage = draggable2.page;
  var axis = droppable2.axis;
  if (!insideDestination.length) {
    return goIntoStart({
      axis,
      moveInto: droppable2.page,
      isMoving: draggablePage
    });
  }
  var displaced = impact.displaced, displacedBy = impact.displacedBy;
  var closestAfter = displaced.all[0];
  if (closestAfter) {
    var closest3 = draggables[closestAfter];
    if (didStartAfterCritical(closestAfter, afterCritical)) {
      return goBefore({
        axis,
        moveRelativeTo: closest3.page,
        isMoving: draggablePage
      });
    }
    var withDisplacement = offset(closest3.page, displacedBy.point);
    return goBefore({
      axis,
      moveRelativeTo: withDisplacement,
      isMoving: draggablePage
    });
  }
  var last = insideDestination[insideDestination.length - 1];
  if (last.descriptor.id === draggable2.descriptor.id) {
    return draggablePage.borderBox.center;
  }
  if (didStartAfterCritical(last.descriptor.id, afterCritical)) {
    var page = offset(last.page, negate(afterCritical.displacedBy.point));
    return goAfter({
      axis,
      moveRelativeTo: page,
      isMoving: draggablePage
    });
  }
  return goAfter({
    axis,
    moveRelativeTo: last.page,
    isMoving: draggablePage
  });
};
var withDroppableDisplacement = function(droppable2, point) {
  var frame = droppable2.frame;
  if (!frame) {
    return point;
  }
  return add(point, frame.scroll.diff.displacement);
};
var getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement2(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, afterCritical = _ref.afterCritical;
  var original = draggable2.page.borderBox.center;
  var at2 = impact.at;
  if (!droppable2) {
    return original;
  }
  if (!at2) {
    return original;
  }
  if (at2.type === "REORDER") {
    return whenReordering({
      impact,
      draggable: draggable2,
      draggables,
      droppable: droppable2,
      afterCritical
    });
  }
  return whenCombining({
    impact,
    draggables,
    afterCritical
  });
};
var getPageBorderBoxCenterFromImpact = function(args) {
  var withoutDisplacement = getResultWithoutDroppableDisplacement(args);
  var droppable2 = args.droppable;
  var withDisplacement = droppable2 ? withDroppableDisplacement(droppable2, withoutDisplacement) : withoutDisplacement;
  return withDisplacement;
};
var scrollViewport = function(viewport, newScroll) {
  var diff = subtract(newScroll, viewport.scroll.initial);
  var displacement = negate(diff);
  var frame = getRect({
    top: newScroll.y,
    bottom: newScroll.y + viewport.frame.height,
    left: newScroll.x,
    right: newScroll.x + viewport.frame.width
  });
  var updated = {
    frame,
    scroll: {
      initial: viewport.scroll.initial,
      max: viewport.scroll.max,
      current: newScroll,
      diff: {
        value: diff,
        displacement
      }
    }
  };
  return updated;
};
function getDraggables(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
function tryGetVisible(id, groups) {
  for (var i3 = 0; i3 < groups.length; i3++) {
    var displacement = groups[i3].visible[id];
    if (displacement) {
      return displacement;
    }
  }
  return null;
}
var speculativelyIncrease = function(_ref) {
  var impact = _ref.impact, viewport = _ref.viewport, destination = _ref.destination, draggables = _ref.draggables, maxScrollChange = _ref.maxScrollChange;
  var scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));
  var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;
  var last = impact.displaced;
  var withViewportScroll = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination,
    displacedBy: impact.displacedBy,
    viewport: scrolledViewport.frame,
    last,
    forceShouldAnimate: false
  });
  var withDroppableScroll2 = getDisplacementGroups({
    afterDragging: getDraggables(last.all, draggables),
    destination: scrolledDroppable,
    displacedBy: impact.displacedBy,
    viewport: viewport.frame,
    last,
    forceShouldAnimate: false
  });
  var invisible = {};
  var visible = {};
  var groups = [last, withViewportScroll, withDroppableScroll2];
  last.all.forEach(function(id) {
    var displacement = tryGetVisible(id, groups);
    if (displacement) {
      visible[id] = displacement;
      return;
    }
    invisible[id] = true;
  });
  var newImpact = _extends({}, impact, {
    displaced: {
      all: last.all,
      invisible,
      visible
    }
  });
  return newImpact;
};
var withViewportDisplacement = function(viewport, point) {
  return add(viewport.scroll.diff.displacement, point);
};
var getClientFromPageBorderBoxCenter = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, draggable2 = _ref.draggable, viewport = _ref.viewport;
  var withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);
  var offset3 = subtract(withoutPageScrollChange, draggable2.page.borderBox.center);
  return add(draggable2.client.borderBox.center, offset3);
};
var isTotallyVisibleInNewLocation = function(_ref) {
  var draggable2 = _ref.draggable, destination = _ref.destination, newPageBorderBoxCenter = _ref.newPageBorderBoxCenter, viewport = _ref.viewport, withDroppableDisplacement2 = _ref.withDroppableDisplacement, _ref$onlyOnMainAxis = _ref.onlyOnMainAxis, onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;
  var changeNeeded = subtract(newPageBorderBoxCenter, draggable2.page.borderBox.center);
  var shifted = offsetByPosition(draggable2.page.borderBox, changeNeeded);
  var args = {
    target: shifted,
    destination,
    withDroppableDisplacement: withDroppableDisplacement2,
    viewport
  };
  return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);
};
var moveToNextPlace = function(_ref) {
  var isMovingForward = _ref.isMovingForward, draggable2 = _ref.draggable, destination = _ref.destination, draggables = _ref.draggables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, previousClientSelection = _ref.previousClientSelection, afterCritical = _ref.afterCritical;
  if (!destination.isEnabled) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var isInHomeList = isHomeOf(draggable2, destination);
  var impact = moveToNextCombine({
    isMovingForward,
    draggable: draggable2,
    destination,
    insideDestination,
    previousImpact
  }) || moveToNextIndex({
    isMovingForward,
    isInHomeList,
    draggable: draggable2,
    draggables,
    destination,
    insideDestination,
    previousImpact,
    viewport,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
    draggable: draggable2,
    destination,
    newPageBorderBoxCenter: pageBorderBoxCenter,
    viewport: viewport.frame,
    withDroppableDisplacement: false,
    onlyOnMainAxis: true
  });
  if (isVisibleInNewLocation) {
    var clientSelection = getClientFromPageBorderBoxCenter({
      pageBorderBoxCenter,
      draggable: draggable2,
      viewport
    });
    return {
      clientSelection,
      impact,
      scrollJumpRequest: null
    };
  }
  var distance3 = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);
  var cautious = speculativelyIncrease({
    impact,
    viewport,
    destination,
    draggables,
    maxScrollChange: distance3
  });
  return {
    clientSelection: previousClientSelection,
    impact: cautious,
    scrollJumpRequest: distance3
  };
};
var getKnownActive = function getKnownActive2(droppable2) {
  var rect = droppable2.subject.active;
  !rect ? true ? invariant2(false, "Cannot get clipped area from droppable") : invariant2(false) : void 0;
  return rect;
};
var getBestCrossAxisDroppable = function(_ref) {
  var isMovingForward = _ref.isMovingForward, pageBorderBoxCenter = _ref.pageBorderBoxCenter, source = _ref.source, droppables = _ref.droppables, viewport = _ref.viewport;
  var active = source.subject.active;
  if (!active) {
    return null;
  }
  var axis = source.axis;
  var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);
  var candidates = toDroppableList(droppables).filter(function(droppable2) {
    return droppable2 !== source;
  }).filter(function(droppable2) {
    return droppable2.isEnabled;
  }).filter(function(droppable2) {
    return Boolean(droppable2.subject.active);
  }).filter(function(droppable2) {
    return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable2));
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    if (isMovingForward) {
      return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];
    }
    return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];
  }).filter(function(droppable2) {
    var activeOfTarget = getKnownActive(droppable2);
    var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);
    return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);
  }).sort(function(a3, b2) {
    var first = getKnownActive(a3)[axis.crossAxisStart];
    var second = getKnownActive(b2)[axis.crossAxisStart];
    if (isMovingForward) {
      return first - second;
    }
    return second - first;
  }).filter(function(droppable2, index, array) {
    return getKnownActive(droppable2)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0];
  }
  var contains = candidates.filter(function(droppable2) {
    var isWithinDroppable = isWithin(getKnownActive(droppable2)[axis.start], getKnownActive(droppable2)[axis.end]);
    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
  });
  if (contains.length === 1) {
    return contains[0];
  }
  if (contains.length > 1) {
    return contains.sort(function(a3, b2) {
      return getKnownActive(a3)[axis.start] - getKnownActive(b2)[axis.start];
    })[0];
  }
  return candidates.sort(function(a3, b2) {
    var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a3)));
    var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b2)));
    if (first !== second) {
      return first - second;
    }
    return getKnownActive(a3)[axis.start] - getKnownActive(b2)[axis.start];
  })[0];
};
var getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox.center;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;
};
var getCurrentPageBorderBox = function getCurrentPageBorderBox2(draggable2, afterCritical) {
  var original = draggable2.page.borderBox;
  return didStartAfterCritical(draggable2.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;
};
var getClosestDraggable = function(_ref) {
  var pageBorderBoxCenter = _ref.pageBorderBoxCenter, viewport = _ref.viewport, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  var sorted = insideDestination.filter(function(draggable2) {
    return isTotallyVisible({
      target: getCurrentPageBorderBox(draggable2, afterCritical),
      destination,
      viewport: viewport.frame,
      withDroppableDisplacement: true
    });
  }).sort(function(a3, b2) {
    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a3, afterCritical)));
    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b2, afterCritical)));
    if (distanceToA < distanceToB) {
      return -1;
    }
    if (distanceToB < distanceToA) {
      return 1;
    }
    return a3.descriptor.index - b2.descriptor.index;
  });
  return sorted[0] || null;
};
var getDisplacedBy = memoize_one_esm_default(function getDisplacedBy2(axis, displaceBy) {
  var displacement = displaceBy[axis.line];
  return {
    value: displacement,
    point: patch(axis.line, displacement)
  };
});
var getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder2(droppable2, placeholderSize, draggables) {
  var axis = droppable2.axis;
  if (droppable2.descriptor.mode === "virtual") {
    return patch(axis.line, placeholderSize[axis.line]);
  }
  var availableSpace = droppable2.subject.page.contentBox[axis.size];
  var insideDroppable = getDraggablesInsideDroppable(droppable2.descriptor.id, draggables);
  var spaceUsed = insideDroppable.reduce(function(sum, dimension) {
    return sum + dimension.client.marginBox[axis.size];
  }, 0);
  var requiredSpace = spaceUsed + placeholderSize[axis.line];
  var needsToGrowBy = requiredSpace - availableSpace;
  if (needsToGrowBy <= 0) {
    return null;
  }
  return patch(axis.line, needsToGrowBy);
};
var withMaxScroll = function withMaxScroll2(frame, max2) {
  return _extends({}, frame, {
    scroll: _extends({}, frame.scroll, {
      max: max2
    })
  });
};
var addPlaceholder = function addPlaceholder2(droppable2, draggable2, draggables) {
  var frame = droppable2.frame;
  !!isHomeOf(draggable2, droppable2) ? true ? invariant2(false, "Should not add placeholder space to home list") : invariant2(false) : void 0;
  !!droppable2.subject.withPlaceholder ? true ? invariant2(false, "Cannot add placeholder size to a subject when it already has one") : invariant2(false) : void 0;
  var placeholderSize = getDisplacedBy(droppable2.axis, draggable2.displaceBy).point;
  var requiredGrowth = getRequiredGrowthForPlaceholder(droppable2, placeholderSize, draggables);
  var added = {
    placeholderSize,
    increasedBy: requiredGrowth,
    oldFrameMaxScroll: droppable2.frame ? droppable2.frame.scroll.max : null
  };
  if (!frame) {
    var _subject = getSubject({
      page: droppable2.subject.page,
      withPlaceholder: added,
      axis: droppable2.axis,
      frame: droppable2.frame
    });
    return _extends({}, droppable2, {
      subject: _subject
    });
  }
  var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;
  var newFrame = withMaxScroll(frame, maxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    withPlaceholder: added,
    axis: droppable2.axis,
    frame: newFrame
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var removePlaceholder = function removePlaceholder2(droppable2) {
  var added = droppable2.subject.withPlaceholder;
  !added ? true ? invariant2(false, "Cannot remove placeholder form subject when there was none") : invariant2(false) : void 0;
  var frame = droppable2.frame;
  if (!frame) {
    var _subject2 = getSubject({
      page: droppable2.subject.page,
      axis: droppable2.axis,
      frame: null,
      withPlaceholder: null
    });
    return _extends({}, droppable2, {
      subject: _subject2
    });
  }
  var oldMaxScroll = added.oldFrameMaxScroll;
  !oldMaxScroll ? true ? invariant2(false, "Expected droppable with frame to have old max frame scroll when removing placeholder") : invariant2(false) : void 0;
  var newFrame = withMaxScroll(frame, oldMaxScroll);
  var subject = getSubject({
    page: droppable2.subject.page,
    axis: droppable2.axis,
    frame: newFrame,
    withPlaceholder: null
  });
  return _extends({}, droppable2, {
    subject,
    frame: newFrame
  });
};
var moveToNewDroppable = function(_ref) {
  var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, moveRelativeTo = _ref.moveRelativeTo, insideDestination = _ref.insideDestination, draggable2 = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  if (!moveRelativeTo) {
    if (insideDestination.length) {
      return null;
    }
    var proposed = {
      displaced: emptyGroups,
      displacedBy: noDisplacedBy,
      at: {
        type: "REORDER",
        destination: {
          droppableId: destination.descriptor.id,
          index: 0
        }
      }
    };
    var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
      impact: proposed,
      draggable: draggable2,
      droppable: destination,
      draggables,
      afterCritical
    });
    var withPlaceholder = isHomeOf(draggable2, destination) ? destination : addPlaceholder(destination, draggable2, draggables);
    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
      draggable: draggable2,
      destination: withPlaceholder,
      newPageBorderBoxCenter: proposedPageBorderBoxCenter,
      viewport: viewport.frame,
      withDroppableDisplacement: false,
      onlyOnMainAxis: true
    });
    return isVisibleInNewLocation ? proposed : null;
  }
  var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);
  var proposedIndex = function() {
    var relativeTo = moveRelativeTo.descriptor.index;
    if (moveRelativeTo.descriptor.id === draggable2.descriptor.id) {
      return relativeTo;
    }
    if (isGoingBeforeTarget) {
      return relativeTo;
    }
    return relativeTo + 1;
  }();
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    displacedBy,
    last: emptyGroups,
    index: proposedIndex
  });
};
var moveCrossAxis = function(_ref) {
  var isMovingForward = _ref.isMovingForward, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, draggable2 = _ref.draggable, isOver = _ref.isOver, draggables = _ref.draggables, droppables = _ref.droppables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var destination = getBestCrossAxisDroppable({
    isMovingForward,
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    source: isOver,
    droppables,
    viewport
  });
  if (!destination) {
    return null;
  }
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var moveRelativeTo = getClosestDraggable({
    pageBorderBoxCenter: previousPageBorderBoxCenter,
    viewport,
    destination,
    insideDestination,
    afterCritical
  });
  var impact = moveToNewDroppable({
    previousPageBorderBoxCenter,
    destination,
    draggable: draggable2,
    draggables,
    moveRelativeTo,
    insideDestination,
    viewport,
    afterCritical
  });
  if (!impact) {
    return null;
  }
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    afterCritical
  });
  var clientSelection = getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport
  });
  return {
    clientSelection,
    impact,
    scrollJumpRequest: null
  };
};
var whatIsDraggedOver = function(impact) {
  var at2 = impact.at;
  if (!at2) {
    return null;
  }
  if (at2.type === "REORDER") {
    return at2.destination.droppableId;
  }
  return at2.combine.droppableId;
};
var getDroppableOver = function getDroppableOver2(impact, droppables) {
  var id = whatIsDraggedOver(impact);
  return id ? droppables[id] : null;
};
var moveInDirection = function(_ref) {
  var state = _ref.state, type = _ref.type;
  var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);
  var isMainAxisMovementAllowed = Boolean(isActuallyOver);
  var home2 = state.dimensions.droppables[state.critical.droppable.id];
  var isOver = isActuallyOver || home2;
  var direction = isOver.axis.direction;
  var isMovingOnMainAxis = direction === "vertical" && (type === "MOVE_UP" || type === "MOVE_DOWN") || direction === "horizontal" && (type === "MOVE_LEFT" || type === "MOVE_RIGHT");
  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
    return null;
  }
  var isMovingForward = type === "MOVE_DOWN" || type === "MOVE_RIGHT";
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;
  var _state$dimensions = state.dimensions, draggables = _state$dimensions.draggables, droppables = _state$dimensions.droppables;
  return isMovingOnMainAxis ? moveToNextPlace({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    destination: isOver,
    draggables,
    viewport: state.viewport,
    previousClientSelection: state.current.client.selection,
    previousImpact: state.impact,
    afterCritical: state.afterCritical
  }) : moveCrossAxis({
    isMovingForward,
    previousPageBorderBoxCenter,
    draggable: draggable2,
    isOver,
    draggables,
    droppables,
    viewport: state.viewport,
    afterCritical: state.afterCritical
  });
};
function isMovementAllowed(state) {
  return state.phase === "DRAGGING" || state.phase === "COLLECTING";
}
function isPositionInFrame(frame) {
  var isWithinVertical = isWithin(frame.top, frame.bottom);
  var isWithinHorizontal = isWithin(frame.left, frame.right);
  return function run(point) {
    return isWithinVertical(point.y) && isWithinHorizontal(point.x);
  };
}
function getHasOverlap(first, second) {
  return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;
}
function getFurthestAway(_ref) {
  var pageBorderBox = _ref.pageBorderBox, draggable2 = _ref.draggable, candidates = _ref.candidates;
  var startCenter = draggable2.page.borderBox.center;
  var sorted = candidates.map(function(candidate) {
    var axis = candidate.axis;
    var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);
    return {
      id: candidate.descriptor.id,
      distance: distance(startCenter, target)
    };
  }).sort(function(a3, b2) {
    return b2.distance - a3.distance;
  });
  return sorted[0] ? sorted[0].id : null;
}
function getDroppableOver$1(_ref2) {
  var pageBorderBox = _ref2.pageBorderBox, draggable2 = _ref2.draggable, droppables = _ref2.droppables;
  var candidates = toDroppableList(droppables).filter(function(item) {
    if (!item.isEnabled) {
      return false;
    }
    var active = item.subject.active;
    if (!active) {
      return false;
    }
    if (!getHasOverlap(pageBorderBox, active)) {
      return false;
    }
    if (isPositionInFrame(active)(pageBorderBox.center)) {
      return true;
    }
    var axis = item.axis;
    var childCenter = active.center[axis.crossAxisLine];
    var crossAxisStart = pageBorderBox[axis.crossAxisStart];
    var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];
    var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);
    var isStartContained = isContained(crossAxisStart);
    var isEndContained = isContained(crossAxisEnd);
    if (!isStartContained && !isEndContained) {
      return true;
    }
    if (isStartContained) {
      return crossAxisStart < childCenter;
    }
    return crossAxisEnd > childCenter;
  });
  if (!candidates.length) {
    return null;
  }
  if (candidates.length === 1) {
    return candidates[0].descriptor.id;
  }
  return getFurthestAway({
    pageBorderBox,
    draggable: draggable2,
    candidates
  });
}
var offsetRectByPosition = function offsetRectByPosition2(rect, point) {
  return getRect(offsetByPosition(rect, point));
};
var withDroppableScroll = function(droppable2, area) {
  var frame = droppable2.frame;
  if (!frame) {
    return area;
  }
  return offsetRectByPosition(area, frame.scroll.diff.value);
};
function getIsDisplaced(_ref) {
  var displaced = _ref.displaced, id = _ref.id;
  return Boolean(displaced.visible[id] || displaced.invisible[id]);
}
function atIndex(_ref) {
  var draggable2 = _ref.draggable, closest3 = _ref.closest, inHomeList = _ref.inHomeList;
  if (!closest3) {
    return null;
  }
  if (!inHomeList) {
    return closest3.descriptor.index;
  }
  if (closest3.descriptor.index > draggable2.descriptor.index) {
    return closest3.descriptor.index - 1;
  }
  return closest3.descriptor.index;
}
var getReorderImpact = function(_ref2) {
  var targetRect = _ref2.pageBorderBoxWithDroppableScroll, draggable2 = _ref2.draggable, destination = _ref2.destination, insideDestination = _ref2.insideDestination, last = _ref2.last, viewport = _ref2.viewport, afterCritical = _ref2.afterCritical;
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var closest3 = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childCenter = child.page.borderBox.center[axis.line];
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: last,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd <= childCenter;
      }
      return targetStart < childCenter - displacement;
    }
    if (isDisplaced) {
      return targetEnd <= childCenter + displacement;
    }
    return targetStart < childCenter;
  });
  var newIndex = atIndex({
    draggable: draggable2,
    closest: closest3,
    inHomeList: isHomeOf(draggable2, destination)
  });
  return calculateReorderImpact({
    draggable: draggable2,
    insideDestination,
    destination,
    viewport,
    last,
    displacedBy,
    index: newIndex
  });
};
var combineThresholdDivisor = 4;
var getCombineImpact = function(_ref) {
  var draggable2 = _ref.draggable, targetRect = _ref.pageBorderBoxWithDroppableScroll, previousImpact = _ref.previousImpact, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;
  if (!destination.isCombineEnabled) {
    return null;
  }
  var axis = destination.axis;
  var displacedBy = getDisplacedBy(destination.axis, draggable2.displaceBy);
  var displacement = displacedBy.value;
  var targetStart = targetRect[axis.start];
  var targetEnd = targetRect[axis.end];
  var withoutDragging = removeDraggableFromList(draggable2, insideDestination);
  var combineWith = find(withoutDragging, function(child) {
    var id = child.descriptor.id;
    var childRect = child.page.borderBox;
    var childSize = childRect[axis.size];
    var threshold = childSize / combineThresholdDivisor;
    var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);
    var isDisplaced = getIsDisplaced({
      displaced: previousImpact.displaced,
      id
    });
    if (didStartAfterCritical$1) {
      if (isDisplaced) {
        return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;
      }
      return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;
    }
    if (isDisplaced) {
      return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;
    }
    return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;
  });
  if (!combineWith) {
    return null;
  }
  var impact = {
    displacedBy,
    displaced: previousImpact.displaced,
    at: {
      type: "COMBINE",
      combine: {
        draggableId: combineWith.descriptor.id,
        droppableId: destination.descriptor.id
      }
    }
  };
  return impact;
};
var getDragImpact = function(_ref) {
  var pageOffset = _ref.pageOffset, draggable2 = _ref.draggable, draggables = _ref.draggables, droppables = _ref.droppables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBox = offsetRectByPosition(draggable2.page.borderBox, pageOffset);
  var destinationId = getDroppableOver$1({
    pageBorderBox,
    draggable: draggable2,
    droppables
  });
  if (!destinationId) {
    return noImpact;
  }
  var destination = droppables[destinationId];
  var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);
  var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);
  return getCombineImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    previousImpact,
    destination,
    insideDestination,
    afterCritical
  }) || getReorderImpact({
    pageBorderBoxWithDroppableScroll,
    draggable: draggable2,
    destination,
    insideDestination,
    last: previousImpact.displaced,
    viewport,
    afterCritical
  });
};
var patchDroppableMap = function(droppables, updated) {
  var _extends2;
  return _extends({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));
};
var clearUnusedPlaceholder = function clearUnusedPlaceholder2(_ref) {
  var previousImpact = _ref.previousImpact, impact = _ref.impact, droppables = _ref.droppables;
  var last = whatIsDraggedOver(previousImpact);
  var now = whatIsDraggedOver(impact);
  if (!last) {
    return droppables;
  }
  if (last === now) {
    return droppables;
  }
  var lastDroppable = droppables[last];
  if (!lastDroppable.subject.withPlaceholder) {
    return droppables;
  }
  var updated = removePlaceholder(lastDroppable);
  return patchDroppableMap(droppables, updated);
};
var recomputePlaceholders = function(_ref2) {
  var draggable2 = _ref2.draggable, draggables = _ref2.draggables, droppables = _ref2.droppables, previousImpact = _ref2.previousImpact, impact = _ref2.impact;
  var cleaned = clearUnusedPlaceholder({
    previousImpact,
    impact,
    droppables
  });
  var isOver = whatIsDraggedOver(impact);
  if (!isOver) {
    return cleaned;
  }
  var droppable2 = droppables[isOver];
  if (isHomeOf(draggable2, droppable2)) {
    return cleaned;
  }
  if (droppable2.subject.withPlaceholder) {
    return cleaned;
  }
  var patched = addPlaceholder(droppable2, draggable2, draggables);
  return patchDroppableMap(cleaned, patched);
};
var update = function(_ref) {
  var state = _ref.state, forcedClientSelection = _ref.clientSelection, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport, forcedImpact = _ref.impact, scrollJumpRequest = _ref.scrollJumpRequest;
  var viewport = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var clientSelection = forcedClientSelection || state.current.client.selection;
  var offset3 = subtract(clientSelection, state.initial.client.selection);
  var client = {
    offset: offset3,
    selection: clientSelection,
    borderBoxCenter: add(state.initial.client.borderBoxCenter, offset3)
  };
  var page = {
    selection: add(client.selection, viewport.scroll.current),
    borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),
    offset: add(client.offset, viewport.scroll.diff.value)
  };
  var current = {
    client,
    page
  };
  if (state.phase === "COLLECTING") {
    return _extends({
      phase: "COLLECTING"
    }, state, {
      dimensions,
      viewport,
      current
    });
  }
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var newImpact = forcedImpact || getDragImpact({
    pageOffset: page.offset,
    draggable: draggable2,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact: state.impact,
    viewport,
    afterCritical: state.afterCritical
  });
  var withUpdatedPlaceholders = recomputePlaceholders({
    draggable: draggable2,
    impact: newImpact,
    previousImpact: state.impact,
    draggables: dimensions.draggables,
    droppables: dimensions.droppables
  });
  var result = _extends({}, state, {
    current,
    dimensions: {
      draggables: dimensions.draggables,
      droppables: withUpdatedPlaceholders
    },
    impact: newImpact,
    viewport,
    scrollJumpRequest: scrollJumpRequest || null,
    forceShouldAnimate: scrollJumpRequest ? false : null
  });
  return result;
};
function getDraggables$1(ids, draggables) {
  return ids.map(function(id) {
    return draggables[id];
  });
}
var recompute = function(_ref) {
  var impact = _ref.impact, viewport = _ref.viewport, draggables = _ref.draggables, destination = _ref.destination, forceShouldAnimate = _ref.forceShouldAnimate;
  var last = impact.displaced;
  var afterDragging = getDraggables$1(last.all, draggables);
  var displaced = getDisplacementGroups({
    afterDragging,
    destination,
    displacedBy: impact.displacedBy,
    viewport: viewport.frame,
    forceShouldAnimate,
    last
  });
  return _extends({}, impact, {
    displaced
  });
};
var getClientBorderBoxCenter = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, droppable2 = _ref.droppable, draggables = _ref.draggables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({
    impact,
    draggable: draggable2,
    draggables,
    droppable: droppable2,
    afterCritical
  });
  return getClientFromPageBorderBoxCenter({
    pageBorderBoxCenter,
    draggable: draggable2,
    viewport
  });
};
var refreshSnap = function(_ref) {
  var state = _ref.state, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport;
  !(state.movementMode === "SNAP") ? true ? invariant2(false) : invariant2(false) : void 0;
  var needsVisibilityCheck = state.impact;
  var viewport = forcedViewport || state.viewport;
  var dimensions = forcedDimensions || state.dimensions;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var draggable2 = draggables[state.critical.draggable.id];
  var isOver = whatIsDraggedOver(needsVisibilityCheck);
  !isOver ? true ? invariant2(false, "Must be over a destination in SNAP movement mode") : invariant2(false) : void 0;
  var destination = droppables[isOver];
  var impact = recompute({
    impact: needsVisibilityCheck,
    viewport,
    destination,
    draggables
  });
  var clientSelection = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    droppable: destination,
    draggables,
    viewport,
    afterCritical: state.afterCritical
  });
  return update({
    impact,
    clientSelection,
    state,
    dimensions,
    viewport
  });
};
var getHomeLocation = function(descriptor) {
  return {
    index: descriptor.index,
    droppableId: descriptor.droppableId
  };
};
var getLiftEffect = function(_ref) {
  var draggable2 = _ref.draggable, home2 = _ref.home, draggables = _ref.draggables, viewport = _ref.viewport;
  var displacedBy = getDisplacedBy(home2.axis, draggable2.displaceBy);
  var insideHome = getDraggablesInsideDroppable(home2.descriptor.id, draggables);
  var rawIndex = insideHome.indexOf(draggable2);
  !(rawIndex !== -1) ? true ? invariant2(false, "Expected draggable to be inside home list") : invariant2(false) : void 0;
  var afterDragging = insideHome.slice(rawIndex + 1);
  var effected = afterDragging.reduce(function(previous, item) {
    previous[item.descriptor.id] = true;
    return previous;
  }, {});
  var afterCritical = {
    inVirtualList: home2.descriptor.mode === "virtual",
    displacedBy,
    effected
  };
  var displaced = getDisplacementGroups({
    afterDragging,
    destination: home2,
    displacedBy,
    last: null,
    viewport: viewport.frame,
    forceShouldAnimate: false
  });
  var impact = {
    displaced,
    displacedBy,
    at: {
      type: "REORDER",
      destination: getHomeLocation(draggable2.descriptor)
    }
  };
  return {
    impact,
    afterCritical
  };
};
var patchDimensionMap = function(dimensions, updated) {
  return {
    draggables: dimensions.draggables,
    droppables: patchDroppableMap(dimensions.droppables, updated)
  };
};
var start = function start2(key) {
  if (true) {
    {
      return;
    }
  }
};
var finish = function finish2(key) {
  if (true) {
    {
      return;
    }
  }
};
var offsetDraggable = function(_ref) {
  var draggable2 = _ref.draggable, offset$1 = _ref.offset, initialWindowScroll = _ref.initialWindowScroll;
  var client = offset(draggable2.client, offset$1);
  var page = withScroll(client, initialWindowScroll);
  var moved = _extends({}, draggable2, {
    placeholder: _extends({}, draggable2.placeholder, {
      client
    }),
    client,
    page
  });
  return moved;
};
var getFrame = function(droppable2) {
  var frame = droppable2.frame;
  !frame ? true ? invariant2(false, "Expected Droppable to have a frame") : invariant2(false) : void 0;
  return frame;
};
var adjustAdditionsForScrollChanges = function(_ref) {
  var additions = _ref.additions, updatedDroppables = _ref.updatedDroppables, viewport = _ref.viewport;
  var windowScrollChange = viewport.scroll.diff.value;
  return additions.map(function(draggable2) {
    var droppableId = draggable2.descriptor.droppableId;
    var modified = updatedDroppables[droppableId];
    var frame = getFrame(modified);
    var droppableScrollChange = frame.scroll.diff.value;
    var totalChange = add(windowScrollChange, droppableScrollChange);
    var moved = offsetDraggable({
      draggable: draggable2,
      offset: totalChange,
      initialWindowScroll: viewport.scroll.initial
    });
    return moved;
  });
};
var publishWhileDraggingInVirtual = function(_ref) {
  var state = _ref.state, published = _ref.published;
  start();
  var withScrollChange = published.modified.map(function(update2) {
    var existing = state.dimensions.droppables[update2.droppableId];
    var scrolled = scrollDroppable(existing, update2.scroll);
    return scrolled;
  });
  var droppables = _extends({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));
  var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({
    additions: published.additions,
    updatedDroppables: droppables,
    viewport: state.viewport
  }));
  var draggables = _extends({}, state.dimensions.draggables, {}, updatedAdditions);
  published.removals.forEach(function(id) {
    delete draggables[id];
  });
  var dimensions = {
    droppables,
    draggables
  };
  var wasOverId = whatIsDraggedOver(state.impact);
  var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;
  var draggable2 = dimensions.draggables[state.critical.draggable.id];
  var home2 = dimensions.droppables[state.critical.droppable.id];
  var _getLiftEffect = getLiftEffect({
    draggable: draggable2,
    home: home2,
    draggables,
    viewport: state.viewport
  }), onLiftImpact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
  var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;
  var impact = getDragImpact({
    pageOffset: state.current.page.offset,
    draggable: dimensions.draggables[state.critical.draggable.id],
    draggables: dimensions.draggables,
    droppables: dimensions.droppables,
    previousImpact,
    viewport: state.viewport,
    afterCritical
  });
  finish();
  var draggingState = _extends({
    phase: "DRAGGING"
  }, state, {
    phase: "DRAGGING",
    impact,
    onLiftImpact,
    dimensions,
    afterCritical,
    forceShouldAnimate: false
  });
  if (state.phase === "COLLECTING") {
    return draggingState;
  }
  var dropPending3 = _extends({
    phase: "DROP_PENDING"
  }, draggingState, {
    phase: "DROP_PENDING",
    reason: state.reason,
    isWaiting: false
  });
  return dropPending3;
};
var isSnapping = function isSnapping2(state) {
  return state.movementMode === "SNAP";
};
var postDroppableChange = function postDroppableChange2(state, updated, isEnabledChanging) {
  var dimensions = patchDimensionMap(state.dimensions, updated);
  if (!isSnapping(state) || isEnabledChanging) {
    return update({
      state,
      dimensions
    });
  }
  return refreshSnap({
    state,
    dimensions
  });
};
function removeScrollJumpRequest(state) {
  if (state.isDragging && state.movementMode === "SNAP") {
    return _extends({
      phase: "DRAGGING"
    }, state, {
      scrollJumpRequest: null
    });
  }
  return state;
}
var idle = {
  phase: "IDLE",
  completed: null,
  shouldFlush: false
};
var reducer = function(state, action) {
  if (state === void 0) {
    state = idle;
  }
  if (action.type === "FLUSH") {
    return _extends({}, idle, {
      shouldFlush: true
    });
  }
  if (action.type === "INITIAL_PUBLISH") {
    !(state.phase === "IDLE") ? true ? invariant2(false, "INITIAL_PUBLISH must come after a IDLE phase") : invariant2(false) : void 0;
    var _action$payload = action.payload, critical = _action$payload.critical, clientSelection = _action$payload.clientSelection, viewport = _action$payload.viewport, dimensions = _action$payload.dimensions, movementMode = _action$payload.movementMode;
    var draggable2 = dimensions.draggables[critical.draggable.id];
    var home2 = dimensions.droppables[critical.droppable.id];
    var client = {
      selection: clientSelection,
      borderBoxCenter: draggable2.client.borderBox.center,
      offset: origin
    };
    var initial = {
      client,
      page: {
        selection: add(client.selection, viewport.scroll.initial),
        borderBoxCenter: add(client.selection, viewport.scroll.initial),
        offset: add(client.selection, viewport.scroll.diff.value)
      }
    };
    var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function(item) {
      return !item.isFixedOnPage;
    });
    var _getLiftEffect = getLiftEffect({
      draggable: draggable2,
      home: home2,
      draggables: dimensions.draggables,
      viewport
    }), impact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;
    var result = {
      phase: "DRAGGING",
      isDragging: true,
      critical,
      movementMode,
      dimensions,
      initial,
      current: initial,
      isWindowScrollAllowed,
      impact,
      afterCritical,
      onLiftImpact: impact,
      viewport,
      scrollJumpRequest: null,
      forceShouldAnimate: null
    };
    return result;
  }
  if (action.type === "COLLECTION_STARTING") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, "Collection cannot start from phase " + state.phase) : invariant2(false) : void 0;
    var _result = _extends({
      phase: "COLLECTING"
    }, state, {
      phase: "COLLECTING"
    });
    return _result;
  }
  if (action.type === "PUBLISH_WHILE_DRAGGING") {
    !(state.phase === "COLLECTING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant2(false) : void 0;
    return publishWhileDraggingInVirtual({
      state,
      published: action.payload
    });
  }
  if (action.type === "MOVE") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _clientSelection = action.payload.client;
    if (isEqual4(_clientSelection, state.current.client.selection)) {
      return state;
    }
    return update({
      state,
      clientSelection: _clientSelection,
      impact: isSnapping(state) ? state.impact : null
    });
  }
  if (action.type === "UPDATE_DROPPABLE_SCROLL") {
    if (state.phase === "DROP_PENDING") {
      return removeScrollJumpRequest(state);
    }
    if (state.phase === "COLLECTING") {
      return removeScrollJumpRequest(state);
    }
    !isMovementAllowed(state) ? true ? invariant2(false, action.type + " not permitted in phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload2 = action.payload, id = _action$payload2.id, newScroll = _action$payload2.newScroll;
    var target = state.dimensions.droppables[id];
    if (!target) {
      return state;
    }
    var scrolled = scrollDroppable(target, newScroll);
    return postDroppableChange(state, scrolled, false);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload3 = action.payload, _id = _action$payload3.id, isEnabled = _action$payload3.isEnabled;
    var _target = state.dimensions.droppables[_id];
    !_target ? true ? invariant2(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant2(false) : void 0;
    !(_target.isEnabled !== isEnabled) ? true ? invariant2(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant2(false) : void 0;
    var updated = _extends({}, _target, {
      isEnabled
    });
    return postDroppableChange(state, updated, true);
  }
  if (action.type === "UPDATE_DROPPABLE_IS_COMBINE_ENABLED") {
    if (state.phase === "DROP_PENDING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Attempting to move in an unsupported phase " + state.phase) : invariant2(false) : void 0;
    var _action$payload4 = action.payload, _id2 = _action$payload4.id, isCombineEnabled = _action$payload4.isCombineEnabled;
    var _target2 = state.dimensions.droppables[_id2];
    !_target2 ? true ? invariant2(false, "Cannot find Droppable[id: " + _id2 + "] to toggle its isCombineEnabled state") : invariant2(false) : void 0;
    !(_target2.isCombineEnabled !== isCombineEnabled) ? true ? invariant2(false, "Trying to set droppable isCombineEnabled to " + String(isCombineEnabled) + "\n      but it is already " + String(_target2.isCombineEnabled)) : invariant2(false) : void 0;
    var _updated = _extends({}, _target2, {
      isCombineEnabled
    });
    return postDroppableChange(state, _updated, true);
  }
  if (action.type === "MOVE_BY_WINDOW_SCROLL") {
    if (state.phase === "DROP_PENDING" || state.phase === "DROP_ANIMATING") {
      return state;
    }
    !isMovementAllowed(state) ? true ? invariant2(false, "Cannot move by window in phase " + state.phase) : invariant2(false) : void 0;
    !state.isWindowScrollAllowed ? true ? invariant2(false, "Window scrolling is currently not supported for fixed lists") : invariant2(false) : void 0;
    var _newScroll = action.payload.newScroll;
    if (isEqual4(state.viewport.scroll.current, _newScroll)) {
      return removeScrollJumpRequest(state);
    }
    var _viewport = scrollViewport(state.viewport, _newScroll);
    if (isSnapping(state)) {
      return refreshSnap({
        state,
        viewport: _viewport
      });
    }
    return update({
      state,
      viewport: _viewport
    });
  }
  if (action.type === "UPDATE_VIEWPORT_MAX_SCROLL") {
    if (!isMovementAllowed(state)) {
      return state;
    }
    var maxScroll = action.payload.maxScroll;
    if (isEqual4(maxScroll, state.viewport.scroll.max)) {
      return state;
    }
    var withMaxScroll3 = _extends({}, state.viewport, {
      scroll: _extends({}, state.viewport.scroll, {
        max: maxScroll
      })
    });
    return _extends({
      phase: "DRAGGING"
    }, state, {
      viewport: withMaxScroll3
    });
  }
  if (action.type === "MOVE_UP" || action.type === "MOVE_DOWN" || action.type === "MOVE_LEFT" || action.type === "MOVE_RIGHT") {
    if (state.phase === "COLLECTING" || state.phase === "DROP_PENDING") {
      return state;
    }
    !(state.phase === "DRAGGING") ? true ? invariant2(false, action.type + " received while not in DRAGGING phase") : invariant2(false) : void 0;
    var _result2 = moveInDirection({
      state,
      type: action.type
    });
    if (!_result2) {
      return state;
    }
    return update({
      state,
      impact: _result2.impact,
      clientSelection: _result2.clientSelection,
      scrollJumpRequest: _result2.scrollJumpRequest
    });
  }
  if (action.type === "DROP_PENDING") {
    var reason = action.payload.reason;
    !(state.phase === "COLLECTING") ? true ? invariant2(false, "Can only move into the DROP_PENDING phase from the COLLECTING phase") : invariant2(false) : void 0;
    var newState = _extends({
      phase: "DROP_PENDING"
    }, state, {
      phase: "DROP_PENDING",
      isWaiting: true,
      reason
    });
    return newState;
  }
  if (action.type === "DROP_ANIMATE") {
    var _action$payload5 = action.payload, completed = _action$payload5.completed, dropDuration = _action$payload5.dropDuration, newHomeClientOffset = _action$payload5.newHomeClientOffset;
    !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot animate drop from phase " + state.phase) : invariant2(false) : void 0;
    var _result3 = {
      phase: "DROP_ANIMATING",
      completed,
      dropDuration,
      newHomeClientOffset,
      dimensions: state.dimensions
    };
    return _result3;
  }
  if (action.type === "DROP_COMPLETE") {
    var _completed = action.payload.completed;
    return {
      phase: "IDLE",
      completed: _completed,
      shouldFlush: false
    };
  }
  return state;
};
var beforeInitialCapture = function beforeInitialCapture2(args) {
  return {
    type: "BEFORE_INITIAL_CAPTURE",
    payload: args
  };
};
var lift = function lift2(args) {
  return {
    type: "LIFT",
    payload: args
  };
};
var initialPublish = function initialPublish2(args) {
  return {
    type: "INITIAL_PUBLISH",
    payload: args
  };
};
var publishWhileDragging = function publishWhileDragging2(args) {
  return {
    type: "PUBLISH_WHILE_DRAGGING",
    payload: args
  };
};
var collectionStarting = function collectionStarting2() {
  return {
    type: "COLLECTION_STARTING",
    payload: null
  };
};
var updateDroppableScroll = function updateDroppableScroll2(args) {
  return {
    type: "UPDATE_DROPPABLE_SCROLL",
    payload: args
  };
};
var updateDroppableIsEnabled = function updateDroppableIsEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_ENABLED",
    payload: args
  };
};
var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled2(args) {
  return {
    type: "UPDATE_DROPPABLE_IS_COMBINE_ENABLED",
    payload: args
  };
};
var move = function move2(args) {
  return {
    type: "MOVE",
    payload: args
  };
};
var moveByWindowScroll = function moveByWindowScroll2(args) {
  return {
    type: "MOVE_BY_WINDOW_SCROLL",
    payload: args
  };
};
var updateViewportMaxScroll = function updateViewportMaxScroll2(args) {
  return {
    type: "UPDATE_VIEWPORT_MAX_SCROLL",
    payload: args
  };
};
var moveUp = function moveUp2() {
  return {
    type: "MOVE_UP",
    payload: null
  };
};
var moveDown = function moveDown2() {
  return {
    type: "MOVE_DOWN",
    payload: null
  };
};
var moveRight = function moveRight2() {
  return {
    type: "MOVE_RIGHT",
    payload: null
  };
};
var moveLeft = function moveLeft2() {
  return {
    type: "MOVE_LEFT",
    payload: null
  };
};
var flush = function flush2() {
  return {
    type: "FLUSH",
    payload: null
  };
};
var animateDrop = function animateDrop2(args) {
  return {
    type: "DROP_ANIMATE",
    payload: args
  };
};
var completeDrop = function completeDrop2(args) {
  return {
    type: "DROP_COMPLETE",
    payload: args
  };
};
var drop = function drop2(args) {
  return {
    type: "DROP",
    payload: args
  };
};
var dropPending = function dropPending2(args) {
  return {
    type: "DROP_PENDING",
    payload: args
  };
};
var dropAnimationFinished = function dropAnimationFinished2() {
  return {
    type: "DROP_ANIMATION_FINISHED",
    payload: null
  };
};
function checkIndexes(insideDestination) {
  if (insideDestination.length <= 1) {
    return;
  }
  var indexes = insideDestination.map(function(d3) {
    return d3.descriptor.index;
  });
  var errors = {};
  for (var i3 = 1; i3 < indexes.length; i3++) {
    var current = indexes[i3];
    var previous = indexes[i3 - 1];
    if (current !== previous + 1) {
      errors[current] = true;
    }
  }
  if (!Object.keys(errors).length) {
    return;
  }
  var formatted = indexes.map(function(index) {
    var hasError = Boolean(errors[index]);
    return hasError ? "[🔥" + index + "]" : "" + index;
  }).join(", ");
  true ? warning4("\n    Detected non-consecutive <Draggable /> indexes.\n\n    (This can cause unexpected bugs)\n\n    " + formatted + "\n  ") : void 0;
}
function validateDimensions(critical, dimensions) {
  if (true) {
    var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);
    checkIndexes(insideDestination);
  }
}
var lift$1 = function(marshal) {
  return function(_ref) {
    var getState2 = _ref.getState, dispatch = _ref.dispatch;
    return function(next) {
      return function(action) {
        if (action.type !== "LIFT") {
          next(action);
          return;
        }
        var _action$payload = action.payload, id = _action$payload.id, clientSelection = _action$payload.clientSelection, movementMode = _action$payload.movementMode;
        var initial = getState2();
        if (initial.phase === "DROP_ANIMATING") {
          dispatch(completeDrop({
            completed: initial.completed
          }));
        }
        !(getState2().phase === "IDLE") ? true ? invariant2(false, "Unexpected phase to start a drag") : invariant2(false) : void 0;
        dispatch(flush());
        dispatch(beforeInitialCapture({
          draggableId: id,
          movementMode
        }));
        var scrollOptions = {
          shouldPublishImmediately: movementMode === "SNAP"
        };
        var request = {
          draggableId: id,
          scrollOptions
        };
        var _marshal$startPublish = marshal.startPublishing(request), critical = _marshal$startPublish.critical, dimensions = _marshal$startPublish.dimensions, viewport = _marshal$startPublish.viewport;
        validateDimensions(critical, dimensions);
        dispatch(initialPublish({
          critical,
          dimensions,
          clientSelection,
          movementMode,
          viewport
        }));
      };
    };
  };
};
var style = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          marshal.dragging();
        }
        if (action.type === "DROP_ANIMATE") {
          marshal.dropping(action.payload.completed.result.reason);
        }
        if (action.type === "FLUSH" || action.type === "DROP_COMPLETE") {
          marshal.resting();
        }
        next(action);
      };
    };
  };
};
var curves = {
  outOfTheWay: "cubic-bezier(0.2, 0, 0, 1)",
  drop: "cubic-bezier(.2,1,.1,1)"
};
var combine = {
  opacity: {
    drop: 0,
    combining: 0.7
  },
  scale: {
    drop: 0.75
  }
};
var timings = {
  outOfTheWay: 0.2,
  minDropTime: 0.33,
  maxDropTime: 0.55
};
var outOfTheWayTiming = timings.outOfTheWay + "s " + curves.outOfTheWay;
var transitions = {
  fluid: "opacity " + outOfTheWayTiming,
  snap: "transform " + outOfTheWayTiming + ", opacity " + outOfTheWayTiming,
  drop: function drop3(duration) {
    var timing = duration + "s " + curves.drop;
    return "transform " + timing + ", opacity " + timing;
  },
  outOfTheWay: "transform " + outOfTheWayTiming,
  placeholder: "height " + outOfTheWayTiming + ", width " + outOfTheWayTiming + ", margin " + outOfTheWayTiming
};
var moveTo = function moveTo2(offset3) {
  return isEqual4(offset3, origin) ? null : "translate(" + offset3.x + "px, " + offset3.y + "px)";
};
var transforms = {
  moveTo,
  drop: function drop4(offset3, isCombining) {
    var translate = moveTo(offset3);
    if (!translate) {
      return null;
    }
    if (!isCombining) {
      return translate;
    }
    return translate + " scale(" + combine.scale.drop + ")";
  }
};
var minDropTime = timings.minDropTime;
var maxDropTime = timings.maxDropTime;
var dropTimeRange = maxDropTime - minDropTime;
var maxDropTimeAtDistance = 1500;
var cancelDropModifier = 0.6;
var getDropDuration = function(_ref) {
  var current = _ref.current, destination = _ref.destination, reason = _ref.reason;
  var distance$1 = distance(current, destination);
  if (distance$1 <= 0) {
    return minDropTime;
  }
  if (distance$1 >= maxDropTimeAtDistance) {
    return maxDropTime;
  }
  var percentage = distance$1 / maxDropTimeAtDistance;
  var duration = minDropTime + dropTimeRange * percentage;
  var withDuration = reason === "CANCEL" ? duration * cancelDropModifier : duration;
  return Number(withDuration.toFixed(2));
};
var getNewHomeClientOffset = function(_ref) {
  var impact = _ref.impact, draggable2 = _ref.draggable, dimensions = _ref.dimensions, viewport = _ref.viewport, afterCritical = _ref.afterCritical;
  var draggables = dimensions.draggables, droppables = dimensions.droppables;
  var droppableId = whatIsDraggedOver(impact);
  var destination = droppableId ? droppables[droppableId] : null;
  var home2 = droppables[draggable2.descriptor.droppableId];
  var newClientCenter = getClientBorderBoxCenter({
    impact,
    draggable: draggable2,
    draggables,
    afterCritical,
    droppable: destination || home2,
    viewport
  });
  var offset3 = subtract(newClientCenter, draggable2.client.borderBox.center);
  return offset3;
};
var getDropImpact = function(_ref) {
  var draggables = _ref.draggables, reason = _ref.reason, lastImpact = _ref.lastImpact, home2 = _ref.home, viewport = _ref.viewport, onLiftImpact = _ref.onLiftImpact;
  if (!lastImpact.at || reason !== "DROP") {
    var recomputedHomeImpact = recompute({
      draggables,
      impact: onLiftImpact,
      destination: home2,
      viewport,
      forceShouldAnimate: true
    });
    return {
      impact: recomputedHomeImpact,
      didDropInsideDroppable: false
    };
  }
  if (lastImpact.at.type === "REORDER") {
    return {
      impact: lastImpact,
      didDropInsideDroppable: true
    };
  }
  var withoutMovement = _extends({}, lastImpact, {
    displaced: emptyGroups
  });
  return {
    impact: withoutMovement,
    didDropInsideDroppable: true
  };
};
var drop$1 = function(_ref) {
  var getState2 = _ref.getState, dispatch = _ref.dispatch;
  return function(next) {
    return function(action) {
      if (action.type !== "DROP") {
        next(action);
        return;
      }
      var state = getState2();
      var reason = action.payload.reason;
      if (state.phase === "COLLECTING") {
        dispatch(dropPending({
          reason
        }));
        return;
      }
      if (state.phase === "IDLE") {
        return;
      }
      var isWaitingForDrop = state.phase === "DROP_PENDING" && state.isWaiting;
      !!isWaitingForDrop ? true ? invariant2(false, "A DROP action occurred while DROP_PENDING and still waiting") : invariant2(false) : void 0;
      !(state.phase === "DRAGGING" || state.phase === "DROP_PENDING") ? true ? invariant2(false, "Cannot drop in phase: " + state.phase) : invariant2(false) : void 0;
      var critical = state.critical;
      var dimensions = state.dimensions;
      var draggable2 = dimensions.draggables[state.critical.draggable.id];
      var _getDropImpact = getDropImpact({
        reason,
        lastImpact: state.impact,
        afterCritical: state.afterCritical,
        onLiftImpact: state.onLiftImpact,
        home: state.dimensions.droppables[state.critical.droppable.id],
        viewport: state.viewport,
        draggables: state.dimensions.draggables
      }), impact = _getDropImpact.impact, didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;
      var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;
      var combine2 = didDropInsideDroppable ? tryGetCombine(impact) : null;
      var source = {
        index: critical.draggable.index,
        droppableId: critical.droppable.id
      };
      var result = {
        draggableId: draggable2.descriptor.id,
        type: draggable2.descriptor.type,
        source,
        reason,
        mode: state.movementMode,
        destination,
        combine: combine2
      };
      var newHomeClientOffset = getNewHomeClientOffset({
        impact,
        draggable: draggable2,
        dimensions,
        viewport: state.viewport,
        afterCritical: state.afterCritical
      });
      var completed = {
        critical: state.critical,
        afterCritical: state.afterCritical,
        result,
        impact
      };
      var isAnimationRequired = !isEqual4(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);
      if (!isAnimationRequired) {
        dispatch(completeDrop({
          completed
        }));
        return;
      }
      var dropDuration = getDropDuration({
        current: state.current.client.offset,
        destination: newHomeClientOffset,
        reason
      });
      var args = {
        newHomeClientOffset,
        dropDuration,
        completed
      };
      dispatch(animateDrop(args));
    };
  };
};
var getWindowScroll3 = function() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};
function getWindowScrollBinding(update2) {
  return {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn(event) {
      if (event.target !== window && event.target !== window.document) {
        return;
      }
      update2();
    }
  };
}
function getScrollListener(_ref) {
  var onWindowScroll = _ref.onWindowScroll;
  function updateScroll() {
    onWindowScroll(getWindowScroll3());
  }
  var scheduled = raf_schd_esm_default(updateScroll);
  var binding = getWindowScrollBinding(scheduled);
  var unbind = noop2;
  function isActive() {
    return unbind !== noop2;
  }
  function start3() {
    !!isActive() ? true ? invariant2(false, "Cannot start scroll listener when already active") : invariant2(false) : void 0;
    unbind = bindEvents(window, [binding]);
  }
  function stop() {
    !isActive() ? true ? invariant2(false, "Cannot stop scroll listener when not active") : invariant2(false) : void 0;
    scheduled.cancel();
    unbind();
    unbind = noop2;
  }
  return {
    start: start3,
    stop,
    isActive
  };
}
var shouldEnd = function shouldEnd2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var scrollListener = function(store) {
  var listener = getScrollListener({
    onWindowScroll: function onWindowScroll(newScroll) {
      store.dispatch(moveByWindowScroll({
        newScroll
      }));
    }
  });
  return function(next) {
    return function(action) {
      if (!listener.isActive() && action.type === "INITIAL_PUBLISH") {
        listener.start();
      }
      if (listener.isActive() && shouldEnd(action)) {
        listener.stop();
      }
      next(action);
    };
  };
};
var getExpiringAnnounce = function(announce) {
  var wasCalled = false;
  var isExpired = false;
  var timeoutId = setTimeout(function() {
    isExpired = true;
  });
  var result = function result2(message) {
    if (wasCalled) {
      true ? warning4("Announcement already made. Not making a second announcement") : void 0;
      return;
    }
    if (isExpired) {
      true ? warning4("\n        Announcements cannot be made asynchronously.\n        Default message has already been announced.\n      ") : void 0;
      return;
    }
    wasCalled = true;
    announce(message);
    clearTimeout(timeoutId);
  };
  result.wasCalled = function() {
    return wasCalled;
  };
  return result;
};
var getAsyncMarshal = function() {
  var entries = [];
  var execute3 = function execute4(timerId) {
    var index = findIndex4(entries, function(item) {
      return item.timerId === timerId;
    });
    !(index !== -1) ? true ? invariant2(false, "Could not find timer") : invariant2(false) : void 0;
    var _entries$splice = entries.splice(index, 1), entry = _entries$splice[0];
    entry.callback();
  };
  var add3 = function add4(fn) {
    var timerId = setTimeout(function() {
      return execute3(timerId);
    });
    var entry = {
      timerId,
      callback: fn
    };
    entries.push(entry);
  };
  var flush3 = function flush4() {
    if (!entries.length) {
      return;
    }
    var shallow = [].concat(entries);
    entries.length = 0;
    shallow.forEach(function(entry) {
      clearTimeout(entry.timerId);
      entry.callback();
    });
  };
  return {
    add: add3,
    flush: flush3
  };
};
var areLocationsEqual = function areLocationsEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.droppableId === second.droppableId && first.index === second.index;
};
var isCombineEqual = function isCombineEqual2(first, second) {
  if (first == null && second == null) {
    return true;
  }
  if (first == null || second == null) {
    return false;
  }
  return first.draggableId === second.draggableId && first.droppableId === second.droppableId;
};
var isCriticalEqual = function isCriticalEqual2(first, second) {
  if (first === second) {
    return true;
  }
  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
  return isDraggableEqual && isDroppableEqual;
};
var withTimings = function withTimings2(key, fn) {
  start();
  fn();
  finish();
};
var getDragStart = function getDragStart2(critical, mode) {
  return {
    draggableId: critical.draggable.id,
    type: critical.droppable.type,
    source: {
      droppableId: critical.droppable.id,
      index: critical.draggable.index
    },
    mode
  };
};
var execute = function execute2(responder, data, announce, getDefaultMessage) {
  if (!responder) {
    announce(getDefaultMessage(data));
    return;
  }
  var willExpire = getExpiringAnnounce(announce);
  var provided = {
    announce: willExpire
  };
  responder(data, provided);
  if (!willExpire.wasCalled()) {
    announce(getDefaultMessage(data));
  }
};
var getPublisher = function(getResponders, announce) {
  var asyncMarshal = getAsyncMarshal();
  var dragging = null;
  var beforeCapture = function beforeCapture2(draggableId, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeCapture as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeCapture", function() {
      var fn = getResponders().onBeforeCapture;
      if (fn) {
        var before = {
          draggableId,
          mode
        };
        fn(before);
      }
    });
  };
  var beforeStart = function beforeStart2(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    withTimings("onBeforeDragStart", function() {
      var fn = getResponders().onBeforeDragStart;
      if (fn) {
        fn(getDragStart(critical, mode));
      }
    });
  };
  var start3 = function start4(critical, mode) {
    !!dragging ? true ? invariant2(false, "Cannot fire onBeforeDragStart as a drag start has already been published") : invariant2(false) : void 0;
    var data = getDragStart(critical, mode);
    dragging = {
      mode,
      lastCritical: critical,
      lastLocation: data.source,
      lastCombine: null
    };
    asyncMarshal.add(function() {
      withTimings("onDragStart", function() {
        return execute(getResponders().onDragStart, data, announce, preset.onDragStart);
      });
    });
  };
  var update2 = function update3(critical, impact) {
    var location = tryGetDestination(impact);
    var combine2 = tryGetCombine(impact);
    !dragging ? true ? invariant2(false, "Cannot fire onDragMove when onDragStart has not been called") : invariant2(false) : void 0;
    var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);
    if (hasCriticalChanged) {
      dragging.lastCritical = critical;
    }
    var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);
    if (hasLocationChanged) {
      dragging.lastLocation = location;
    }
    var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine2);
    if (hasGroupingChanged) {
      dragging.lastCombine = combine2;
    }
    if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {
      return;
    }
    var data = _extends({}, getDragStart(critical, dragging.mode), {
      combine: combine2,
      destination: location
    });
    asyncMarshal.add(function() {
      withTimings("onDragUpdate", function() {
        return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);
      });
    });
  };
  var flush3 = function flush4() {
    !dragging ? true ? invariant2(false, "Can only flush responders while dragging") : invariant2(false) : void 0;
    asyncMarshal.flush();
  };
  var drop5 = function drop6(result) {
    !dragging ? true ? invariant2(false, "Cannot fire onDragEnd when there is no matching onDragStart") : invariant2(false) : void 0;
    dragging = null;
    withTimings("onDragEnd", function() {
      return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);
    });
  };
  var abort = function abort2() {
    if (!dragging) {
      return;
    }
    var result = _extends({}, getDragStart(dragging.lastCritical, dragging.mode), {
      combine: null,
      destination: null,
      reason: "CANCEL"
    });
    drop5(result);
  };
  return {
    beforeCapture,
    beforeStart,
    start: start3,
    update: update2,
    flush: flush3,
    drop: drop5,
    abort
  };
};
var responders = function(getResponders, announce) {
  var publisher = getPublisher(getResponders, announce);
  return function(store) {
    return function(next) {
      return function(action) {
        if (action.type === "BEFORE_INITIAL_CAPTURE") {
          publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          var critical = action.payload.critical;
          publisher.beforeStart(critical, action.payload.movementMode);
          next(action);
          publisher.start(critical, action.payload.movementMode);
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          var result = action.payload.completed.result;
          publisher.flush();
          next(action);
          publisher.drop(result);
          return;
        }
        next(action);
        if (action.type === "FLUSH") {
          publisher.abort();
          return;
        }
        var state = store.getState();
        if (state.phase === "DRAGGING") {
          publisher.update(state.critical, state.impact);
        }
      };
    };
  };
};
var dropAnimationFinish = function(store) {
  return function(next) {
    return function(action) {
      if (action.type !== "DROP_ANIMATION_FINISHED") {
        next(action);
        return;
      }
      var state = store.getState();
      !(state.phase === "DROP_ANIMATING") ? true ? invariant2(false, "Cannot finish a drop animating when no drop is occurring") : invariant2(false) : void 0;
      store.dispatch(completeDrop({
        completed: state.completed
      }));
    };
  };
};
var dropAnimationFlushOnScroll = function(store) {
  var unbind = null;
  var frameId = null;
  function clear() {
    if (frameId) {
      cancelAnimationFrame(frameId);
      frameId = null;
    }
    if (unbind) {
      unbind();
      unbind = null;
    }
  }
  return function(next) {
    return function(action) {
      if (action.type === "FLUSH" || action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATION_FINISHED") {
        clear();
      }
      next(action);
      if (action.type !== "DROP_ANIMATE") {
        return;
      }
      var binding = {
        eventName: "scroll",
        options: {
          capture: true,
          passive: false,
          once: true
        },
        fn: function flushDropAnimation() {
          var state = store.getState();
          if (state.phase === "DROP_ANIMATING") {
            store.dispatch(dropAnimationFinished());
          }
        }
      };
      frameId = requestAnimationFrame(function() {
        frameId = null;
        unbind = bindEvents(window, [binding]);
      });
    };
  };
};
var dimensionMarshalStopper = function(marshal) {
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "DROP_COMPLETE" || action.type === "FLUSH" || action.type === "DROP_ANIMATE") {
          marshal.stopPublishing();
        }
        next(action);
      };
    };
  };
};
var focus = function(marshal) {
  var isWatching = false;
  return function() {
    return function(next) {
      return function(action) {
        if (action.type === "INITIAL_PUBLISH") {
          isWatching = true;
          marshal.tryRecordFocus(action.payload.critical.draggable.id);
          next(action);
          marshal.tryRestoreFocusRecorded();
          return;
        }
        next(action);
        if (!isWatching) {
          return;
        }
        if (action.type === "FLUSH") {
          isWatching = false;
          marshal.tryRestoreFocusRecorded();
          return;
        }
        if (action.type === "DROP_COMPLETE") {
          isWatching = false;
          var result = action.payload.completed.result;
          if (result.combine) {
            marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);
          }
          marshal.tryRestoreFocusRecorded();
        }
      };
    };
  };
};
var shouldStop = function shouldStop2(action) {
  return action.type === "DROP_COMPLETE" || action.type === "DROP_ANIMATE" || action.type === "FLUSH";
};
var autoScroll = function(autoScroller) {
  return function(store) {
    return function(next) {
      return function(action) {
        if (shouldStop(action)) {
          autoScroller.stop();
          next(action);
          return;
        }
        if (action.type === "INITIAL_PUBLISH") {
          next(action);
          var state = store.getState();
          !(state.phase === "DRAGGING") ? true ? invariant2(false, "Expected phase to be DRAGGING after INITIAL_PUBLISH") : invariant2(false) : void 0;
          autoScroller.start(state);
          return;
        }
        next(action);
        autoScroller.scroll(store.getState());
      };
    };
  };
};
var pendingDrop = function(store) {
  return function(next) {
    return function(action) {
      next(action);
      if (action.type !== "PUBLISH_WHILE_DRAGGING") {
        return;
      }
      var postActionState = store.getState();
      if (postActionState.phase !== "DROP_PENDING") {
        return;
      }
      if (postActionState.isWaiting) {
        return;
      }
      store.dispatch(drop({
        reason: postActionState.reason
      }));
    };
  };
};
var composeEnhancers = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
  name: "react-beautiful-dnd"
}) : compose;
var createStore2 = function(_ref) {
  var dimensionMarshal = _ref.dimensionMarshal, focusMarshal = _ref.focusMarshal, styleMarshal = _ref.styleMarshal, getResponders = _ref.getResponders, announce = _ref.announce, autoScroller = _ref.autoScroller;
  return createStore(reducer, composeEnhancers(applyMiddleware(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));
};
var clean$1 = function clean3() {
  return {
    additions: {},
    removals: {},
    modified: {}
  };
};
function createPublisher(_ref) {
  var registry = _ref.registry, callbacks = _ref.callbacks;
  var staging = clean$1();
  var frameId = null;
  var collect = function collect2() {
    if (frameId) {
      return;
    }
    callbacks.collectionStarting();
    frameId = requestAnimationFrame(function() {
      frameId = null;
      start();
      var _staging = staging, additions = _staging.additions, removals = _staging.removals, modified = _staging.modified;
      var added = Object.keys(additions).map(function(id) {
        return registry.draggable.getById(id).getDimension(origin);
      }).sort(function(a3, b2) {
        return a3.descriptor.index - b2.descriptor.index;
      });
      var updated = Object.keys(modified).map(function(id) {
        var entry = registry.droppable.getById(id);
        var scroll3 = entry.callbacks.getScrollWhileDragging();
        return {
          droppableId: id,
          scroll: scroll3
        };
      });
      var result = {
        additions: added,
        removals: Object.keys(removals),
        modified: updated
      };
      staging = clean$1();
      finish();
      callbacks.publish(result);
    });
  };
  var add3 = function add4(entry) {
    var id = entry.descriptor.id;
    staging.additions[id] = entry;
    staging.modified[entry.descriptor.droppableId] = true;
    if (staging.removals[id]) {
      delete staging.removals[id];
    }
    collect();
  };
  var remove = function remove2(entry) {
    var descriptor = entry.descriptor;
    staging.removals[descriptor.id] = true;
    staging.modified[descriptor.droppableId] = true;
    if (staging.additions[descriptor.id]) {
      delete staging.additions[descriptor.id];
    }
    collect();
  };
  var stop = function stop2() {
    if (!frameId) {
      return;
    }
    cancelAnimationFrame(frameId);
    frameId = null;
    staging = clean$1();
  };
  return {
    add: add3,
    remove,
    stop
  };
}
var getMaxScroll = function(_ref) {
  var scrollHeight = _ref.scrollHeight, scrollWidth = _ref.scrollWidth, height = _ref.height, width = _ref.width;
  var maxScroll = subtract({
    x: scrollWidth,
    y: scrollHeight
  }, {
    x: width,
    y: height
  });
  var adjustedMaxScroll = {
    x: Math.max(0, maxScroll.x),
    y: Math.max(0, maxScroll.y)
  };
  return adjustedMaxScroll;
};
var getDocumentElement = function() {
  var doc = document.documentElement;
  !doc ? true ? invariant2(false, "Cannot find document.documentElement") : invariant2(false) : void 0;
  return doc;
};
var getMaxWindowScroll = function() {
  var doc = getDocumentElement();
  var maxScroll = getMaxScroll({
    scrollHeight: doc.scrollHeight,
    scrollWidth: doc.scrollWidth,
    width: doc.clientWidth,
    height: doc.clientHeight
  });
  return maxScroll;
};
var getViewport = function() {
  var scroll3 = getWindowScroll3();
  var maxScroll = getMaxWindowScroll();
  var top = scroll3.y;
  var left = scroll3.x;
  var doc = getDocumentElement();
  var width = doc.clientWidth;
  var height = doc.clientHeight;
  var right = left + width;
  var bottom = top + height;
  var frame = getRect({
    top,
    left,
    right,
    bottom
  });
  var viewport = {
    frame,
    scroll: {
      initial: scroll3,
      current: scroll3,
      max: maxScroll,
      diff: {
        value: origin,
        displacement: origin
      }
    }
  };
  return viewport;
};
var getInitialPublish = function(_ref) {
  var critical = _ref.critical, scrollOptions = _ref.scrollOptions, registry = _ref.registry;
  start();
  var viewport = getViewport();
  var windowScroll = viewport.scroll.current;
  var home2 = critical.droppable;
  var droppables = registry.droppable.getAllByType(home2.type).map(function(entry) {
    return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
  });
  var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function(entry) {
    return entry.getDimension(windowScroll);
  });
  var dimensions = {
    draggables: toDraggableMap(draggables),
    droppables: toDroppableMap(droppables)
  };
  finish();
  var result = {
    dimensions,
    critical,
    viewport
  };
  return result;
};
function shouldPublishUpdate(registry, dragging, entry) {
  if (entry.descriptor.id === dragging.id) {
    return false;
  }
  if (entry.descriptor.type !== dragging.type) {
    return false;
  }
  var home2 = registry.droppable.getById(entry.descriptor.droppableId);
  if (home2.descriptor.mode !== "virtual") {
    true ? warning4("\n      You are attempting to add or remove a Draggable [id: " + entry.descriptor.id + "]\n      while a drag is occurring. This is only supported for virtual lists.\n\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\n    ") : void 0;
    return false;
  }
  return true;
}
var createDimensionMarshal = function(registry, callbacks) {
  var collection = null;
  var publisher = createPublisher({
    callbacks: {
      publish: callbacks.publishWhileDragging,
      collectionStarting: callbacks.collectionStarting
    },
    registry
  });
  var updateDroppableIsEnabled3 = function updateDroppableIsEnabled4(id, isEnabled) {
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update is enabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    if (!collection) {
      return;
    }
    callbacks.updateDroppableIsEnabled({
      id,
      isEnabled
    });
  };
  var updateDroppableIsCombineEnabled3 = function updateDroppableIsCombineEnabled4(id, isCombineEnabled) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update isCombineEnabled flag of Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableIsCombineEnabled({
      id,
      isCombineEnabled
    });
  };
  var updateDroppableScroll3 = function updateDroppableScroll4(id, newScroll) {
    if (!collection) {
      return;
    }
    !registry.droppable.exists(id) ? true ? invariant2(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant2(false) : void 0;
    callbacks.updateDroppableScroll({
      id,
      newScroll
    });
  };
  var scrollDroppable2 = function scrollDroppable3(id, change) {
    if (!collection) {
      return;
    }
    registry.droppable.getById(id).callbacks.scroll(change);
  };
  var stopPublishing = function stopPublishing2() {
    if (!collection) {
      return;
    }
    publisher.stop();
    var home2 = collection.critical.droppable;
    registry.droppable.getAllByType(home2.type).forEach(function(entry) {
      return entry.callbacks.dragStopped();
    });
    collection.unsubscribe();
    collection = null;
  };
  var subscriber = function subscriber2(event) {
    !collection ? true ? invariant2(false, "Should only be subscribed when a collection is occurring") : invariant2(false) : void 0;
    var dragging = collection.critical.draggable;
    if (event.type === "ADDITION") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.add(event.value);
      }
    }
    if (event.type === "REMOVAL") {
      if (shouldPublishUpdate(registry, dragging, event.value)) {
        publisher.remove(event.value);
      }
    }
  };
  var startPublishing = function startPublishing2(request) {
    !!collection ? true ? invariant2(false, "Cannot start capturing critical dimensions as there is already a collection") : invariant2(false) : void 0;
    var entry = registry.draggable.getById(request.draggableId);
    var home2 = registry.droppable.getById(entry.descriptor.droppableId);
    var critical = {
      draggable: entry.descriptor,
      droppable: home2.descriptor
    };
    var unsubscribe = registry.subscribe(subscriber);
    collection = {
      critical,
      unsubscribe
    };
    return getInitialPublish({
      critical,
      registry,
      scrollOptions: request.scrollOptions
    });
  };
  var marshal = {
    updateDroppableIsEnabled: updateDroppableIsEnabled3,
    updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled3,
    scrollDroppable: scrollDroppable2,
    updateDroppableScroll: updateDroppableScroll3,
    startPublishing,
    stopPublishing
  };
  return marshal;
};
var canStartDrag = function(state, id) {
  if (state.phase === "IDLE") {
    return true;
  }
  if (state.phase !== "DROP_ANIMATING") {
    return false;
  }
  if (state.completed.result.draggableId === id) {
    return false;
  }
  return state.completed.result.reason === "DROP";
};
var scrollWindow = function(change) {
  window.scrollBy(change.x, change.y);
};
var getScrollableDroppables = memoize_one_esm_default(function(droppables) {
  return toDroppableList(droppables).filter(function(droppable2) {
    if (!droppable2.isEnabled) {
      return false;
    }
    if (!droppable2.frame) {
      return false;
    }
    return true;
  });
});
var getScrollableDroppableOver = function getScrollableDroppableOver2(target, droppables) {
  var maybe = find(getScrollableDroppables(droppables), function(droppable2) {
    !droppable2.frame ? true ? invariant2(false, "Invalid result") : invariant2(false) : void 0;
    return isPositionInFrame(droppable2.frame.pageMarginBox)(target);
  });
  return maybe;
};
var getBestScrollableDroppable = function(_ref) {
  var center = _ref.center, destination = _ref.destination, droppables = _ref.droppables;
  if (destination) {
    var _dimension = droppables[destination];
    if (!_dimension.frame) {
      return null;
    }
    return _dimension;
  }
  var dimension = getScrollableDroppableOver(center, droppables);
  return dimension;
};
var config = {
  startFromPercentage: 0.25,
  maxScrollAtPercentage: 0.05,
  maxPixelScroll: 28,
  ease: function ease(percentage) {
    return Math.pow(percentage, 2);
  },
  durationDampening: {
    stopDampeningAt: 1200,
    accelerateAt: 360
  }
};
var getDistanceThresholds = function(container, axis) {
  var startScrollingFrom = container[axis.size] * config.startFromPercentage;
  var maxScrollValueAt = container[axis.size] * config.maxScrollAtPercentage;
  var thresholds = {
    startScrollingFrom,
    maxScrollValueAt
  };
  return thresholds;
};
var getPercentage = function(_ref) {
  var startOfRange = _ref.startOfRange, endOfRange = _ref.endOfRange, current = _ref.current;
  var range = endOfRange - startOfRange;
  if (range === 0) {
    true ? warning4("\n      Detected distance range of 0 in the fluid auto scroller\n      This is unexpected and would cause a divide by 0 issue.\n      Not allowing an auto scroll\n    ") : void 0;
    return 0;
  }
  var currentInRange = current - startOfRange;
  var percentage = currentInRange / range;
  return percentage;
};
var minScroll = 1;
var getValueFromDistance = function(distanceToEdge, thresholds) {
  if (distanceToEdge > thresholds.startScrollingFrom) {
    return 0;
  }
  if (distanceToEdge <= thresholds.maxScrollValueAt) {
    return config.maxPixelScroll;
  }
  if (distanceToEdge === thresholds.startScrollingFrom) {
    return minScroll;
  }
  var percentageFromMaxScrollValueAt = getPercentage({
    startOfRange: thresholds.maxScrollValueAt,
    endOfRange: thresholds.startScrollingFrom,
    current: distanceToEdge
  });
  var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;
  var scroll3 = config.maxPixelScroll * config.ease(percentageFromStartScrollingFrom);
  return Math.ceil(scroll3);
};
var accelerateAt = config.durationDampening.accelerateAt;
var stopAt = config.durationDampening.stopDampeningAt;
var dampenValueByTime = function(proposedScroll, dragStartTime) {
  var startOfRange = dragStartTime;
  var endOfRange = stopAt;
  var now = Date.now();
  var runTime = now - startOfRange;
  if (runTime >= stopAt) {
    return proposedScroll;
  }
  if (runTime < accelerateAt) {
    return minScroll;
  }
  var betweenAccelerateAtAndStopAtPercentage = getPercentage({
    startOfRange: accelerateAt,
    endOfRange,
    current: runTime
  });
  var scroll3 = proposedScroll * config.ease(betweenAccelerateAtAndStopAtPercentage);
  return Math.ceil(scroll3);
};
var getValue = function(_ref) {
  var distanceToEdge = _ref.distanceToEdge, thresholds = _ref.thresholds, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getValueFromDistance(distanceToEdge, thresholds);
  if (scroll3 === 0) {
    return 0;
  }
  if (!shouldUseTimeDampening) {
    return scroll3;
  }
  return Math.max(dampenValueByTime(scroll3, dragStartTime), minScroll);
};
var getScrollOnAxis = function(_ref) {
  var container = _ref.container, distanceToEdges = _ref.distanceToEdges, dragStartTime = _ref.dragStartTime, axis = _ref.axis, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var thresholds = getDistanceThresholds(container, axis);
  var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];
  if (isCloserToEnd) {
    return getValue({
      distanceToEdge: distanceToEdges[axis.end],
      thresholds,
      dragStartTime,
      shouldUseTimeDampening
    });
  }
  return -1 * getValue({
    distanceToEdge: distanceToEdges[axis.start],
    thresholds,
    dragStartTime,
    shouldUseTimeDampening
  });
};
var adjustForSizeLimits = function(_ref) {
  var container = _ref.container, subject = _ref.subject, proposedScroll = _ref.proposedScroll;
  var isTooBigVertically = subject.height > container.height;
  var isTooBigHorizontally = subject.width > container.width;
  if (!isTooBigHorizontally && !isTooBigVertically) {
    return proposedScroll;
  }
  if (isTooBigHorizontally && isTooBigVertically) {
    return null;
  }
  return {
    x: isTooBigHorizontally ? 0 : proposedScroll.x,
    y: isTooBigVertically ? 0 : proposedScroll.y
  };
};
var clean$2 = apply(function(value) {
  return value === 0 ? 0 : value;
});
var getScroll = function(_ref) {
  var dragStartTime = _ref.dragStartTime, container = _ref.container, subject = _ref.subject, center = _ref.center, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var distanceToEdges = {
    top: center.y - container.top,
    right: container.right - center.x,
    bottom: container.bottom - center.y,
    left: center.x - container.left
  };
  var y3 = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: vertical,
    shouldUseTimeDampening
  });
  var x2 = getScrollOnAxis({
    container,
    distanceToEdges,
    dragStartTime,
    axis: horizontal,
    shouldUseTimeDampening
  });
  var required2 = clean$2({
    x: x2,
    y: y3
  });
  if (isEqual4(required2, origin)) {
    return null;
  }
  var limited = adjustForSizeLimits({
    container,
    subject,
    proposedScroll: required2
  });
  if (!limited) {
    return null;
  }
  return isEqual4(limited, origin) ? null : limited;
};
var smallestSigned = apply(function(value) {
  if (value === 0) {
    return 0;
  }
  return value > 0 ? 1 : -1;
});
var getOverlap = function() {
  var getRemainder = function getRemainder2(target, max2) {
    if (target < 0) {
      return target;
    }
    if (target > max2) {
      return target - max2;
    }
    return 0;
  };
  return function(_ref) {
    var current = _ref.current, max2 = _ref.max, change = _ref.change;
    var targetScroll = add(current, change);
    var overlap = {
      x: getRemainder(targetScroll.x, max2.x),
      y: getRemainder(targetScroll.y, max2.y)
    };
    if (isEqual4(overlap, origin)) {
      return null;
    }
    return overlap;
  };
}();
var canPartiallyScroll = function canPartiallyScroll2(_ref2) {
  var rawMax = _ref2.max, current = _ref2.current, change = _ref2.change;
  var max2 = {
    x: Math.max(current.x, rawMax.x),
    y: Math.max(current.y, rawMax.y)
  };
  var smallestChange = smallestSigned(change);
  var overlap = getOverlap({
    max: max2,
    current,
    change: smallestChange
  });
  if (!overlap) {
    return true;
  }
  if (smallestChange.x !== 0 && overlap.x === 0) {
    return true;
  }
  if (smallestChange.y !== 0 && overlap.y === 0) {
    return true;
  }
  return false;
};
var canScrollWindow = function canScrollWindow2(viewport, change) {
  return canPartiallyScroll({
    current: viewport.scroll.current,
    max: viewport.scroll.max,
    change
  });
};
var getWindowOverlap = function getWindowOverlap2(viewport, change) {
  if (!canScrollWindow(viewport, change)) {
    return null;
  }
  var max2 = viewport.scroll.max;
  var current = viewport.scroll.current;
  return getOverlap({
    current,
    max: max2,
    change
  });
};
var canScrollDroppable = function canScrollDroppable2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return false;
  }
  return canPartiallyScroll({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getDroppableOverlap = function getDroppableOverlap2(droppable2, change) {
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  if (!canScrollDroppable(droppable2, change)) {
    return null;
  }
  return getOverlap({
    current: frame.scroll.current,
    max: frame.scroll.max,
    change
  });
};
var getWindowScrollChange = function(_ref) {
  var viewport = _ref.viewport, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var scroll3 = getScroll({
    dragStartTime,
    container: viewport.frame,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollWindow(viewport, scroll3) ? scroll3 : null;
};
var getDroppableScrollChange = function(_ref) {
  var droppable2 = _ref.droppable, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;
  var frame = droppable2.frame;
  if (!frame) {
    return null;
  }
  var scroll3 = getScroll({
    dragStartTime,
    container: frame.pageMarginBox,
    subject,
    center,
    shouldUseTimeDampening
  });
  return scroll3 && canScrollDroppable(droppable2, scroll3) ? scroll3 : null;
};
var scroll$1 = function(_ref) {
  var state = _ref.state, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening, scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var center = state.current.page.borderBoxCenter;
  var draggable2 = state.dimensions.draggables[state.critical.draggable.id];
  var subject = draggable2.page.marginBox;
  if (state.isWindowScrollAllowed) {
    var viewport = state.viewport;
    var _change = getWindowScrollChange({
      dragStartTime,
      viewport,
      subject,
      center,
      shouldUseTimeDampening
    });
    if (_change) {
      scrollWindow2(_change);
      return;
    }
  }
  var droppable2 = getBestScrollableDroppable({
    center,
    destination: whatIsDraggedOver(state.impact),
    droppables: state.dimensions.droppables
  });
  if (!droppable2) {
    return;
  }
  var change = getDroppableScrollChange({
    dragStartTime,
    droppable: droppable2,
    subject,
    center,
    shouldUseTimeDampening
  });
  if (change) {
    scrollDroppable2(droppable2.descriptor.id, change);
  }
};
var createFluidScroller = function(_ref) {
  var scrollWindow2 = _ref.scrollWindow, scrollDroppable2 = _ref.scrollDroppable;
  var scheduleWindowScroll = raf_schd_esm_default(scrollWindow2);
  var scheduleDroppableScroll = raf_schd_esm_default(scrollDroppable2);
  var dragging = null;
  var tryScroll = function tryScroll2(state) {
    !dragging ? true ? invariant2(false, "Cannot fluid scroll if not dragging") : invariant2(false) : void 0;
    var _dragging = dragging, shouldUseTimeDampening = _dragging.shouldUseTimeDampening, dragStartTime = _dragging.dragStartTime;
    scroll$1({
      state,
      scrollWindow: scheduleWindowScroll,
      scrollDroppable: scheduleDroppableScroll,
      dragStartTime,
      shouldUseTimeDampening
    });
  };
  var start$1 = function start$12(state) {
    start();
    !!dragging ? true ? invariant2(false, "Cannot start auto scrolling when already started") : invariant2(false) : void 0;
    var dragStartTime = Date.now();
    var wasScrollNeeded = false;
    var fakeScrollCallback = function fakeScrollCallback2() {
      wasScrollNeeded = true;
    };
    scroll$1({
      state,
      dragStartTime: 0,
      shouldUseTimeDampening: false,
      scrollWindow: fakeScrollCallback,
      scrollDroppable: fakeScrollCallback
    });
    dragging = {
      dragStartTime,
      shouldUseTimeDampening: wasScrollNeeded
    };
    finish();
    if (wasScrollNeeded) {
      tryScroll(state);
    }
  };
  var stop = function stop2() {
    if (!dragging) {
      return;
    }
    scheduleWindowScroll.cancel();
    scheduleDroppableScroll.cancel();
    dragging = null;
  };
  return {
    start: start$1,
    stop,
    scroll: tryScroll
  };
};
var createJumpScroller = function(_ref) {
  var move3 = _ref.move, scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow;
  var moveByOffset = function moveByOffset2(state, offset3) {
    var client = add(state.current.client.selection, offset3);
    move3({
      client
    });
  };
  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan2(droppable2, change) {
    if (!canScrollDroppable(droppable2, change)) {
      return change;
    }
    var overlap = getDroppableOverlap(droppable2, change);
    if (!overlap) {
      scrollDroppable2(droppable2.descriptor.id, change);
      return null;
    }
    var whatTheDroppableCanScroll = subtract(change, overlap);
    scrollDroppable2(droppable2.descriptor.id, whatTheDroppableCanScroll);
    var remainder = subtract(change, whatTheDroppableCanScroll);
    return remainder;
  };
  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan2(isWindowScrollAllowed, viewport, change) {
    if (!isWindowScrollAllowed) {
      return change;
    }
    if (!canScrollWindow(viewport, change)) {
      return change;
    }
    var overlap = getWindowOverlap(viewport, change);
    if (!overlap) {
      scrollWindow2(change);
      return null;
    }
    var whatTheWindowCanScroll = subtract(change, overlap);
    scrollWindow2(whatTheWindowCanScroll);
    var remainder = subtract(change, whatTheWindowCanScroll);
    return remainder;
  };
  var jumpScroller = function jumpScroller2(state) {
    var request = state.scrollJumpRequest;
    if (!request) {
      return;
    }
    var destination = whatIsDraggedOver(state.impact);
    !destination ? true ? invariant2(false, "Cannot perform a jump scroll when there is no destination") : invariant2(false) : void 0;
    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);
    if (!droppableRemainder) {
      return;
    }
    var viewport = state.viewport;
    var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);
    if (!windowRemainder) {
      return;
    }
    moveByOffset(state, windowRemainder);
  };
  return jumpScroller;
};
var createAutoScroller = function(_ref) {
  var scrollDroppable2 = _ref.scrollDroppable, scrollWindow2 = _ref.scrollWindow, move3 = _ref.move;
  var fluidScroller = createFluidScroller({
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var jumpScroll = createJumpScroller({
    move: move3,
    scrollWindow: scrollWindow2,
    scrollDroppable: scrollDroppable2
  });
  var scroll3 = function scroll4(state) {
    if (state.phase !== "DRAGGING") {
      return;
    }
    if (state.movementMode === "FLUID") {
      fluidScroller.scroll(state);
      return;
    }
    if (!state.scrollJumpRequest) {
      return;
    }
    jumpScroll(state);
  };
  var scroller = {
    scroll: scroll3,
    start: fluidScroller.start,
    stop: fluidScroller.stop
  };
  return scroller;
};
var prefix$1 = "data-rbd";
var dragHandle = function() {
  var base = prefix$1 + "-drag-handle";
  return {
    base,
    draggableId: base + "-draggable-id",
    contextId: base + "-context-id"
  };
}();
var draggable = function() {
  var base = prefix$1 + "-draggable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var droppable = function() {
  var base = prefix$1 + "-droppable";
  return {
    base,
    contextId: base + "-context-id",
    id: base + "-id"
  };
}();
var scrollContainer = {
  contextId: prefix$1 + "-scroll-container-context-id"
};
var makeGetSelector = function makeGetSelector2(context) {
  return function(attribute) {
    return "[" + attribute + '="' + context + '"]';
  };
};
var getStyles = function getStyles2(rules, property) {
  return rules.map(function(rule) {
    var value = rule.styles[property];
    if (!value) {
      return "";
    }
    return rule.selector + " { " + value + " }";
  }).join(" ");
};
var noPointerEvents = "pointer-events: none;";
var getStyles$1 = function(contextId) {
  var getSelector2 = makeGetSelector(contextId);
  var dragHandle$1 = function() {
    var grabCursor = "\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";
    return {
      selector: getSelector2(dragHandle.contextId),
      styles: {
        always: "\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",
        resting: grabCursor,
        dragging: noPointerEvents,
        dropAnimating: grabCursor
      }
    };
  }();
  var draggable$1 = function() {
    var transition = "\n      transition: " + transitions.outOfTheWay + ";\n    ";
    return {
      selector: getSelector2(draggable.contextId),
      styles: {
        dragging: transition,
        dropAnimating: transition,
        userCancel: transition
      }
    };
  }();
  var droppable$1 = {
    selector: getSelector2(droppable.contextId),
    styles: {
      always: "overflow-anchor: none;"
    }
  };
  var body = {
    selector: "body",
    styles: {
      dragging: "\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "
    }
  };
  var rules = [draggable$1, dragHandle$1, droppable$1, body];
  return {
    always: getStyles(rules, "always"),
    resting: getStyles(rules, "resting"),
    dragging: getStyles(rules, "dragging"),
    dropAnimating: getStyles(rules, "dropAnimating"),
    userCancel: getStyles(rules, "userCancel")
  };
};
var useIsomorphicLayoutEffect5 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react128.useLayoutEffect : import_react128.useEffect;
var getHead = function getHead2() {
  var head = document.querySelector("head");
  !head ? true ? invariant2(false, "Cannot find the head to append a style to") : invariant2(false) : void 0;
  return head;
};
var createStyleEl = function createStyleEl2(nonce) {
  var el = document.createElement("style");
  if (nonce) {
    el.setAttribute("nonce", nonce);
  }
  el.type = "text/css";
  return el;
};
function useStyleMarshal(contextId, nonce) {
  var styles = useMemo29(function() {
    return getStyles$1(contextId);
  }, [contextId]);
  var alwaysRef = (0, import_react128.useRef)(null);
  var dynamicRef = (0, import_react128.useRef)(null);
  var setDynamicStyle = useCallback15(memoize_one_esm_default(function(proposed) {
    var el = dynamicRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }), []);
  var setAlwaysStyle = useCallback15(function(proposed) {
    var el = alwaysRef.current;
    !el ? true ? invariant2(false, "Cannot set dynamic style element if it is not set") : invariant2(false) : void 0;
    el.textContent = proposed;
  }, []);
  useIsomorphicLayoutEffect5(function() {
    !(!alwaysRef.current && !dynamicRef.current) ? true ? invariant2(false, "style elements already mounted") : invariant2(false) : void 0;
    var always = createStyleEl(nonce);
    var dynamic = createStyleEl(nonce);
    alwaysRef.current = always;
    dynamicRef.current = dynamic;
    always.setAttribute(prefix$1 + "-always", contextId);
    dynamic.setAttribute(prefix$1 + "-dynamic", contextId);
    getHead().appendChild(always);
    getHead().appendChild(dynamic);
    setAlwaysStyle(styles.always);
    setDynamicStyle(styles.resting);
    return function() {
      var remove = function remove2(ref2) {
        var current = ref2.current;
        !current ? true ? invariant2(false, "Cannot unmount ref as it is not set") : invariant2(false) : void 0;
        getHead().removeChild(current);
        ref2.current = null;
      };
      remove(alwaysRef);
      remove(dynamicRef);
    };
  }, [nonce, setAlwaysStyle, setDynamicStyle, styles.always, styles.resting, contextId]);
  var dragging = useCallback15(function() {
    return setDynamicStyle(styles.dragging);
  }, [setDynamicStyle, styles.dragging]);
  var dropping = useCallback15(function(reason) {
    if (reason === "DROP") {
      setDynamicStyle(styles.dropAnimating);
      return;
    }
    setDynamicStyle(styles.userCancel);
  }, [setDynamicStyle, styles.dropAnimating, styles.userCancel]);
  var resting = useCallback15(function() {
    if (!dynamicRef.current) {
      return;
    }
    setDynamicStyle(styles.resting);
  }, [setDynamicStyle, styles.resting]);
  var marshal = useMemo29(function() {
    return {
      dragging,
      dropping,
      resting
    };
  }, [dragging, dropping, resting]);
  return marshal;
}
var getWindowFromEl = function(el) {
  return el && el.ownerDocument ? el.ownerDocument.defaultView : window;
};
function isHtmlElement(el) {
  return el instanceof getWindowFromEl(el).HTMLElement;
}
function findDragHandle(contextId, draggableId) {
  var selector = "[" + dragHandle.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  if (!possible.length) {
    true ? warning4('Unable to find any drag handles in the context "' + contextId + '"') : void 0;
    return null;
  }
  var handle = find(possible, function(el) {
    return el.getAttribute(dragHandle.draggableId) === draggableId;
  });
  if (!handle) {
    true ? warning4('Unable to find drag handle with id "' + draggableId + '" as no handle with a matching id was found') : void 0;
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning4("drag handle needs to be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function useFocusMarshal(contextId) {
  var entriesRef = (0, import_react128.useRef)({});
  var recordRef = (0, import_react128.useRef)(null);
  var restoreFocusFrameRef = (0, import_react128.useRef)(null);
  var isMountedRef = (0, import_react128.useRef)(false);
  var register = useCallback15(function register2(id, focus2) {
    var entry = {
      id,
      focus: focus2
    };
    entriesRef.current[id] = entry;
    return function unregister() {
      var entries = entriesRef.current;
      var current = entries[id];
      if (current !== entry) {
        delete entries[id];
      }
    };
  }, []);
  var tryGiveFocus = useCallback15(function tryGiveFocus2(tryGiveFocusTo) {
    var handle = findDragHandle(contextId, tryGiveFocusTo);
    if (handle && handle !== document.activeElement) {
      handle.focus();
    }
  }, [contextId]);
  var tryShiftRecord = useCallback15(function tryShiftRecord2(previous, redirectTo) {
    if (recordRef.current === previous) {
      recordRef.current = redirectTo;
    }
  }, []);
  var tryRestoreFocusRecorded = useCallback15(function tryRestoreFocusRecorded2() {
    if (restoreFocusFrameRef.current) {
      return;
    }
    if (!isMountedRef.current) {
      return;
    }
    restoreFocusFrameRef.current = requestAnimationFrame(function() {
      restoreFocusFrameRef.current = null;
      var record = recordRef.current;
      if (record) {
        tryGiveFocus(record);
      }
    });
  }, [tryGiveFocus]);
  var tryRecordFocus = useCallback15(function tryRecordFocus2(id) {
    recordRef.current = null;
    var focused = document.activeElement;
    if (!focused) {
      return;
    }
    if (focused.getAttribute(dragHandle.draggableId) !== id) {
      return;
    }
    recordRef.current = id;
  }, []);
  useIsomorphicLayoutEffect5(function() {
    isMountedRef.current = true;
    return function clearFrameOnUnmount() {
      isMountedRef.current = false;
      var frameId = restoreFocusFrameRef.current;
      if (frameId) {
        cancelAnimationFrame(frameId);
      }
    };
  }, []);
  var marshal = useMemo29(function() {
    return {
      register,
      tryRecordFocus,
      tryRestoreFocusRecorded,
      tryShiftRecord
    };
  }, [register, tryRecordFocus, tryRestoreFocusRecorded, tryShiftRecord]);
  return marshal;
}
function createRegistry() {
  var entries = {
    draggables: {},
    droppables: {}
  };
  var subscribers = [];
  function subscribe(cb) {
    subscribers.push(cb);
    return function unsubscribe() {
      var index = subscribers.indexOf(cb);
      if (index === -1) {
        return;
      }
      subscribers.splice(index, 1);
    };
  }
  function notify2(event) {
    if (subscribers.length) {
      subscribers.forEach(function(cb) {
        return cb(event);
      });
    }
  }
  function findDraggableById(id) {
    return entries.draggables[id] || null;
  }
  function getDraggableById(id) {
    var entry = findDraggableById(id);
    !entry ? true ? invariant2(false, "Cannot find draggable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var draggableAPI = {
    register: function register(entry) {
      entries.draggables[entry.descriptor.id] = entry;
      notify2({
        type: "ADDITION",
        value: entry
      });
    },
    update: function update2(entry, last) {
      var current = entries.draggables[last.descriptor.id];
      if (!current) {
        return;
      }
      if (current.uniqueId !== entry.uniqueId) {
        return;
      }
      delete entries.draggables[last.descriptor.id];
      entries.draggables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var draggableId = entry.descriptor.id;
      var current = findDraggableById(draggableId);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.draggables[draggableId];
      notify2({
        type: "REMOVAL",
        value: entry
      });
    },
    getById: getDraggableById,
    findById: findDraggableById,
    exists: function exists(id) {
      return Boolean(findDraggableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values(entries.draggables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function findDroppableById(id) {
    return entries.droppables[id] || null;
  }
  function getDroppableById(id) {
    var entry = findDroppableById(id);
    !entry ? true ? invariant2(false, "Cannot find droppable entry with id [" + id + "]") : invariant2(false) : void 0;
    return entry;
  }
  var droppableAPI = {
    register: function register(entry) {
      entries.droppables[entry.descriptor.id] = entry;
    },
    unregister: function unregister(entry) {
      var current = findDroppableById(entry.descriptor.id);
      if (!current) {
        return;
      }
      if (entry.uniqueId !== current.uniqueId) {
        return;
      }
      delete entries.droppables[entry.descriptor.id];
    },
    getById: getDroppableById,
    findById: findDroppableById,
    exists: function exists(id) {
      return Boolean(findDroppableById(id));
    },
    getAllByType: function getAllByType(type) {
      return values(entries.droppables).filter(function(entry) {
        return entry.descriptor.type === type;
      });
    }
  };
  function clean4() {
    entries.draggables = {};
    entries.droppables = {};
    subscribers.length = 0;
  }
  return {
    draggable: draggableAPI,
    droppable: droppableAPI,
    subscribe,
    clean: clean4
  };
}
function useRegistry() {
  var registry = useMemo29(createRegistry, []);
  (0, import_react128.useEffect)(function() {
    return function unmount() {
      requestAnimationFrame(registry.clean);
    };
  }, [registry]);
  return registry;
}
var StoreContext = import_react128.default.createContext(null);
var getBodyElement = function() {
  var body = document.body;
  !body ? true ? invariant2(false, "Cannot find document.body") : invariant2(false) : void 0;
  return body;
};
var visuallyHidden = {
  position: "absolute",
  width: "1px",
  height: "1px",
  margin: "-1px",
  border: "0",
  padding: "0",
  overflow: "hidden",
  clip: "rect(0 0 0 0)",
  "clip-path": "inset(100%)"
};
var getId = function getId2(contextId) {
  return "rbd-announcement-" + contextId;
};
function useAnnouncer(contextId) {
  var id = useMemo29(function() {
    return getId(contextId);
  }, [contextId]);
  var ref2 = (0, import_react128.useRef)(null);
  (0, import_react128.useEffect)(function setup() {
    var el = document.createElement("div");
    ref2.current = el;
    el.id = id;
    el.setAttribute("aria-live", "assertive");
    el.setAttribute("aria-atomic", "true");
    _extends(el.style, visuallyHidden);
    getBodyElement().appendChild(el);
    return function cleanup() {
      setTimeout(function remove() {
        var body = getBodyElement();
        if (body.contains(el)) {
          body.removeChild(el);
        }
        if (el === ref2.current) {
          ref2.current = null;
        }
      });
    };
  }, [id]);
  var announce = useCallback15(function(message) {
    var el = ref2.current;
    if (el) {
      el.textContent = message;
      return;
    }
    true ? warning4('\n      A screen reader message was trying to be announced but it was unable to do so.\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\n      Consider calling provided.announce() before the unmount so that the instruction will\n      not be lost for users relying on a screen reader.\n\n      Message not passed to screen reader:\n\n      "' + message + '"\n    ') : void 0;
  }, []);
  return announce;
}
var count = 0;
var defaults = {
  separator: "::"
};
function useUniqueId(prefix3, options) {
  if (options === void 0) {
    options = defaults;
  }
  return useMemo29(function() {
    return "" + prefix3 + options.separator + count++;
  }, [options.separator, prefix3]);
}
function getElementId(_ref) {
  var contextId = _ref.contextId, uniqueId = _ref.uniqueId;
  return "rbd-hidden-text-" + contextId + "-" + uniqueId;
}
function useHiddenTextElement(_ref2) {
  var contextId = _ref2.contextId, text = _ref2.text;
  var uniqueId = useUniqueId("hidden-text", {
    separator: "-"
  });
  var id = useMemo29(function() {
    return getElementId({
      contextId,
      uniqueId
    });
  }, [uniqueId, contextId]);
  (0, import_react128.useEffect)(function mount() {
    var el = document.createElement("div");
    el.id = id;
    el.textContent = text;
    el.style.display = "none";
    getBodyElement().appendChild(el);
    return function unmount() {
      var body = getBodyElement();
      if (body.contains(el)) {
        body.removeChild(el);
      }
    };
  }, [id, text]);
  return id;
}
var AppContext = import_react128.default.createContext(null);
var peerDependencies = {
  react: "^16.8.5 || ^17.0.0 || ^18.0.0",
  "react-dom": "^16.8.5 || ^17.0.0 || ^18.0.0"
};
var semver = /(\d+)\.(\d+)\.(\d+)/;
var getVersion = function getVersion2(value) {
  var result = semver.exec(value);
  !(result != null) ? true ? invariant2(false, "Unable to parse React version " + value) : invariant2(false) : void 0;
  var major = Number(result[1]);
  var minor = Number(result[2]);
  var patch3 = Number(result[3]);
  return {
    major,
    minor,
    patch: patch3,
    raw: value
  };
};
var isSatisfied = function isSatisfied2(expected, actual) {
  if (actual.major > expected.major) {
    return true;
  }
  if (actual.major < expected.major) {
    return false;
  }
  if (actual.minor > expected.minor) {
    return true;
  }
  if (actual.minor < expected.minor) {
    return false;
  }
  return actual.patch >= expected.patch;
};
var checkReactVersion = function(peerDepValue, actualValue) {
  var peerDep = getVersion(peerDepValue);
  var actual = getVersion(actualValue);
  if (isSatisfied(peerDep, actual)) {
    return;
  }
  true ? warning4("\n    React version: [" + actual.raw + "]\n    does not satisfy expected peer dependency version: [" + peerDep.raw + "]\n\n    This can result in run time bugs, and even fatal crashes\n  ") : void 0;
};
var suffix = "\n  We expect a html5 doctype: <!doctype html>\n  This is to ensure consistent browser layout and measurement\n\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\n";
var checkDoctype = function(doc) {
  var doctype = doc.doctype;
  if (!doctype) {
    true ? warning4("\n      No <!doctype html> found.\n\n      " + suffix + "\n    ") : void 0;
    return;
  }
  if (doctype.name.toLowerCase() !== "html") {
    true ? warning4("\n      Unexpected <!doctype> found: (" + doctype.name + ")\n\n      " + suffix + "\n    ") : void 0;
  }
  if (doctype.publicId !== "") {
    true ? warning4("\n      Unexpected <!doctype> publicId found: (" + doctype.publicId + ")\n      A html5 doctype does not have a publicId\n\n      " + suffix + "\n    ") : void 0;
  }
};
function useDev(useHook) {
  if (true) {
    useHook();
  }
}
function useDevSetupWarning(fn, inputs) {
  useDev(function() {
    (0, import_react128.useEffect)(function() {
      try {
        fn();
      } catch (e4) {
        error("\n          A setup problem was encountered.\n\n          > " + e4.message + "\n        ");
      }
    }, inputs);
  });
}
function useStartupValidation() {
  useDevSetupWarning(function() {
    checkReactVersion(peerDependencies.react, import_react128.default.version);
    checkDoctype(document);
  }, []);
}
function usePrevious(current) {
  var ref2 = (0, import_react128.useRef)(current);
  (0, import_react128.useEffect)(function() {
    ref2.current = current;
  });
  return ref2;
}
function create() {
  var lock = null;
  function isClaimed() {
    return Boolean(lock);
  }
  function isActive(value) {
    return value === lock;
  }
  function claim(abandon) {
    !!lock ? true ? invariant2(false, "Cannot claim lock as it is already claimed") : invariant2(false) : void 0;
    var newLock = {
      abandon
    };
    lock = newLock;
    return newLock;
  }
  function release() {
    !lock ? true ? invariant2(false, "Cannot release lock when there is no lock") : invariant2(false) : void 0;
    lock = null;
  }
  function tryAbandon() {
    if (lock) {
      lock.abandon();
      release();
    }
  }
  return {
    isClaimed,
    isActive,
    claim,
    release,
    tryAbandon
  };
}
var tab = 9;
var enter = 13;
var escape = 27;
var space = 32;
var pageUp = 33;
var pageDown = 34;
var end = 35;
var home = 36;
var arrowLeft = 37;
var arrowUp = 38;
var arrowRight = 39;
var arrowDown = 40;
var _preventedKeys;
var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
var preventStandardKeyEvents = function(event) {
  if (preventedKeys[event.keyCode]) {
    event.preventDefault();
  }
};
var supportedEventName = function() {
  var base = "visibilitychange";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
  var supported = find(candidates, function(eventName) {
    return "on" + eventName in document;
  });
  return supported || base;
}();
var primaryButton = 0;
var sloppyClickThreshold = 5;
function isSloppyClickThresholdExceeded(original, current) {
  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
}
var idle$1 = {
  type: "IDLE"
};
function getCaptureBindings(_ref) {
  var cancel = _ref.cancel, completed = _ref.completed, getPhase = _ref.getPhase, setPhase = _ref.setPhase;
  return [{
    eventName: "mousemove",
    fn: function fn(event) {
      var button = event.button, clientX = event.clientX, clientY = event.clientY;
      if (button !== primaryButton) {
        return;
      }
      var point = {
        x: clientX,
        y: clientY
      };
      var phase = getPhase();
      if (phase.type === "DRAGGING") {
        event.preventDefault();
        phase.actions.move(point);
        return;
      }
      !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot be IDLE") : invariant2(false) : void 0;
      var pending = phase.point;
      if (!isSloppyClickThresholdExceeded(pending, point)) {
        return;
      }
      event.preventDefault();
      var actions = phase.actions.fluidLift(point);
      setPhase({
        type: "DRAGGING",
        actions
      });
    }
  }, {
    eventName: "mouseup",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "mousedown",
    fn: function fn(event) {
      if (getPhase().type === "DRAGGING") {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: "keydown",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type === "PENDING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "scroll",
    options: {
      passive: true,
      capture: false
    },
    fn: function fn() {
      if (getPhase().type === "PENDING") {
        cancel();
      }
    }
  }, {
    eventName: "webkitmouseforcedown",
    fn: function fn(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false, "Unexpected phase") : invariant2(false) : void 0;
      if (phase.actions.shouldRespectForcePress()) {
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useMouseSensor(api) {
  var phaseRef = (0, import_react128.useRef)(idle$1);
  var unbindEventsRef = (0, import_react128.useRef)(noop2);
  var startCaptureBinding = useMemo29(function() {
    return {
      eventName: "mousedown",
      fn: function onMouseDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== primaryButton) {
          return;
        }
        if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        event.preventDefault();
        var point = {
          x: event.clientX,
          y: event.clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var preventForcePressBinding = useMemo29(function() {
    return {
      eventName: "webkitmouseforcewillbegin",
      fn: function fn(event) {
        if (event.defaultPrevented) {
          return;
        }
        var id = api.findClosestDraggableId(event);
        if (!id) {
          return;
        }
        var options = api.findOptionsForDraggable(id);
        if (!options) {
          return;
        }
        if (options.shouldRespectForcePress) {
          return;
        }
        if (!api.canGetLock(id)) {
          return;
        }
        event.preventDefault();
      }
    };
  }, [api]);
  var listenForCapture = useCallback15(function listenForCapture2() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [preventForcePressBinding, startCaptureBinding], options);
  }, [preventForcePressBinding, startCaptureBinding]);
  var stop = useCallback15(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    phaseRef.current = idle$1;
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture]);
  var cancel = useCallback15(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback15(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var bindings = getCaptureBindings({
      cancel,
      completed: stop,
      getPhase: function getPhase() {
        return phaseRef.current;
      },
      setPhase: function setPhase(phase) {
        phaseRef.current = phase;
      }
    });
    unbindEventsRef.current = bindEvents(window, bindings, options);
  }, [cancel, stop]);
  var startPendingDrag = useCallback15(function startPendingDrag2(actions, point) {
    !(phaseRef.current.type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    phaseRef.current = {
      type: "PENDING",
      point,
      actions
    };
    bindCapturingEvents();
  }, [bindCapturingEvents]);
  useIsomorphicLayoutEffect5(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var _scrollJumpKeys;
function noop$1() {
}
var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);
function getDraggingBindings(actions, stop) {
  function cancel() {
    stop();
    actions.cancel();
  }
  function drop5() {
    stop();
    actions.drop();
  }
  return [{
    eventName: "keydown",
    fn: function fn(event) {
      if (event.keyCode === escape) {
        event.preventDefault();
        cancel();
        return;
      }
      if (event.keyCode === space) {
        event.preventDefault();
        drop5();
        return;
      }
      if (event.keyCode === arrowDown) {
        event.preventDefault();
        actions.moveDown();
        return;
      }
      if (event.keyCode === arrowUp) {
        event.preventDefault();
        actions.moveUp();
        return;
      }
      if (event.keyCode === arrowRight) {
        event.preventDefault();
        actions.moveRight();
        return;
      }
      if (event.keyCode === arrowLeft) {
        event.preventDefault();
        actions.moveLeft();
        return;
      }
      if (scrollJumpKeys[event.keyCode]) {
        event.preventDefault();
        return;
      }
      preventStandardKeyEvents(event);
    }
  }, {
    eventName: "mousedown",
    fn: cancel
  }, {
    eventName: "mouseup",
    fn: cancel
  }, {
    eventName: "click",
    fn: cancel
  }, {
    eventName: "touchstart",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "wheel",
    fn: cancel,
    options: {
      passive: true
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useKeyboardSensor(api) {
  var unbindEventsRef = (0, import_react128.useRef)(noop$1);
  var startCaptureBinding = useMemo29(function() {
    return {
      eventName: "keydown",
      fn: function onKeyDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.keyCode !== space) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var preDrag = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!preDrag) {
          return;
        }
        event.preventDefault();
        var isCapturing = true;
        var actions = preDrag.snapLift();
        unbindEventsRef.current();
        function stop() {
          !isCapturing ? true ? invariant2(false, "Cannot stop capturing a keyboard drag when not capturing") : invariant2(false) : void 0;
          isCapturing = false;
          unbindEventsRef.current();
          listenForCapture();
        }
        unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {
          capture: true,
          passive: false
        });
      }
    };
  }, [api]);
  var listenForCapture = useCallback15(function tryStartCapture() {
    var options = {
      passive: false,
      capture: true
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  useIsomorphicLayoutEffect5(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
    };
  }, [listenForCapture]);
}
var idle$2 = {
  type: "IDLE"
};
var timeForLongPress = 120;
var forcePressThreshold = 0.15;
function getWindowBindings(_ref) {
  var cancel = _ref.cancel, getPhase = _ref.getPhase;
  return [{
    eventName: "orientationchange",
    fn: cancel
  }, {
    eventName: "resize",
    fn: cancel
  }, {
    eventName: "contextmenu",
    fn: function fn(event) {
      event.preventDefault();
    }
  }, {
    eventName: "keydown",
    fn: function fn(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      if (event.keyCode === escape) {
        event.preventDefault();
      }
      cancel();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function getHandleBindings(_ref2) {
  var cancel = _ref2.cancel, completed = _ref2.completed, getPhase = _ref2.getPhase;
  return [{
    eventName: "touchmove",
    options: {
      capture: false
    },
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      phase.hasMoved = true;
      var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;
      var point = {
        x: clientX,
        y: clientY
      };
      event.preventDefault();
      phase.actions.move(point);
    }
  }, {
    eventName: "touchend",
    fn: function fn(event) {
      var phase = getPhase();
      if (phase.type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      phase.actions.drop({
        shouldBlockNextClick: true
      });
      completed();
    }
  }, {
    eventName: "touchcancel",
    fn: function fn(event) {
      if (getPhase().type !== "DRAGGING") {
        cancel();
        return;
      }
      event.preventDefault();
      cancel();
    }
  }, {
    eventName: "touchforcechange",
    fn: function fn(event) {
      var phase = getPhase();
      !(phase.type !== "IDLE") ? true ? invariant2(false) : invariant2(false) : void 0;
      var touch = event.touches[0];
      if (!touch) {
        return;
      }
      var isForcePress = touch.force >= forcePressThreshold;
      if (!isForcePress) {
        return;
      }
      var shouldRespect = phase.actions.shouldRespectForcePress();
      if (phase.type === "PENDING") {
        if (shouldRespect) {
          cancel();
        }
        return;
      }
      if (shouldRespect) {
        if (phase.hasMoved) {
          event.preventDefault();
          return;
        }
        cancel();
        return;
      }
      event.preventDefault();
    }
  }, {
    eventName: supportedEventName,
    fn: cancel
  }];
}
function useTouchSensor(api) {
  var phaseRef = (0, import_react128.useRef)(idle$2);
  var unbindEventsRef = (0, import_react128.useRef)(noop2);
  var getPhase = useCallback15(function getPhase2() {
    return phaseRef.current;
  }, []);
  var setPhase = useCallback15(function setPhase2(phase) {
    phaseRef.current = phase;
  }, []);
  var startCaptureBinding = useMemo29(function() {
    return {
      eventName: "touchstart",
      fn: function onTouchStart(event) {
        if (event.defaultPrevented) {
          return;
        }
        var draggableId = api.findClosestDraggableId(event);
        if (!draggableId) {
          return;
        }
        var actions = api.tryGetLock(draggableId, stop, {
          sourceEvent: event
        });
        if (!actions) {
          return;
        }
        var touch = event.touches[0];
        var clientX = touch.clientX, clientY = touch.clientY;
        var point = {
          x: clientX,
          y: clientY
        };
        unbindEventsRef.current();
        startPendingDrag(actions, point);
      }
    };
  }, [api]);
  var listenForCapture = useCallback15(function listenForCapture2() {
    var options = {
      capture: true,
      passive: false
    };
    unbindEventsRef.current = bindEvents(window, [startCaptureBinding], options);
  }, [startCaptureBinding]);
  var stop = useCallback15(function() {
    var current = phaseRef.current;
    if (current.type === "IDLE") {
      return;
    }
    if (current.type === "PENDING") {
      clearTimeout(current.longPressTimerId);
    }
    setPhase(idle$2);
    unbindEventsRef.current();
    listenForCapture();
  }, [listenForCapture, setPhase]);
  var cancel = useCallback15(function() {
    var phase = phaseRef.current;
    stop();
    if (phase.type === "DRAGGING") {
      phase.actions.cancel({
        shouldBlockNextClick: true
      });
    }
    if (phase.type === "PENDING") {
      phase.actions.abort();
    }
  }, [stop]);
  var bindCapturingEvents = useCallback15(function bindCapturingEvents2() {
    var options = {
      capture: true,
      passive: false
    };
    var args = {
      cancel,
      completed: stop,
      getPhase
    };
    var unbindTarget = bindEvents(window, getHandleBindings(args), options);
    var unbindWindow = bindEvents(window, getWindowBindings(args), options);
    unbindEventsRef.current = function unbindAll() {
      unbindTarget();
      unbindWindow();
    };
  }, [cancel, getPhase, stop]);
  var startDragging = useCallback15(function startDragging2() {
    var phase = getPhase();
    !(phase.type === "PENDING") ? true ? invariant2(false, "Cannot start dragging from phase " + phase.type) : invariant2(false) : void 0;
    var actions = phase.actions.fluidLift(phase.point);
    setPhase({
      type: "DRAGGING",
      actions,
      hasMoved: false
    });
  }, [getPhase, setPhase]);
  var startPendingDrag = useCallback15(function startPendingDrag2(actions, point) {
    !(getPhase().type === "IDLE") ? true ? invariant2(false, "Expected to move from IDLE to PENDING drag") : invariant2(false) : void 0;
    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
    setPhase({
      type: "PENDING",
      point,
      actions,
      longPressTimerId
    });
    bindCapturingEvents();
  }, [bindCapturingEvents, getPhase, setPhase, startDragging]);
  useIsomorphicLayoutEffect5(function mount() {
    listenForCapture();
    return function unmount() {
      unbindEventsRef.current();
      var phase = getPhase();
      if (phase.type === "PENDING") {
        clearTimeout(phase.longPressTimerId);
        setPhase(idle$2);
      }
    };
  }, [getPhase, listenForCapture, setPhase]);
  useIsomorphicLayoutEffect5(function webkitHack() {
    var unbind = bindEvents(window, [{
      eventName: "touchmove",
      fn: function fn() {
      },
      options: {
        capture: false,
        passive: false
      }
    }]);
    return unbind;
  }, []);
}
function useValidateSensorHooks(sensorHooks) {
  useDev(function() {
    var previousRef = usePrevious(sensorHooks);
    useDevSetupWarning(function() {
      !(previousRef.current.length === sensorHooks.length) ? true ? invariant2(false, "Cannot change the amount of sensor hooks after mounting") : invariant2(false) : void 0;
    });
  });
}
var interactiveTagNames = {
  input: true,
  button: true,
  textarea: true,
  select: true,
  option: true,
  optgroup: true,
  video: true,
  audio: true
};
function isAnInteractiveElement(parent, current) {
  if (current == null) {
    return false;
  }
  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);
  if (hasAnInteractiveTag) {
    return true;
  }
  var attribute = current.getAttribute("contenteditable");
  if (attribute === "true" || attribute === "") {
    return true;
  }
  if (current === parent) {
    return false;
  }
  return isAnInteractiveElement(parent, current.parentElement);
}
function isEventInInteractiveElement(draggable2, event) {
  var target = event.target;
  if (!isHtmlElement(target)) {
    return false;
  }
  return isAnInteractiveElement(draggable2, target);
}
var getBorderBoxCenterPosition = function(el) {
  return getRect(el.getBoundingClientRect()).center;
};
function isElement(el) {
  return el instanceof getWindowFromEl(el).Element;
}
var supportedMatchesName = function() {
  var base = "matches";
  if (typeof document === "undefined") {
    return base;
  }
  var candidates = [base, "msMatchesSelector", "webkitMatchesSelector"];
  var value = find(candidates, function(name) {
    return name in Element.prototype;
  });
  return value || base;
}();
function closestPonyfill(el, selector) {
  if (el == null) {
    return null;
  }
  if (el[supportedMatchesName](selector)) {
    return el;
  }
  return closestPonyfill(el.parentElement, selector);
}
function closest$1(el, selector) {
  if (el.closest) {
    return el.closest(selector);
  }
  return closestPonyfill(el, selector);
}
function getSelector(contextId) {
  return "[" + dragHandle.contextId + '="' + contextId + '"]';
}
function findClosestDragHandleFromEvent(contextId, event) {
  var target = event.target;
  if (!isElement(target)) {
    true ? warning4("event.target must be a Element") : void 0;
    return null;
  }
  var selector = getSelector(contextId);
  var handle = closest$1(target, selector);
  if (!handle) {
    return null;
  }
  if (!isHtmlElement(handle)) {
    true ? warning4("drag handle must be a HTMLElement") : void 0;
    return null;
  }
  return handle;
}
function tryGetClosestDraggableIdFromEvent(contextId, event) {
  var handle = findClosestDragHandleFromEvent(contextId, event);
  if (!handle) {
    return null;
  }
  return handle.getAttribute(dragHandle.draggableId);
}
function findDraggable(contextId, draggableId) {
  var selector = "[" + draggable.contextId + '="' + contextId + '"]';
  var possible = toArray(document.querySelectorAll(selector));
  var draggable$1 = find(possible, function(el) {
    return el.getAttribute(draggable.id) === draggableId;
  });
  if (!draggable$1) {
    return null;
  }
  if (!isHtmlElement(draggable$1)) {
    true ? warning4("Draggable element is not a HTMLElement") : void 0;
    return null;
  }
  return draggable$1;
}
function preventDefault(event) {
  event.preventDefault();
}
function _isActive(_ref) {
  var expected = _ref.expected, phase = _ref.phase, isLockActive = _ref.isLockActive, shouldWarn = _ref.shouldWarn;
  if (!isLockActive()) {
    if (shouldWarn) {
      true ? warning4("\n        Cannot perform action.\n        The sensor no longer has an action lock.\n\n        Tips:\n\n        - Throw away your action handlers when forceStop() is called\n        - Check actions.isActive() if you really need to\n      ") : void 0;
    }
    return false;
  }
  if (expected !== phase) {
    if (shouldWarn) {
      true ? warning4("\n        Cannot perform action.\n        The actions you used belong to an outdated phase\n\n        Current phase: " + expected + "\n        You called an action from outdated phase: " + phase + "\n\n        Tips:\n\n        - Do not use preDragActions actions after calling preDragActions.lift()\n      ") : void 0;
    }
    return false;
  }
  return true;
}
function canStart(_ref2) {
  var lockAPI = _ref2.lockAPI, store = _ref2.store, registry = _ref2.registry, draggableId = _ref2.draggableId;
  if (lockAPI.isClaimed()) {
    return false;
  }
  var entry = registry.draggable.findById(draggableId);
  if (!entry) {
    true ? warning4("Unable to find draggable with id: " + draggableId) : void 0;
    return false;
  }
  if (!entry.options.isEnabled) {
    return false;
  }
  if (!canStartDrag(store.getState(), draggableId)) {
    return false;
  }
  return true;
}
function tryStart(_ref3) {
  var lockAPI = _ref3.lockAPI, contextId = _ref3.contextId, store = _ref3.store, registry = _ref3.registry, draggableId = _ref3.draggableId, forceSensorStop = _ref3.forceSensorStop, sourceEvent = _ref3.sourceEvent;
  var shouldStart = canStart({
    lockAPI,
    store,
    registry,
    draggableId
  });
  if (!shouldStart) {
    return null;
  }
  var entry = registry.draggable.getById(draggableId);
  var el = findDraggable(contextId, entry.descriptor.id);
  if (!el) {
    true ? warning4("Unable to find draggable element with id: " + draggableId) : void 0;
    return null;
  }
  if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {
    return null;
  }
  var lock = lockAPI.claim(forceSensorStop || noop2);
  var phase = "PRE_DRAG";
  function getShouldRespectForcePress() {
    return entry.options.shouldRespectForcePress;
  }
  function isLockActive() {
    return lockAPI.isActive(lock);
  }
  function tryDispatch(expected, getAction) {
    if (_isActive({
      expected,
      phase,
      isLockActive,
      shouldWarn: true
    })) {
      store.dispatch(getAction());
    }
  }
  var tryDispatchWhenDragging = tryDispatch.bind(null, "DRAGGING");
  function lift$12(args) {
    function completed() {
      lockAPI.release();
      phase = "COMPLETED";
    }
    if (phase !== "PRE_DRAG") {
      completed();
      !(phase === "PRE_DRAG") ? true ? invariant2(false, "Cannot lift in phase " + phase) : invariant2(false) : void 0;
    }
    store.dispatch(lift(args.liftActionArgs));
    phase = "DRAGGING";
    function finish3(reason, options) {
      if (options === void 0) {
        options = {
          shouldBlockNextClick: false
        };
      }
      args.cleanup();
      if (options.shouldBlockNextClick) {
        var unbind = bindEvents(window, [{
          eventName: "click",
          fn: preventDefault,
          options: {
            once: true,
            passive: false,
            capture: true
          }
        }]);
        setTimeout(unbind);
      }
      completed();
      store.dispatch(drop({
        reason
      }));
    }
    return _extends({
      isActive: function isActive() {
        return _isActive({
          expected: "DRAGGING",
          phase,
          isLockActive,
          shouldWarn: false
        });
      },
      shouldRespectForcePress: getShouldRespectForcePress,
      drop: function drop5(options) {
        return finish3("DROP", options);
      },
      cancel: function cancel(options) {
        return finish3("CANCEL", options);
      }
    }, args.actions);
  }
  function fluidLift(clientSelection) {
    var move$1 = raf_schd_esm_default(function(client) {
      tryDispatchWhenDragging(function() {
        return move({
          client
        });
      });
    });
    var api = lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection,
        movementMode: "FLUID"
      },
      cleanup: function cleanup() {
        return move$1.cancel();
      },
      actions: {
        move: move$1
      }
    });
    return _extends({}, api, {
      move: move$1
    });
  }
  function snapLift() {
    var actions = {
      moveUp: function moveUp$1() {
        return tryDispatchWhenDragging(moveUp);
      },
      moveRight: function moveRight$1() {
        return tryDispatchWhenDragging(moveRight);
      },
      moveDown: function moveDown$1() {
        return tryDispatchWhenDragging(moveDown);
      },
      moveLeft: function moveLeft$1() {
        return tryDispatchWhenDragging(moveLeft);
      }
    };
    return lift$12({
      liftActionArgs: {
        id: draggableId,
        clientSelection: getBorderBoxCenterPosition(el),
        movementMode: "SNAP"
      },
      cleanup: noop2,
      actions
    });
  }
  function abortPreDrag() {
    var shouldRelease = _isActive({
      expected: "PRE_DRAG",
      phase,
      isLockActive,
      shouldWarn: true
    });
    if (shouldRelease) {
      lockAPI.release();
    }
  }
  var preDrag = {
    isActive: function isActive() {
      return _isActive({
        expected: "PRE_DRAG",
        phase,
        isLockActive,
        shouldWarn: false
      });
    },
    shouldRespectForcePress: getShouldRespectForcePress,
    fluidLift,
    snapLift,
    abort: abortPreDrag
  };
  return preDrag;
}
var defaultSensors = [useMouseSensor, useKeyboardSensor, useTouchSensor];
function useSensorMarshal(_ref4) {
  var contextId = _ref4.contextId, store = _ref4.store, registry = _ref4.registry, customSensors = _ref4.customSensors, enableDefaultSensors = _ref4.enableDefaultSensors;
  var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);
  var lockAPI = (0, import_react128.useState)(function() {
    return create();
  })[0];
  var tryAbandonLock = useCallback15(function tryAbandonLock2(previous, current) {
    if (previous.isDragging && !current.isDragging) {
      lockAPI.tryAbandon();
    }
  }, [lockAPI]);
  useIsomorphicLayoutEffect5(function listenToStore() {
    var previous = store.getState();
    var unsubscribe = store.subscribe(function() {
      var current = store.getState();
      tryAbandonLock(previous, current);
      previous = current;
    });
    return unsubscribe;
  }, [lockAPI, store, tryAbandonLock]);
  useIsomorphicLayoutEffect5(function() {
    return lockAPI.tryAbandon;
  }, [lockAPI.tryAbandon]);
  var canGetLock = useCallback15(function(draggableId) {
    return canStart({
      lockAPI,
      registry,
      store,
      draggableId
    });
  }, [lockAPI, registry, store]);
  var tryGetLock = useCallback15(function(draggableId, forceStop, options) {
    return tryStart({
      lockAPI,
      registry,
      contextId,
      store,
      draggableId,
      forceSensorStop: forceStop,
      sourceEvent: options && options.sourceEvent ? options.sourceEvent : null
    });
  }, [contextId, lockAPI, registry, store]);
  var findClosestDraggableId = useCallback15(function(event) {
    return tryGetClosestDraggableIdFromEvent(contextId, event);
  }, [contextId]);
  var findOptionsForDraggable = useCallback15(function(id) {
    var entry = registry.draggable.findById(id);
    return entry ? entry.options : null;
  }, [registry.draggable]);
  var tryReleaseLock = useCallback15(function tryReleaseLock2() {
    if (!lockAPI.isClaimed()) {
      return;
    }
    lockAPI.tryAbandon();
    if (store.getState().phase !== "IDLE") {
      store.dispatch(flush());
    }
  }, [lockAPI, store]);
  var isLockClaimed = useCallback15(lockAPI.isClaimed, [lockAPI]);
  var api = useMemo29(function() {
    return {
      canGetLock,
      tryGetLock,
      findClosestDraggableId,
      findOptionsForDraggable,
      tryReleaseLock,
      isLockClaimed
    };
  }, [canGetLock, tryGetLock, findClosestDraggableId, findOptionsForDraggable, tryReleaseLock, isLockClaimed]);
  useValidateSensorHooks(useSensors);
  for (var i3 = 0; i3 < useSensors.length; i3++) {
    useSensors[i3](api);
  }
}
var createResponders = function createResponders2(props) {
  return {
    onBeforeCapture: props.onBeforeCapture,
    onBeforeDragStart: props.onBeforeDragStart,
    onDragStart: props.onDragStart,
    onDragEnd: props.onDragEnd,
    onDragUpdate: props.onDragUpdate
  };
};
function getStore(lazyRef) {
  !lazyRef.current ? true ? invariant2(false, "Could not find store from lazy ref") : invariant2(false) : void 0;
  return lazyRef.current;
}
function App(props) {
  var contextId = props.contextId, setCallbacks = props.setCallbacks, sensors = props.sensors, nonce = props.nonce, dragHandleUsageInstructions2 = props.dragHandleUsageInstructions;
  var lazyStoreRef = (0, import_react128.useRef)(null);
  useStartupValidation();
  var lastPropsRef = usePrevious(props);
  var getResponders = useCallback15(function() {
    return createResponders(lastPropsRef.current);
  }, [lastPropsRef]);
  var announce = useAnnouncer(contextId);
  var dragHandleUsageInstructionsId = useHiddenTextElement({
    contextId,
    text: dragHandleUsageInstructions2
  });
  var styleMarshal = useStyleMarshal(contextId, nonce);
  var lazyDispatch = useCallback15(function(action) {
    getStore(lazyStoreRef).dispatch(action);
  }, []);
  var marshalCallbacks = useMemo29(function() {
    return bindActionCreators({
      publishWhileDragging,
      updateDroppableScroll,
      updateDroppableIsEnabled,
      updateDroppableIsCombineEnabled,
      collectionStarting
    }, lazyDispatch);
  }, [lazyDispatch]);
  var registry = useRegistry();
  var dimensionMarshal = useMemo29(function() {
    return createDimensionMarshal(registry, marshalCallbacks);
  }, [registry, marshalCallbacks]);
  var autoScroller = useMemo29(function() {
    return createAutoScroller(_extends({
      scrollWindow,
      scrollDroppable: dimensionMarshal.scrollDroppable
    }, bindActionCreators({
      move
    }, lazyDispatch)));
  }, [dimensionMarshal.scrollDroppable, lazyDispatch]);
  var focusMarshal = useFocusMarshal(contextId);
  var store = useMemo29(function() {
    return createStore2({
      announce,
      autoScroller,
      dimensionMarshal,
      focusMarshal,
      getResponders,
      styleMarshal
    });
  }, [announce, autoScroller, dimensionMarshal, focusMarshal, getResponders, styleMarshal]);
  if (true) {
    if (lazyStoreRef.current && lazyStoreRef.current !== store) {
      true ? warning4("unexpected store change") : void 0;
    }
  }
  lazyStoreRef.current = store;
  var tryResetStore = useCallback15(function() {
    var current = getStore(lazyStoreRef);
    var state = current.getState();
    if (state.phase !== "IDLE") {
      current.dispatch(flush());
    }
  }, []);
  var isDragging = useCallback15(function() {
    var state = getStore(lazyStoreRef).getState();
    return state.isDragging || state.phase === "DROP_ANIMATING";
  }, []);
  var appCallbacks = useMemo29(function() {
    return {
      isDragging,
      tryAbort: tryResetStore
    };
  }, [isDragging, tryResetStore]);
  setCallbacks(appCallbacks);
  var getCanLift = useCallback15(function(id) {
    return canStartDrag(getStore(lazyStoreRef).getState(), id);
  }, []);
  var getIsMovementAllowed = useCallback15(function() {
    return isMovementAllowed(getStore(lazyStoreRef).getState());
  }, []);
  var appContext = useMemo29(function() {
    return {
      marshal: dimensionMarshal,
      focus: focusMarshal,
      contextId,
      canLift: getCanLift,
      isMovementAllowed: getIsMovementAllowed,
      dragHandleUsageInstructionsId,
      registry
    };
  }, [contextId, dimensionMarshal, dragHandleUsageInstructionsId, focusMarshal, getCanLift, getIsMovementAllowed, registry]);
  useSensorMarshal({
    contextId,
    store,
    registry,
    customSensors: sensors,
    enableDefaultSensors: props.enableDefaultSensors !== false
  });
  (0, import_react128.useEffect)(function() {
    return tryResetStore;
  }, [tryResetStore]);
  return import_react128.default.createElement(AppContext.Provider, {
    value: appContext
  }, import_react128.default.createElement(Provider_default, {
    context: StoreContext,
    store
  }, props.children));
}
var count$1 = 0;
function useInstanceCount() {
  return useMemo29(function() {
    return "" + count$1++;
  }, []);
}
function DragDropContext(props) {
  var contextId = useInstanceCount();
  var dragHandleUsageInstructions2 = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;
  return import_react128.default.createElement(ErrorBoundary, null, function(setCallbacks) {
    return import_react128.default.createElement(App, {
      nonce: props.nonce,
      contextId,
      setCallbacks,
      dragHandleUsageInstructions: dragHandleUsageInstructions2,
      enableDefaultSensors: props.enableDefaultSensors,
      sensors: props.sensors,
      onBeforeCapture: props.onBeforeCapture,
      onBeforeDragStart: props.onBeforeDragStart,
      onDragStart: props.onDragStart,
      onDragUpdate: props.onDragUpdate,
      onDragEnd: props.onDragEnd
    }, props.children);
  });
}
var isEqual$1 = function isEqual6(base) {
  return function(value) {
    return base === value;
  };
};
var isScroll = isEqual$1("scroll");
var isAuto = isEqual$1("auto");
var isVisible$1 = isEqual$1("visible");
var isEither = function isEither2(overflow, fn) {
  return fn(overflow.overflowX) || fn(overflow.overflowY);
};
var isBoth = function isBoth2(overflow, fn) {
  return fn(overflow.overflowX) && fn(overflow.overflowY);
};
var isElementScrollable = function isElementScrollable2(el) {
  var style2 = window.getComputedStyle(el);
  var overflow = {
    overflowX: style2.overflowX,
    overflowY: style2.overflowY
  };
  return isEither(overflow, isScroll) || isEither(overflow, isAuto);
};
var isBodyScrollable = function isBodyScrollable2() {
  if (false) {
    return false;
  }
  var body = getBodyElement();
  var html = document.documentElement;
  !html ? true ? invariant2(false) : invariant2(false) : void 0;
  if (!isElementScrollable(body)) {
    return false;
  }
  var htmlStyle = window.getComputedStyle(html);
  var htmlOverflow = {
    overflowX: htmlStyle.overflowX,
    overflowY: htmlStyle.overflowY
  };
  if (isBoth(htmlOverflow, isVisible$1)) {
    return false;
  }
  true ? warning4("\n    We have detected that your <body> element might be a scroll container.\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\n\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\n    we will be treating the <body> as *not* a scroll container\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\n  ") : void 0;
  return false;
};
var getClosestScrollable = function getClosestScrollable2(el) {
  if (el == null) {
    return null;
  }
  if (el === document.body) {
    return isBodyScrollable() ? el : null;
  }
  if (el === document.documentElement) {
    return null;
  }
  if (!isElementScrollable(el)) {
    return getClosestScrollable2(el.parentElement);
  }
  return el;
};
var checkForNestedScrollContainers = function(scrollable) {
  if (!scrollable) {
    return;
  }
  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);
  if (!anotherScrollParent) {
    return;
  }
  true ? warning4("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ") : void 0;
};
var getScroll$1 = function(el) {
  return {
    x: el.scrollLeft,
    y: el.scrollTop
  };
};
var getIsFixed = function getIsFixed2(el) {
  if (!el) {
    return false;
  }
  var style2 = window.getComputedStyle(el);
  if (style2.position === "fixed") {
    return true;
  }
  return getIsFixed2(el.parentElement);
};
var getEnv = function(start3) {
  var closestScrollable = getClosestScrollable(start3);
  var isFixedOnPage = getIsFixed(start3);
  return {
    closestScrollable,
    isFixedOnPage
  };
};
var getDroppableDimension = function(_ref) {
  var descriptor = _ref.descriptor, isEnabled = _ref.isEnabled, isCombineEnabled = _ref.isCombineEnabled, isFixedOnPage = _ref.isFixedOnPage, direction = _ref.direction, client = _ref.client, page = _ref.page, closest3 = _ref.closest;
  var frame = function() {
    if (!closest3) {
      return null;
    }
    var scrollSize = closest3.scrollSize, frameClient = closest3.client;
    var maxScroll = getMaxScroll({
      scrollHeight: scrollSize.scrollHeight,
      scrollWidth: scrollSize.scrollWidth,
      height: frameClient.paddingBox.height,
      width: frameClient.paddingBox.width
    });
    return {
      pageMarginBox: closest3.page.marginBox,
      frameClient,
      scrollSize,
      shouldClipSubject: closest3.shouldClipSubject,
      scroll: {
        initial: closest3.scroll,
        current: closest3.scroll,
        max: maxScroll,
        diff: {
          value: origin,
          displacement: origin
        }
      }
    };
  }();
  var axis = direction === "vertical" ? vertical : horizontal;
  var subject = getSubject({
    page,
    withPlaceholder: null,
    axis,
    frame
  });
  var dimension = {
    descriptor,
    isCombineEnabled,
    isFixedOnPage,
    axis,
    isEnabled,
    client,
    page,
    frame,
    subject
  };
  return dimension;
};
var getClient = function getClient2(targetRef, closestScrollable) {
  var base = getBox(targetRef);
  if (!closestScrollable) {
    return base;
  }
  if (targetRef !== closestScrollable) {
    return base;
  }
  var top = base.paddingBox.top - closestScrollable.scrollTop;
  var left = base.paddingBox.left - closestScrollable.scrollLeft;
  var bottom = top + closestScrollable.scrollHeight;
  var right = left + closestScrollable.scrollWidth;
  var paddingBox = {
    top,
    right,
    bottom,
    left
  };
  var borderBox = expand(paddingBox, base.border);
  var client = createBox({
    borderBox,
    margin: base.margin,
    border: base.border,
    padding: base.padding
  });
  return client;
};
var getDimension = function(_ref) {
  var ref2 = _ref.ref, descriptor = _ref.descriptor, env = _ref.env, windowScroll = _ref.windowScroll, direction = _ref.direction, isDropDisabled = _ref.isDropDisabled, isCombineEnabled = _ref.isCombineEnabled, shouldClipSubject = _ref.shouldClipSubject;
  var closestScrollable = env.closestScrollable;
  var client = getClient(ref2, closestScrollable);
  var page = withScroll(client, windowScroll);
  var closest3 = function() {
    if (!closestScrollable) {
      return null;
    }
    var frameClient = getBox(closestScrollable);
    var scrollSize = {
      scrollHeight: closestScrollable.scrollHeight,
      scrollWidth: closestScrollable.scrollWidth
    };
    return {
      client: frameClient,
      page: withScroll(frameClient, windowScroll),
      scroll: getScroll$1(closestScrollable),
      scrollSize,
      shouldClipSubject
    };
  }();
  var dimension = getDroppableDimension({
    descriptor,
    isEnabled: !isDropDisabled,
    isCombineEnabled,
    isFixedOnPage: env.isFixedOnPage,
    direction,
    client,
    page,
    closest: closest3
  });
  return dimension;
};
var immediate = {
  passive: false
};
var delayed = {
  passive: true
};
var getListenerOptions = function(options) {
  return options.shouldPublishImmediately ? immediate : delayed;
};
function useRequiredContext(Context) {
  var result = (0, import_react128.useContext)(Context);
  !result ? true ? invariant2(false, "Could not find required context") : invariant2(false) : void 0;
  return result;
}
var getClosestScrollableFromDrag = function getClosestScrollableFromDrag2(dragging) {
  return dragging && dragging.env.closestScrollable || null;
};
function useDroppablePublisher(args) {
  var whileDraggingRef = (0, import_react128.useRef)(null);
  var appContext = useRequiredContext(AppContext);
  var uniqueId = useUniqueId("droppable");
  var registry = appContext.registry, marshal = appContext.marshal;
  var previousRef = usePrevious(args);
  var descriptor = useMemo29(function() {
    return {
      id: args.droppableId,
      type: args.type,
      mode: args.mode
    };
  }, [args.droppableId, args.mode, args.type]);
  var publishedDescriptorRef = (0, import_react128.useRef)(descriptor);
  var memoizedUpdateScroll = useMemo29(function() {
    return memoize_one_esm_default(function(x2, y3) {
      !whileDraggingRef.current ? true ? invariant2(false, "Can only update scroll when dragging") : invariant2(false) : void 0;
      var scroll4 = {
        x: x2,
        y: y3
      };
      marshal.updateDroppableScroll(descriptor.id, scroll4);
    });
  }, [descriptor.id, marshal]);
  var getClosestScroll = useCallback15(function() {
    var dragging = whileDraggingRef.current;
    if (!dragging || !dragging.env.closestScrollable) {
      return origin;
    }
    return getScroll$1(dragging.env.closestScrollable);
  }, []);
  var updateScroll = useCallback15(function() {
    var scroll4 = getClosestScroll();
    memoizedUpdateScroll(scroll4.x, scroll4.y);
  }, [getClosestScroll, memoizedUpdateScroll]);
  var scheduleScrollUpdate = useMemo29(function() {
    return raf_schd_esm_default(updateScroll);
  }, [updateScroll]);
  var onClosestScroll = useCallback15(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Could not find scroll options while scrolling") : invariant2(false) : void 0;
    var options = dragging.scrollOptions;
    if (options.shouldPublishImmediately) {
      updateScroll();
      return;
    }
    scheduleScrollUpdate();
  }, [scheduleScrollUpdate, updateScroll]);
  var getDimensionAndWatchScroll = useCallback15(function(windowScroll, options) {
    !!whileDraggingRef.current ? true ? invariant2(false, "Cannot collect a droppable while a drag is occurring") : invariant2(false) : void 0;
    var previous = previousRef.current;
    var ref2 = previous.getDroppableRef();
    !ref2 ? true ? invariant2(false, "Cannot collect without a droppable ref") : invariant2(false) : void 0;
    var env = getEnv(ref2);
    var dragging = {
      ref: ref2,
      descriptor,
      env,
      scrollOptions: options
    };
    whileDraggingRef.current = dragging;
    var dimension = getDimension({
      ref: ref2,
      descriptor,
      env,
      windowScroll,
      direction: previous.direction,
      isDropDisabled: previous.isDropDisabled,
      isCombineEnabled: previous.isCombineEnabled,
      shouldClipSubject: !previous.ignoreContainerClipping
    });
    var scrollable = env.closestScrollable;
    if (scrollable) {
      scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);
      scrollable.addEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
      if (true) {
        checkForNestedScrollContainers(scrollable);
      }
    }
    return dimension;
  }, [appContext.contextId, descriptor, onClosestScroll, previousRef]);
  var getScrollWhileDragging = useCallback15(function() {
    var dragging = whileDraggingRef.current;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !(dragging && closest3) ? true ? invariant2(false, "Can only recollect Droppable client for Droppables that have a scroll container") : invariant2(false) : void 0;
    return getScroll$1(closest3);
  }, []);
  var dragStopped = useCallback15(function() {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot stop drag when no active drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    whileDraggingRef.current = null;
    if (!closest3) {
      return;
    }
    scheduleScrollUpdate.cancel();
    closest3.removeAttribute(scrollContainer.contextId);
    closest3.removeEventListener("scroll", onClosestScroll, getListenerOptions(dragging.scrollOptions));
  }, [onClosestScroll, scheduleScrollUpdate]);
  var scroll3 = useCallback15(function(change) {
    var dragging = whileDraggingRef.current;
    !dragging ? true ? invariant2(false, "Cannot scroll when there is no drag") : invariant2(false) : void 0;
    var closest3 = getClosestScrollableFromDrag(dragging);
    !closest3 ? true ? invariant2(false, "Cannot scroll a droppable with no closest scrollable") : invariant2(false) : void 0;
    closest3.scrollTop += change.y;
    closest3.scrollLeft += change.x;
  }, []);
  var callbacks = useMemo29(function() {
    return {
      getDimensionAndWatchScroll,
      getScrollWhileDragging,
      dragStopped,
      scroll: scroll3
    };
  }, [dragStopped, getDimensionAndWatchScroll, getScrollWhileDragging, scroll3]);
  var entry = useMemo29(function() {
    return {
      uniqueId,
      descriptor,
      callbacks
    };
  }, [callbacks, descriptor, uniqueId]);
  useIsomorphicLayoutEffect5(function() {
    publishedDescriptorRef.current = entry.descriptor;
    registry.droppable.register(entry);
    return function() {
      if (whileDraggingRef.current) {
        true ? warning4("Unsupported: changing the droppableId or type of a Droppable during a drag") : void 0;
        dragStopped();
      }
      registry.droppable.unregister(entry);
    };
  }, [callbacks, descriptor, dragStopped, entry, marshal, registry.droppable]);
  useIsomorphicLayoutEffect5(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);
  }, [args.isDropDisabled, marshal]);
  useIsomorphicLayoutEffect5(function() {
    if (!whileDraggingRef.current) {
      return;
    }
    marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);
  }, [args.isCombineEnabled, marshal]);
}
function noop$2() {
}
var empty = {
  width: 0,
  height: 0,
  margin: noSpacing2
};
var getSize2 = function getSize3(_ref) {
  var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount, placeholder2 = _ref.placeholder, animate = _ref.animate;
  if (isAnimatingOpenOnMount) {
    return empty;
  }
  if (animate === "close") {
    return empty;
  }
  return {
    height: placeholder2.client.borderBox.height,
    width: placeholder2.client.borderBox.width,
    margin: placeholder2.client.margin
  };
};
var getStyle = function getStyle2(_ref2) {
  var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount, placeholder2 = _ref2.placeholder, animate = _ref2.animate;
  var size = getSize2({
    isAnimatingOpenOnMount,
    placeholder: placeholder2,
    animate
  });
  return {
    display: placeholder2.display,
    boxSizing: "border-box",
    width: size.width,
    height: size.height,
    marginTop: size.margin.top,
    marginRight: size.margin.right,
    marginBottom: size.margin.bottom,
    marginLeft: size.margin.left,
    flexShrink: "0",
    flexGrow: "0",
    pointerEvents: "none",
    transition: animate !== "none" ? transitions.placeholder : null
  };
};
function Placeholder(props) {
  var animateOpenTimerRef = (0, import_react128.useRef)(null);
  var tryClearAnimateOpenTimer = useCallback15(function() {
    if (!animateOpenTimerRef.current) {
      return;
    }
    clearTimeout(animateOpenTimerRef.current);
    animateOpenTimerRef.current = null;
  }, []);
  var animate = props.animate, onTransitionEnd = props.onTransitionEnd, onClose = props.onClose, contextId = props.contextId;
  var _useState = (0, import_react128.useState)(props.animate === "open"), isAnimatingOpenOnMount = _useState[0], setIsAnimatingOpenOnMount = _useState[1];
  (0, import_react128.useEffect)(function() {
    if (!isAnimatingOpenOnMount) {
      return noop$2;
    }
    if (animate !== "open") {
      tryClearAnimateOpenTimer();
      setIsAnimatingOpenOnMount(false);
      return noop$2;
    }
    if (animateOpenTimerRef.current) {
      return noop$2;
    }
    animateOpenTimerRef.current = setTimeout(function() {
      animateOpenTimerRef.current = null;
      setIsAnimatingOpenOnMount(false);
    });
    return tryClearAnimateOpenTimer;
  }, [animate, isAnimatingOpenOnMount, tryClearAnimateOpenTimer]);
  var onSizeChangeEnd = useCallback15(function(event) {
    if (event.propertyName !== "height") {
      return;
    }
    onTransitionEnd();
    if (animate === "close") {
      onClose();
    }
  }, [animate, onClose, onTransitionEnd]);
  var style2 = getStyle({
    isAnimatingOpenOnMount,
    animate: props.animate,
    placeholder: props.placeholder
  });
  return import_react128.default.createElement(props.placeholder.tagName, {
    style: style2,
    "data-rbd-placeholder-context-id": contextId,
    onTransitionEnd: onSizeChangeEnd,
    ref: props.innerRef
  });
}
var Placeholder$1 = import_react128.default.memo(Placeholder);
var DroppableContext = import_react128.default.createContext(null);
function checkIsValidInnerRef(el) {
  !(el && isHtmlElement(el)) ? true ? invariant2(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant2(false) : void 0;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function runChecks(args, checks) {
  checks.forEach(function(check) {
    return check(args);
  });
}
var shared = [function required(_ref) {
  var props = _ref.props;
  !props.droppableId ? true ? invariant2(false, "A Droppable requires a droppableId prop") : invariant2(false) : void 0;
  !(typeof props.droppableId === "string") ? true ? invariant2(false, "A Droppable requires a [string] droppableId. Provided: [" + typeof props.droppableId + "]") : invariant2(false) : void 0;
}, function _boolean(_ref2) {
  var props = _ref2.props;
  !isBoolean(props.isDropDisabled) ? true ? invariant2(false, "isDropDisabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.isCombineEnabled) ? true ? invariant2(false, "isCombineEnabled must be a boolean") : invariant2(false) : void 0;
  !isBoolean(props.ignoreContainerClipping) ? true ? invariant2(false, "ignoreContainerClipping must be a boolean") : invariant2(false) : void 0;
}, function ref(_ref3) {
  var getDroppableRef = _ref3.getDroppableRef;
  checkIsValidInnerRef(getDroppableRef());
}];
var standard = [function placeholder(_ref4) {
  var props = _ref4.props, getPlaceholderRef = _ref4.getPlaceholderRef;
  if (!props.placeholder) {
    return;
  }
  var ref2 = getPlaceholderRef();
  if (ref2) {
    return;
  }
  true ? warning4('\n      Droppable setup issue [droppableId: "' + props.droppableId + '"]:\n      DroppableProvided > placeholder could not be found.\n\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\n    ') : void 0;
}];
var virtual = [function hasClone(_ref5) {
  var props = _ref5.props;
  !props.renderClone ? true ? invariant2(false, "Must provide a clone render function (renderClone) for virtual lists") : invariant2(false) : void 0;
}, function hasNoPlaceholder(_ref6) {
  var getPlaceholderRef = _ref6.getPlaceholderRef;
  !!getPlaceholderRef() ? true ? invariant2(false, "Expected virtual list to not have a placeholder") : invariant2(false) : void 0;
}];
function useValidation(args) {
  useDevSetupWarning(function() {
    runChecks(args, shared);
    if (args.props.mode === "standard") {
      runChecks(args, standard);
    }
    if (args.props.mode === "virtual") {
      runChecks(args, virtual);
    }
  });
}
var AnimateInOut = function(_React$PureComponent) {
  _inheritsLoose(AnimateInOut2, _React$PureComponent);
  function AnimateInOut2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this.state = {
      isVisible: Boolean(_this.props.on),
      data: _this.props.on,
      animate: _this.props.shouldAnimate && _this.props.on ? "open" : "none"
    };
    _this.onClose = function() {
      if (_this.state.animate !== "close") {
        return;
      }
      _this.setState({
        isVisible: false
      });
    };
    return _this;
  }
  AnimateInOut2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (!props.shouldAnimate) {
      return {
        isVisible: Boolean(props.on),
        data: props.on,
        animate: "none"
      };
    }
    if (props.on) {
      return {
        isVisible: true,
        data: props.on,
        animate: "open"
      };
    }
    if (state.isVisible) {
      return {
        isVisible: true,
        data: state.data,
        animate: "close"
      };
    }
    return {
      isVisible: false,
      animate: "close",
      data: null
    };
  };
  var _proto = AnimateInOut2.prototype;
  _proto.render = function render() {
    if (!this.state.isVisible) {
      return null;
    }
    var provided = {
      onClose: this.onClose,
      data: this.state.data,
      animate: this.state.animate
    };
    return this.props.children(provided);
  };
  return AnimateInOut2;
}(import_react128.default.PureComponent);
var zIndexOptions = {
  dragging: 5e3,
  dropAnimating: 4500
};
var getDraggingTransition = function getDraggingTransition2(shouldAnimateDragMovement, dropping) {
  if (dropping) {
    return transitions.drop(dropping.duration);
  }
  if (shouldAnimateDragMovement) {
    return transitions.snap;
  }
  return transitions.fluid;
};
var getDraggingOpacity = function getDraggingOpacity2(isCombining, isDropAnimating) {
  if (!isCombining) {
    return null;
  }
  return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;
};
var getShouldDraggingAnimate = function getShouldDraggingAnimate2(dragging) {
  if (dragging.forceShouldAnimate != null) {
    return dragging.forceShouldAnimate;
  }
  return dragging.mode === "SNAP";
};
function getDraggingStyle(dragging) {
  var dimension = dragging.dimension;
  var box = dimension.client;
  var offset3 = dragging.offset, combineWith = dragging.combineWith, dropping = dragging.dropping;
  var isCombining = Boolean(combineWith);
  var shouldAnimate = getShouldDraggingAnimate(dragging);
  var isDropAnimating = Boolean(dropping);
  var transform = isDropAnimating ? transforms.drop(offset3, isCombining) : transforms.moveTo(offset3);
  var style2 = {
    position: "fixed",
    top: box.marginBox.top,
    left: box.marginBox.left,
    boxSizing: "border-box",
    width: box.borderBox.width,
    height: box.borderBox.height,
    transition: getDraggingTransition(shouldAnimate, dropping),
    transform,
    opacity: getDraggingOpacity(isCombining, isDropAnimating),
    zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
    pointerEvents: "none"
  };
  return style2;
}
function getSecondaryStyle(secondary) {
  return {
    transform: transforms.moveTo(secondary.offset),
    transition: secondary.shouldAnimateDisplacement ? null : "none"
  };
}
function getStyle$1(mapped) {
  return mapped.type === "DRAGGING" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);
}
function getDimension$1(descriptor, el, windowScroll) {
  if (windowScroll === void 0) {
    windowScroll = origin;
  }
  var computedStyles = window.getComputedStyle(el);
  var borderBox = el.getBoundingClientRect();
  var client = calculateBox(borderBox, computedStyles);
  var page = withScroll(client, windowScroll);
  var placeholder2 = {
    client,
    tagName: el.tagName.toLowerCase(),
    display: computedStyles.display
  };
  var displaceBy = {
    x: client.marginBox.width,
    y: client.marginBox.height
  };
  var dimension = {
    descriptor,
    placeholder: placeholder2,
    displaceBy,
    client,
    page
  };
  return dimension;
}
function useDraggablePublisher(args) {
  var uniqueId = useUniqueId("draggable");
  var descriptor = args.descriptor, registry = args.registry, getDraggableRef = args.getDraggableRef, canDragInteractiveElements = args.canDragInteractiveElements, shouldRespectForcePress = args.shouldRespectForcePress, isEnabled = args.isEnabled;
  var options = useMemo29(function() {
    return {
      canDragInteractiveElements,
      shouldRespectForcePress,
      isEnabled
    };
  }, [canDragInteractiveElements, isEnabled, shouldRespectForcePress]);
  var getDimension2 = useCallback15(function(windowScroll) {
    var el = getDraggableRef();
    !el ? true ? invariant2(false, "Cannot get dimension when no ref is set") : invariant2(false) : void 0;
    return getDimension$1(descriptor, el, windowScroll);
  }, [descriptor, getDraggableRef]);
  var entry = useMemo29(function() {
    return {
      uniqueId,
      descriptor,
      options,
      getDimension: getDimension2
    };
  }, [descriptor, getDimension2, options, uniqueId]);
  var publishedRef = (0, import_react128.useRef)(entry);
  var isFirstPublishRef = (0, import_react128.useRef)(true);
  useIsomorphicLayoutEffect5(function() {
    registry.draggable.register(publishedRef.current);
    return function() {
      return registry.draggable.unregister(publishedRef.current);
    };
  }, [registry.draggable]);
  useIsomorphicLayoutEffect5(function() {
    if (isFirstPublishRef.current) {
      isFirstPublishRef.current = false;
      return;
    }
    var last = publishedRef.current;
    publishedRef.current = entry;
    registry.draggable.update(entry, last);
  }, [entry, registry.draggable]);
}
function useValidation$1(props, contextId, getRef) {
  useDevSetupWarning(function() {
    function prefix3(id2) {
      return "Draggable[id: " + id2 + "]: ";
    }
    var id = props.draggableId;
    !id ? true ? invariant2(false, "Draggable requires a draggableId") : invariant2(false) : void 0;
    !(typeof id === "string") ? true ? invariant2(false, "Draggable requires a [string] draggableId.\n      Provided: [type: " + typeof id + "] (value: " + id + ")") : invariant2(false) : void 0;
    !isInteger(props.index) ? true ? invariant2(false, prefix3(id) + " requires an integer index prop") : invariant2(false) : void 0;
    if (props.mapped.type === "DRAGGING") {
      return;
    }
    checkIsValidInnerRef(getRef());
    if (props.isEnabled) {
      !findDragHandle(contextId, id) ? true ? invariant2(false, prefix3(id) + " Unable to find drag handle") : invariant2(false) : void 0;
    }
  });
}
function useClonePropValidation(isClone) {
  useDev(function() {
    var initialRef = (0, import_react128.useRef)(isClone);
    useDevSetupWarning(function() {
      !(isClone === initialRef.current) ? true ? invariant2(false, "Draggable isClone prop value changed during component life") : invariant2(false) : void 0;
    }, [isClone]);
  });
}
function preventHtml5Dnd(event) {
  event.preventDefault();
}
function Draggable(props) {
  var ref2 = (0, import_react128.useRef)(null);
  var setRef3 = useCallback15(function(el) {
    ref2.current = el;
  }, []);
  var getRef = useCallback15(function() {
    return ref2.current;
  }, []);
  var _useRequiredContext = useRequiredContext(AppContext), contextId = _useRequiredContext.contextId, dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId, registry = _useRequiredContext.registry;
  var _useRequiredContext2 = useRequiredContext(DroppableContext), type = _useRequiredContext2.type, droppableId = _useRequiredContext2.droppableId;
  var descriptor = useMemo29(function() {
    return {
      id: props.draggableId,
      index: props.index,
      type,
      droppableId
    };
  }, [props.draggableId, props.index, type, droppableId]);
  var children = props.children, draggableId = props.draggableId, isEnabled = props.isEnabled, shouldRespectForcePress = props.shouldRespectForcePress, canDragInteractiveElements = props.canDragInteractiveElements, isClone = props.isClone, mapped = props.mapped, dropAnimationFinishedAction = props.dropAnimationFinished;
  useValidation$1(props, contextId, getRef);
  useClonePropValidation(isClone);
  if (!isClone) {
    var forPublisher = useMemo29(function() {
      return {
        descriptor,
        registry,
        getDraggableRef: getRef,
        canDragInteractiveElements,
        shouldRespectForcePress,
        isEnabled
      };
    }, [descriptor, registry, getRef, canDragInteractiveElements, shouldRespectForcePress, isEnabled]);
    useDraggablePublisher(forPublisher);
  }
  var dragHandleProps = useMemo29(function() {
    return isEnabled ? {
      tabIndex: 0,
      role: "button",
      "aria-describedby": dragHandleUsageInstructionsId,
      "data-rbd-drag-handle-draggable-id": draggableId,
      "data-rbd-drag-handle-context-id": contextId,
      draggable: false,
      onDragStart: preventHtml5Dnd
    } : null;
  }, [contextId, dragHandleUsageInstructionsId, draggableId, isEnabled]);
  var onMoveEnd = useCallback15(function(event) {
    if (mapped.type !== "DRAGGING") {
      return;
    }
    if (!mapped.dropping) {
      return;
    }
    if (event.propertyName !== "transform") {
      return;
    }
    dropAnimationFinishedAction();
  }, [dropAnimationFinishedAction, mapped]);
  var provided = useMemo29(function() {
    var style2 = getStyle$1(mapped);
    var onTransitionEnd = mapped.type === "DRAGGING" && mapped.dropping ? onMoveEnd : null;
    var result = {
      innerRef: setRef3,
      draggableProps: {
        "data-rbd-draggable-context-id": contextId,
        "data-rbd-draggable-id": draggableId,
        style: style2,
        onTransitionEnd
      },
      dragHandleProps
    };
    return result;
  }, [contextId, dragHandleProps, draggableId, mapped, onMoveEnd, setRef3]);
  var rubric = useMemo29(function() {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  }, [descriptor.droppableId, descriptor.id, descriptor.index, descriptor.type]);
  return children(provided, mapped.snapshot, rubric);
}
var isStrictEqual = function(a3, b2) {
  return a3 === b2;
};
var whatIsDraggedOverFromResult = function(result) {
  var combine2 = result.combine, destination = result.destination;
  if (destination) {
    return destination.droppableId;
  }
  if (combine2) {
    return combine2.droppableId;
  }
  return null;
};
var getCombineWithFromResult = function getCombineWithFromResult2(result) {
  return result.combine ? result.combine.draggableId : null;
};
var getCombineWithFromImpact = function getCombineWithFromImpact2(impact) {
  return impact.at && impact.at.type === "COMBINE" ? impact.at.combine.draggableId : null;
};
function getDraggableSelector() {
  var memoizedOffset = memoize_one_esm_default(function(x2, y3) {
    return {
      x: x2,
      y: y3
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(function(mode, isClone, draggingOver, combineWith, dropping) {
    return {
      isDragging: true,
      isClone,
      isDropAnimating: Boolean(dropping),
      dropAnimation: dropping,
      mode,
      draggingOver,
      combineWith,
      combineTargetFor: null
    };
  });
  var getMemoizedProps = memoize_one_esm_default(function(offset3, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {
    return {
      mapped: {
        type: "DRAGGING",
        dropping: null,
        draggingOver,
        combineWith,
        mode,
        offset: offset3,
        dimension,
        forceShouldAnimate,
        snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)
      }
    };
  });
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id !== ownProps.draggableId) {
        return null;
      }
      var offset3 = state.current.client.offset;
      var dimension = state.dimensions.draggables[ownProps.draggableId];
      var draggingOver = whatIsDraggedOver(state.impact);
      var combineWith = getCombineWithFromImpact(state.impact);
      var forceShouldAnimate = state.forceShouldAnimate;
      return getMemoizedProps(memoizedOffset(offset3.x, offset3.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId !== ownProps.draggableId) {
        return null;
      }
      var isClone = ownProps.isClone;
      var _dimension = state.dimensions.draggables[ownProps.draggableId];
      var result = completed.result;
      var mode = result.mode;
      var _draggingOver = whatIsDraggedOverFromResult(result);
      var _combineWith = getCombineWithFromResult(result);
      var duration = state.dropDuration;
      var dropping = {
        duration,
        curve: curves.drop,
        moveTo: state.newHomeClientOffset,
        opacity: _combineWith ? combine.opacity.drop : null,
        scale: _combineWith ? combine.scale.drop : null
      };
      return {
        mapped: {
          type: "DRAGGING",
          offset: state.newHomeClientOffset,
          dimension: _dimension,
          dropping,
          draggingOver: _draggingOver,
          combineWith: _combineWith,
          mode,
          forceShouldAnimate: null,
          snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)
        }
      };
    }
    return null;
  };
  return selector;
}
function getSecondarySnapshot(combineTargetFor) {
  return {
    isDragging: false,
    isDropAnimating: false,
    isClone: false,
    dropAnimation: null,
    mode: null,
    draggingOver: null,
    combineTargetFor,
    combineWith: null
  };
}
var atRest = {
  mapped: {
    type: "SECONDARY",
    offset: origin,
    combineTargetFor: null,
    shouldAnimateDisplacement: true,
    snapshot: getSecondarySnapshot(null)
  }
};
function getSecondarySelector() {
  var memoizedOffset = memoize_one_esm_default(function(x2, y3) {
    return {
      x: x2,
      y: y3
    };
  });
  var getMemoizedSnapshot = memoize_one_esm_default(getSecondarySnapshot);
  var getMemoizedProps = memoize_one_esm_default(function(offset3, combineTargetFor, shouldAnimateDisplacement) {
    if (combineTargetFor === void 0) {
      combineTargetFor = null;
    }
    return {
      mapped: {
        type: "SECONDARY",
        offset: offset3,
        combineTargetFor,
        shouldAnimateDisplacement,
        snapshot: getMemoizedSnapshot(combineTargetFor)
      }
    };
  });
  var getFallback = function getFallback2(combineTargetFor) {
    return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;
  };
  var getProps = function getProps2(ownId, draggingId, impact, afterCritical) {
    var visualDisplacement = impact.displaced.visible[ownId];
    var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);
    var combine2 = tryGetCombine(impact);
    var combineTargetFor = combine2 && combine2.draggableId === ownId ? draggingId : null;
    if (!visualDisplacement) {
      if (!isAfterCriticalInVirtualList) {
        return getFallback(combineTargetFor);
      }
      if (impact.displaced.invisible[ownId]) {
        return null;
      }
      var change = negate(afterCritical.displacedBy.point);
      var _offset = memoizedOffset(change.x, change.y);
      return getMemoizedProps(_offset, combineTargetFor, true);
    }
    if (isAfterCriticalInVirtualList) {
      return getFallback(combineTargetFor);
    }
    var displaceBy = impact.displacedBy.point;
    var offset3 = memoizedOffset(displaceBy.x, displaceBy.y);
    return getMemoizedProps(offset3, combineTargetFor, visualDisplacement.shouldAnimate);
  };
  var selector = function selector2(state, ownProps) {
    if (state.isDragging) {
      if (state.critical.draggable.id === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (completed.result.draggableId === ownProps.draggableId) {
        return null;
      }
      return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);
    }
    return null;
  };
  return selector;
}
var makeMapStateToProps = function makeMapStateToProps2() {
  var draggingSelector = getDraggableSelector();
  var secondarySelector = getSecondarySelector();
  var selector = function selector2(state, ownProps) {
    return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;
  };
  return selector;
};
var mapDispatchToProps = {
  dropAnimationFinished
};
var ConnectedDraggable = connect_default(makeMapStateToProps, mapDispatchToProps, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Draggable);
function PrivateDraggable(props) {
  var droppableContext = useRequiredContext(DroppableContext);
  var isUsingCloneFor = droppableContext.isUsingCloneFor;
  if (isUsingCloneFor === props.draggableId && !props.isClone) {
    return null;
  }
  return import_react128.default.createElement(ConnectedDraggable, props);
}
function PublicDraggable(props) {
  var isEnabled = typeof props.isDragDisabled === "boolean" ? !props.isDragDisabled : true;
  var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);
  var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);
  return import_react128.default.createElement(PrivateDraggable, _extends({}, props, {
    isClone: false,
    isEnabled,
    canDragInteractiveElements,
    shouldRespectForcePress
  }));
}
function Droppable(props) {
  var appContext = (0, import_react128.useContext)(AppContext);
  !appContext ? true ? invariant2(false, "Could not find app context") : invariant2(false) : void 0;
  var contextId = appContext.contextId, isMovementAllowed2 = appContext.isMovementAllowed;
  var droppableRef = (0, import_react128.useRef)(null);
  var placeholderRef = (0, import_react128.useRef)(null);
  var children = props.children, droppableId = props.droppableId, type = props.type, mode = props.mode, direction = props.direction, ignoreContainerClipping = props.ignoreContainerClipping, isDropDisabled = props.isDropDisabled, isCombineEnabled = props.isCombineEnabled, snapshot = props.snapshot, useClone = props.useClone, updateViewportMaxScroll3 = props.updateViewportMaxScroll, getContainerForClone = props.getContainerForClone;
  var getDroppableRef = useCallback15(function() {
    return droppableRef.current;
  }, []);
  var setDroppableRef = useCallback15(function(value) {
    droppableRef.current = value;
  }, []);
  var getPlaceholderRef = useCallback15(function() {
    return placeholderRef.current;
  }, []);
  var setPlaceholderRef = useCallback15(function(value) {
    placeholderRef.current = value;
  }, []);
  useValidation({
    props,
    getDroppableRef,
    getPlaceholderRef
  });
  var onPlaceholderTransitionEnd = useCallback15(function() {
    if (isMovementAllowed2()) {
      updateViewportMaxScroll3({
        maxScroll: getMaxWindowScroll()
      });
    }
  }, [isMovementAllowed2, updateViewportMaxScroll3]);
  useDroppablePublisher({
    droppableId,
    type,
    mode,
    direction,
    isDropDisabled,
    isCombineEnabled,
    ignoreContainerClipping,
    getDroppableRef
  });
  var placeholder2 = import_react128.default.createElement(AnimateInOut, {
    on: props.placeholder,
    shouldAnimate: props.shouldAnimatePlaceholder
  }, function(_ref) {
    var onClose = _ref.onClose, data = _ref.data, animate = _ref.animate;
    return import_react128.default.createElement(Placeholder$1, {
      placeholder: data,
      onClose,
      innerRef: setPlaceholderRef,
      animate,
      contextId,
      onTransitionEnd: onPlaceholderTransitionEnd
    });
  });
  var provided = useMemo29(function() {
    return {
      innerRef: setDroppableRef,
      placeholder: placeholder2,
      droppableProps: {
        "data-rbd-droppable-id": droppableId,
        "data-rbd-droppable-context-id": contextId
      }
    };
  }, [contextId, droppableId, placeholder2, setDroppableRef]);
  var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;
  var droppableContext = useMemo29(function() {
    return {
      droppableId,
      type,
      isUsingCloneFor
    };
  }, [droppableId, isUsingCloneFor, type]);
  function getClone() {
    if (!useClone) {
      return null;
    }
    var dragging = useClone.dragging, render = useClone.render;
    var node = import_react128.default.createElement(PrivateDraggable, {
      draggableId: dragging.draggableId,
      index: dragging.source.index,
      isClone: true,
      isEnabled: true,
      shouldRespectForcePress: false,
      canDragInteractiveElements: true
    }, function(draggableProvided, draggableSnapshot) {
      return render(draggableProvided, draggableSnapshot, dragging);
    });
    return import_react_dom6.default.createPortal(node, getContainerForClone());
  }
  return import_react128.default.createElement(DroppableContext.Provider, {
    value: droppableContext
  }, children(provided, snapshot), getClone());
}
var isMatchingType = function isMatchingType2(type, critical) {
  return type === critical.droppable.type;
};
var getDraggable = function getDraggable2(critical, dimensions) {
  return dimensions.draggables[critical.draggable.id];
};
var makeMapStateToProps$1 = function makeMapStateToProps3() {
  var idleWithAnimation = {
    placeholder: null,
    shouldAnimatePlaceholder: true,
    snapshot: {
      isDraggingOver: false,
      draggingOverWith: null,
      draggingFromThisWith: null,
      isUsingPlaceholder: false
    },
    useClone: null
  };
  var idleWithoutAnimation = _extends({}, idleWithAnimation, {
    shouldAnimatePlaceholder: false
  });
  var getDraggableRubric = memoize_one_esm_default(function(descriptor) {
    return {
      draggableId: descriptor.id,
      type: descriptor.type,
      source: {
        index: descriptor.index,
        droppableId: descriptor.droppableId
      }
    };
  });
  var getMapProps = memoize_one_esm_default(function(id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {
    var draggableId = dragging.descriptor.id;
    var isHome = dragging.descriptor.droppableId === id;
    if (isHome) {
      var useClone = renderClone ? {
        render: renderClone,
        dragging: getDraggableRubric(dragging.descriptor)
      } : null;
      var _snapshot = {
        isDraggingOver: isDraggingOverForConsumer,
        draggingOverWith: isDraggingOverForConsumer ? draggableId : null,
        draggingFromThisWith: draggableId,
        isUsingPlaceholder: true
      };
      return {
        placeholder: dragging.placeholder,
        shouldAnimatePlaceholder: false,
        snapshot: _snapshot,
        useClone
      };
    }
    if (!isEnabled) {
      return idleWithoutAnimation;
    }
    if (!isDraggingOverForImpact) {
      return idleWithAnimation;
    }
    var snapshot = {
      isDraggingOver: isDraggingOverForConsumer,
      draggingOverWith: draggableId,
      draggingFromThisWith: null,
      isUsingPlaceholder: true
    };
    return {
      placeholder: dragging.placeholder,
      shouldAnimatePlaceholder: true,
      snapshot,
      useClone: null
    };
  });
  var selector = function selector2(state, ownProps) {
    var id = ownProps.droppableId;
    var type = ownProps.type;
    var isEnabled = !ownProps.isDropDisabled;
    var renderClone = ownProps.renderClone;
    if (state.isDragging) {
      var critical = state.critical;
      if (!isMatchingType(type, critical)) {
        return idleWithoutAnimation;
      }
      var dragging = getDraggable(critical, state.dimensions);
      var isDraggingOver = whatIsDraggedOver(state.impact) === id;
      return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);
    }
    if (state.phase === "DROP_ANIMATING") {
      var completed = state.completed;
      if (!isMatchingType(type, completed.critical)) {
        return idleWithoutAnimation;
      }
      var _dragging = getDraggable(completed.critical, state.dimensions);
      return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);
    }
    if (state.phase === "IDLE" && state.completed && !state.shouldFlush) {
      var _completed = state.completed;
      if (!isMatchingType(type, _completed.critical)) {
        return idleWithoutAnimation;
      }
      var wasOver = whatIsDraggedOver(_completed.impact) === id;
      var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === "COMBINE");
      var isHome = _completed.critical.droppable.id === id;
      if (wasOver) {
        return wasCombining ? idleWithAnimation : idleWithoutAnimation;
      }
      if (isHome) {
        return idleWithAnimation;
      }
      return idleWithoutAnimation;
    }
    return idleWithoutAnimation;
  };
  return selector;
};
var mapDispatchToProps$1 = {
  updateViewportMaxScroll
};
function getBody() {
  !document.body ? true ? invariant2(false, "document.body is not ready") : invariant2(false) : void 0;
  return document.body;
}
var defaultProps3 = {
  mode: "standard",
  type: "DEFAULT",
  direction: "vertical",
  isDropDisabled: false,
  isCombineEnabled: false,
  ignoreContainerClipping: false,
  renderClone: null,
  getContainerForClone: getBody
};
var ConnectedDroppable = connect_default(makeMapStateToProps$1, mapDispatchToProps$1, null, {
  context: StoreContext,
  pure: true,
  areStatePropsEqual: isStrictEqual
})(Droppable);
ConnectedDroppable.defaultProps = defaultProps3;

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Actions/Actions.js
var import_react131 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/SelectAll/SelectAll.js
var import_react129 = __toESM(require_react());
var SelectAll = (_ref) => {
  let {
    items = [],
    onChange,
    selectedItems,
    totalItems
  } = _ref;
  const allInPageSelected = items.length > 0 && items.every((item) => selectedItems.has(item));
  const someInPageSelected = items.length > 0 && items.some((item) => selectedItems.has(item));
  const handleSelectAll = () => {
    if (typeof onChange !== "function") {
      return;
    }
    if (selectedItems.size === 0) {
      return onChange([...items]);
    }
    if (allInPageSelected) {
      const newSelectedItems = new Set(selectedItems);
      items.forEach((item) => newSelectedItems.delete(item));
      return onChange([...newSelectedItems]);
    }
    return onChange([.../* @__PURE__ */ new Set([...selectedItems, ...items])]);
  };
  if (typeof onChange !== "function") {
    return null;
  }
  const totalSelectedItems = selectedItems.size;
  const label = allInPageSelected ? "Deselect All" : "Select All";
  return import_react129.default.createElement(FlexItem, {
    flexShrink: 0,
    marginRight: "xxSmall"
  }, import_react129.default.createElement(Flex, {
    flexDirection: "row"
  }, import_react129.default.createElement(Checkbox, {
    checked: allInPageSelected,
    hiddenLabel: true,
    isIndeterminate: someInPageSelected,
    label,
    onChange: handleSelectAll
  }), import_react129.default.createElement(Text, {
    marginLeft: "small"
  }, totalSelectedItems === 0 ? `${totalItems}` : `${totalSelectedItems}/${totalItems}`)));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/TablePagination/TablePagination.js
var import_react130 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/TablePagination/styled.js
var StyledPaginationContainer = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledPaginationContainer",
  componentId: "sc-1w0s9nk-0"
})(["margin-left:auto;"]);
StyledPaginationContainer.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/TablePagination/TablePagination.js
var TablePagination = (0, import_react130.memo)((_ref) => {
  let {
    currentPage,
    itemsPerPage,
    itemsPerPageOptions,
    onItemsPerPageChange,
    onPageChange,
    totalItems,
    label,
    previousLabel,
    nextLabel,
    getRangeLabel
  } = _ref;
  return import_react130.default.createElement(StyledPaginationContainer, {
    flexShrink: 0
  }, import_react130.default.createElement(Pagination, {
    currentPage,
    getRangeLabel,
    itemsPerPage,
    itemsPerPageOptions,
    label,
    nextLabel,
    onItemsPerPageChange,
    onPageChange,
    previousLabel,
    totalItems
  }));
});

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Actions/styled.js
var StyledFlex2 = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledFlex",
  componentId: "sc-yxkzj0-0"
})(["", " background-color:", ";display:flex;padding:", ";", ""], withFlexedContainer(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return `${theme2.spacing.small} ${theme2.spacing.xLarge}`;
}, (_ref3) => {
  let {
    theme: theme2,
    stickyHeader
  } = _ref3;
  return stickyHeader && Ae(["", "{position:sticky;top:0;z-index:", ";}"], theme2.breakpoints.tablet, theme2.zIndex.sticky + 1);
});
StyledFlex2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Actions/Actions.js
var InternalActions = (_ref) => {
  let {
    customActions,
    forwardedRef,
    itemName,
    items = [],
    onSelectionChange,
    pagination,
    selectedItems,
    stickyHeader,
    tableId,
    ...props
  } = _ref;
  const isSelectable = typeof onSelectionChange === "function";
  const totalItems = pagination ? pagination.totalItems : items.length;
  const renderItemName = () => {
    if (typeof itemName !== "string") {
      return null;
    }
    const text = isSelectable ? itemName : `${totalItems} ${itemName}`;
    return import_react131.default.createElement(FlexItem, {
      flexShrink: 0,
      marginRight: "medium"
    }, import_react131.default.createElement(Text, {
      margin: "none"
    }, text));
  };
  const renderActions = () => {
    return customActions ?? null;
  };
  return import_react131.default.createElement(StyledFlex2, _extends({
    alignItems: "center",
    "aria-controls": tableId,
    flexDirection: "row",
    justifyContent: "stretch",
    ref: forwardedRef,
    stickyHeader
  }, props), import_react131.default.createElement(SelectAll, {
    items,
    onChange: onSelectionChange,
    selectedItems,
    totalItems
  }), renderItemName(), renderActions(), pagination && import_react131.default.createElement(TablePagination, pagination));
};
var Actions = typedMemo(InternalActions);

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Body/Body.js
var import_react132 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Body/styled.js
var StyledTableBody = styled_components_browser_esm_default.tbody.withConfig({
  displayName: "styled__StyledTableBody",
  componentId: "sc-1bwe2hn-0"
})(["", ""], (_ref) => {
  let {
    theme: theme2,
    withFirstRowBorder
  } = _ref;
  return withFirstRowBorder && Ae(["tr:first-of-type > td{border-top:", ";}"], theme2.border.box);
});
StyledTableBody.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Body/Body.js
var RawBody = (props) => import_react132.default.createElement(StyledTableBody, _extends({
  ref: props.forwardedRef
}, props));
var Body = (0, import_react132.memo)((0, import_react132.forwardRef)((props, ref2) => import_react132.default.createElement(RawBody, _extends({}, props, {
  forwardedRef: ref2
}))));

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Head/Head.js
var import_react133 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Head/styled.js
var StyledTableHead = styled_components_browser_esm_default.thead.withConfig({
  displayName: "styled__StyledTableHead",
  componentId: "sc-1p8j1x-0"
})(["", ""], (_ref) => {
  let {
    hidden
  } = _ref;
  return hidden && hideVisually();
});
StyledTableHead.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Head/Head.js
var Head = (0, import_react133.memo)((_ref) => {
  let {
    className,
    style: style2,
    hidden = false,
    ...props
  } = _ref;
  return import_react133.default.createElement(StyledTableHead, _extends({
    hidden
  }, props));
});

// node_modules/@bigcommerce/big-design/dist/es/components/Table/HeaderCell/HeaderCell.js
var import_react134 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/mixins/display/display.js
var withTableColumnDisplay = () => Ae(["", ";"], (_ref) => {
  let {
    display,
    theme: theme2
  } = _ref;
  return display && getDisplayStyles2(display, theme2, "display");
});
var getDisplayStyles2 = (displayProp, theme2, cssKey) => {
  if (typeof displayProp === "object") {
    return getResponsiveDisplay2(displayProp, theme2, cssKey);
  }
  if (typeof displayProp === "string" || typeof displayProp === "number") {
    return getSimpleDisplay2(displayProp, cssKey);
  }
  return [];
};
var getSimpleDisplay2 = (displayProp, cssKey) => Ae(["", ":", ""], cssKey, displayProp);
var getResponsiveDisplay2 = (displayProp, theme2, cssKey) => {
  const breakpointKeys = Object.keys(displayProp).sort((firstBreakpoint, secondBreakpoint) => (
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(firstBreakpoint) - // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    breakpointsOrder.indexOf(secondBreakpoint)
  ));
  return breakpointKeys.map((breakpointKey) => Ae(
    ["", "{", " ", "}"],
    theme2.breakpoints[breakpointKey],
    /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
    "",
    getSimpleDisplay2(displayProp[breakpointKey], cssKey)
  ));
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/HeaderCell/styled.js
var StyledTableHeaderCell = styled_components_browser_esm_default.th.withConfig({
  displayName: "styled__StyledTableHeaderCell",
  componentId: "sc-1opnvtt-0"
})(["", " background-color:", ";border-bottom:", ";border-top:", ";box-sizing:border-box;color:", ";font-size:", ";padding:", ";white-space:nowrap;&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", ";", ";", ""], withTableColumnDisplay(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.border.box;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.border.box;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.colors.secondary70;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.typography.fontSize.medium;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.small;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.spacing.xLarge;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.spacing.xLarge;
}, (_ref9) => {
  let {
    isSortable
  } = _ref9;
  return isSortable && Ae(["cursor:pointer;"]);
}, (_ref10) => {
  let {
    width
  } = _ref10;
  return width !== void 0 && Ae(["width:", ";"], typeof width === "string" ? width : `${width}px`);
}, (_ref11) => {
  let {
    theme: theme2,
    stickyHeader,
    stickyHeight
  } = _ref11;
  return stickyHeader && stickyHeight >= 0 && Ae(["", "{position:sticky;top:", ";z-index:", ";}"], theme2.breakpoints.tablet, theme2.helpers.remCalc(stickyHeight), theme2.zIndex.sticky);
});
var StyledTableHeaderIcon = styled_components_browser_esm_default(StyledTableHeaderCell).withConfig({
  displayName: "styled__StyledTableHeaderIcon",
  componentId: "sc-1opnvtt-1"
})(["width:", ";white-space:nowrap;"], (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.helpers.addValues(theme2.spacing.xLarge, theme2.spacing.small);
});
var StyledFlex3 = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledFlex",
  componentId: "sc-1opnvtt-2"
})(["", ";", ";"], (_ref13) => {
  let {
    align
  } = _ref13;
  switch (align) {
    case "center":
      return Ae(["justify-content:center;"]);
    case "right":
      return Ae(["justify-content:flex-end;"]);
    default:
      return Ae(["justify-content:flex-start;"]);
  }
}, (_ref14) => {
  let {
    hide
  } = _ref14;
  return hide && hideVisually();
});
StyledFlex3.defaultProps = {
  theme
};
StyledTableHeaderCell.defaultProps = {
  theme
};
StyledTableHeaderIcon.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/HeaderCell/HeaderCell.js
var InternalHeaderCell = (_ref) => {
  let {
    actionsRef,
    children,
    column,
    display,
    hide = false,
    id,
    isSorted,
    onSortClick,
    sortDirection,
    stickyHeader
  } = _ref;
  const {
    align = "left",
    isSortable,
    width,
    tooltip
  } = column;
  const actionsSize = useComponentSize(actionsRef);
  const tooltipId = (0, import_react134.useId)();
  const renderSortIcon = () => {
    if (!isSorted) {
      return null;
    }
    return sortDirection === "ASC" ? import_react134.default.createElement(ArrowUpwardIcon, {
      "data-testid": "asc-icon",
      size: "medium",
      title: "Ascending order"
    }) : import_react134.default.createElement(ArrowDownwardIcon, {
      "data-testid": "desc-icon",
      size: "medium",
      title: "Descending order"
    });
  };
  const renderTooltip = () => {
    if (typeof tooltip === "string" && tooltip.length > 0) {
      return import_react134.default.createElement(Tooltip, {
        id: tooltipId,
        placement: "right",
        trigger: import_react134.default.createElement(Box, {
          as: "span",
          marginLeft: "xxSmall"
        }, import_react134.default.createElement(BaselineHelpIcon, {
          "aria-describedby": tooltipId,
          size: "medium",
          title: "Hover or focus for additional context."
        }))
      }, tooltip);
    }
    return null;
  };
  const handleClick = (e4) => {
    e4.preventDefault();
    if (isSortable && typeof onSortClick === "function") {
      onSortClick(column);
    }
  };
  return import_react134.default.createElement(StyledTableHeaderCell, {
    display,
    id,
    isSortable,
    onClick: handleClick,
    stickyHeader,
    stickyHeight: actionsSize.height,
    width
  }, import_react134.default.createElement(StyledFlex3, {
    align,
    alignItems: "center",
    flexDirection: "row",
    hide
  }, children, !hide && renderSortIcon(), renderTooltip()), hide && renderSortIcon());
};
var HeaderCheckboxCell = (0, import_react134.memo)((_ref2) => {
  let {
    stickyHeader,
    actionsRef
  } = _ref2;
  const actionsSize = useComponentSize(actionsRef);
  return import_react134.default.createElement(StyledTableHeaderIcon, {
    stickyHeader,
    stickyHeight: actionsSize.height
  });
});
var DragIconHeaderCell = (0, import_react134.memo)((_ref3) => {
  let {
    actionsRef,
    headerCellIconRef
  } = _ref3;
  const actionsSize = useComponentSize(actionsRef);
  return import_react134.default.createElement(StyledTableHeaderIcon, {
    ref: headerCellIconRef,
    stickyHeight: actionsSize.height
  });
});
var HeaderCell = typedMemo(InternalHeaderCell);

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Row/Row.js
var import_react136 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/DataCell/DataCell.js
var import_react135 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Table/DataCell/styled.js
var StyledTableDataCell = styled_components_browser_esm_default.td.withConfig({
  displayName: "styled__StyledTableDataCell",
  componentId: "sc-16y6nzi-0"
})(["", " background-color:", ";box-sizing:border-box;color:", ";font-size:", ";padding:", ";&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", " ", ";", ";", ";"], withTableColumnDisplay(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.white;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary70;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.typography.fontSize.medium;
}, (_ref4) => {
  let {
    theme: theme2,
    withPadding
  } = _ref4;
  return withPadding ? theme2.spacing.small : 0;
}, (_ref5) => {
  let {
    theme: theme2,
    withPadding
  } = _ref5;
  return withPadding ? theme2.spacing.xLarge : 0;
}, (_ref6) => {
  let {
    theme: theme2,
    withPadding
  } = _ref6;
  return withPadding ? theme2.spacing.xLarge : 0;
}, (_ref7) => {
  let {
    theme: theme2,
    withBorder
  } = _ref7;
  return withBorder && Ae(["border-bottom:", ";"], theme2.border.box);
}, (_ref8) => {
  let {
    align
  } = _ref8;
  return align && Ae(["text-align:", ";"], align);
}, (_ref9) => {
  let {
    verticalAlign
  } = _ref9;
  return verticalAlign && Ae(["vertical-align:", ";"], verticalAlign);
}, (_ref10) => {
  let {
    width
  } = _ref10;
  return width !== void 0 && Ae(["width:", ";"], typeof width === "string" ? width : `${width}px`);
});
var StyledTableDataCheckbox = styled_components_browser_esm_default(StyledTableDataCell).withConfig({
  displayName: "styled__StyledTableDataCheckbox",
  componentId: "sc-16y6nzi-1"
})(["", " background-color:", ";padding:", ";&:first-of-type{padding-left:", ";}&:last-of-type{padding-right:", ";}", ";"], withTableColumnDisplay(), (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.colors.white;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return `0 ${theme2.spacing.small}`;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.spacing.xLarge;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.spacing.xLarge;
}, (props) => props.isCheckbox && Ae(["width:", ";white-space:nowrap;"], (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.helpers.addValues(theme2.spacing.xLarge, theme2.spacing.small);
}));
StyledTableDataCell.defaultProps = {
  theme
};
StyledTableDataCheckbox.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/DataCell/DataCell.js
var DataCell = (0, import_react135.memo)((_ref) => {
  let {
    align,
    children,
    display,
    isCheckbox,
    verticalAlign,
    width,
    withBorder = true,
    withPadding = true
  } = _ref;
  return isCheckbox ? import_react135.default.createElement(StyledTableDataCheckbox, {
    align,
    display,
    width,
    withBorder
  }, children) : import_react135.default.createElement(StyledTableDataCell, {
    align,
    display,
    verticalAlign,
    width,
    withBorder,
    withPadding
  }, children);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Row/styled.js
var StyledTableRow = styled_components_browser_esm_default.tr.withConfig({
  displayName: "styled__StyledTableRow",
  componentId: "sc-xq0hr0-0"
})(["", " display:", ";background-color:", ";&:hover{background-color:", ";}"], withTransition(["background-color"]), (_ref) => {
  let {
    isDragging
  } = _ref;
  return isDragging ? "table" : "table-row";
}, (_ref2) => {
  let {
    isSelected,
    theme: theme2
  } = _ref2;
  return isSelected ? theme2.colors.primary10 : "transparent";
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.secondary10;
});
StyledTableRow.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Row/Row.js
var InternalRow = (_ref) => {
  let {
    columns,
    forwardedRef,
    headerCellWidths,
    isDragging = false,
    isSelectable = false,
    isSelected = false,
    item,
    showDragIcon = false,
    onItemSelect,
    ...rest
  } = _ref;
  const onChange = () => {
    if (onItemSelect) {
      onItemSelect(item);
    }
  };
  const label = isSelected ? `Selected` : `Unselected`;
  return import_react136.default.createElement(StyledTableRow, _extends({
    isDragging,
    isSelected,
    ref: forwardedRef
  }, rest), showDragIcon && import_react136.default.createElement(DataCell, {
    width: headerCellWidths[0]
  }, import_react136.default.createElement(DragIndicatorIcon, null)), isSelectable && import_react136.default.createElement(DataCell, {
    isCheckbox: true,
    key: "data-checkbox"
  }, import_react136.default.createElement(Checkbox, {
    checked: isSelected,
    hiddenLabel: true,
    label,
    onChange
  })), columns.map((_ref2, columnIndex) => {
    let {
      render: CellContent,
      align,
      display,
      verticalAlign,
      width,
      withPadding = true
    } = _ref2;
    const cellWidth = headerCellWidths[columnIndex + 1];
    return import_react136.default.createElement(DataCell, {
      align,
      display,
      key: columnIndex,
      verticalAlign,
      width: isDragging ? cellWidth : width,
      withPadding
    }, import_react136.default.createElement(CellContent, item));
  }));
};
var Row = typedMemo((0, import_react136.forwardRef)((props, ref2) => import_react136.default.createElement(InternalRow, _extends({}, props, {
  forwardedRef: ref2
}))));

// node_modules/@bigcommerce/big-design/dist/es/components/Table/styled.js
var StyledTableFigure = styled_components_browser_esm_default.figure.withConfig({
  displayName: "styled__StyledTableFigure",
  componentId: "sc-xns2ns-0"
})(["margin:0;max-width:100%;overflow-x:auto;white-space:nowrap;", "{white-space:normal;}", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.breakpoints.tablet;
}, withMargins());
var StyledTable = styled_components_browser_esm_default.table.withConfig({
  displayName: "styled__StyledTable",
  componentId: "sc-xns2ns-1"
})(["border-color:transparent;border-spacing:0;color:", ";text-align:left;width:100%;"], (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.secondary70;
});
StyledTableFigure.defaultProps = {
  theme
};
StyledTable.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Table/Table.js
var InternalTable = (props) => {
  const {
    actions,
    className,
    columns,
    emptyComponent,
    headerless = false,
    id,
    itemName,
    items,
    keyField = "id",
    onRowDrop,
    pagination,
    selectable,
    sortable,
    stickyHeader,
    style: style2,
    ...rest
  } = props;
  const actionsRef = (0, import_react137.useRef)(null);
  const uniqueTableId = (0, import_react137.useId)();
  const tableIdRef = (0, import_react137.useRef)(id || uniqueTableId);
  const isSelectable = Boolean(selectable);
  const [selectedItems, setSelectedItems] = (0, import_react137.useState)(/* @__PURE__ */ new Set());
  const [headerCellWidths, setHeaderCellWidths] = (0, import_react137.useState)([]);
  const headerCellIconRef = (0, import_react137.useRef)(null);
  const eventCallback = useEventCallback((item) => {
    if (!selectable || !item) {
      return;
    }
    const {
      onSelectionChange
    } = selectable;
    const nextIsSelected = !selectedItems.has(item);
    if (nextIsSelected) {
      onSelectionChange([...selectedItems, item]);
    } else {
      onSelectionChange([...selectedItems].filter((selectedItem) => selectedItem !== item));
    }
  });
  const selectableConditionalDep = selectable ? selectable.selectedItems : null;
  (0, import_react137.useEffect)(() => {
    if (selectable) {
      setSelectedItems(new Set(selectable.selectedItems));
    }
  }, [selectable, selectableConditionalDep]);
  const onItemSelect = selectable ? eventCallback : void 0;
  const onSortClick = (0, import_react137.useCallback)((column) => {
    if (!sortable || !column.isSortable) {
      return;
    }
    const {
      hash
    } = column;
    const sortDirection = sortable.direction === "ASC" ? "DESC" : "ASC";
    if (typeof sortable.onSort === "function") {
      sortable.onSort(hash, sortDirection, column);
    }
  }, [sortable]);
  const onDragEnd3 = (0, import_react137.useCallback)((result) => {
    const {
      destination,
      source
    } = result;
    if (!destination) {
      return;
    }
    if (destination.droppableId === source.droppableId && destination.index === source.index) {
      return;
    }
    if (typeof onRowDrop === "function") {
      onRowDrop(source.index, destination.index);
    }
    setHeaderCellWidths([]);
  }, [onRowDrop]);
  const onBeforeDragStart = () => {
    var _a;
    const headerCellIconWidth = ((_a = headerCellIconRef.current) == null ? void 0 : _a.offsetWidth) ?? "auto";
    const headerCellsWidths = columns.map((_column, index) => {
      const headerCellElement = window.document.getElementById(`header-cell-${index}`);
      return (headerCellElement == null ? void 0 : headerCellElement.getBoundingClientRect().width) ?? "auto";
    });
    const allHeaderWidths = [headerCellIconWidth, ...headerCellsWidths];
    setHeaderCellWidths(allHeaderWidths);
  };
  const shouldRenderActions = () => {
    return Boolean(actions) || Boolean(pagination) || Boolean(selectable) || Boolean(itemName);
  };
  const getItemKey = (item, index) => {
    if (item[keyField] !== void 0) {
      return item[keyField];
    }
    return index;
  };
  const renderHeaders = () => import_react137.default.createElement(Head, {
    hidden: headerless
  }, import_react137.default.createElement("tr", null, typeof onRowDrop === "function" && import_react137.default.createElement(DragIconHeaderCell, {
    actionsRef,
    headerCellIconRef
  }), isSelectable && import_react137.default.createElement(HeaderCheckboxCell, {
    actionsRef,
    stickyHeader
  }), columns.map((column, index) => {
    const {
      display,
      hash,
      header,
      isSortable,
      hideHeader,
      width
    } = column;
    const isSorted = isSortable && sortable && hash === sortable.columnHash;
    const sortDirection = sortable && sortable.direction;
    const headerCellWidth = headerCellWidths[index + 1];
    const widthColumn = headerCellWidth ?? width;
    return import_react137.default.createElement(HeaderCell, {
      actionsRef,
      column: {
        ...column,
        width: widthColumn
      },
      display,
      hide: hideHeader,
      id: `header-cell-${index}`,
      isSorted,
      key: index,
      onSortClick,
      sortDirection,
      stickyHeader
    }, header);
  })));
  const renderDroppableItems = () => import_react137.default.createElement(ConnectedDroppable, {
    droppableId: `${uniqueTableId}-bd-droppable`
  }, (provided) => import_react137.default.createElement(Body, _extends({
    ref: provided.innerRef,
    withFirstRowBorder: headerless
  }, provided.droppableProps), items.map((item, index) => {
    const key = getItemKey(item, index);
    const isSelected = selectedItems.has(item);
    return import_react137.default.createElement(PublicDraggable, {
      draggableId: String(key),
      index,
      key
    }, (provided2, snapshot) => import_react137.default.createElement(Row, _extends({
      isDragging: snapshot.isDragging
    }, provided2.dragHandleProps, provided2.draggableProps, {
      columns,
      headerCellWidths,
      isSelectable,
      isSelected,
      item,
      onItemSelect,
      ref: provided2.innerRef,
      showDragIcon: true
    })));
  }), provided.placeholder));
  const renderItems = () => onRowDrop ? renderDroppableItems() : import_react137.default.createElement(Body, {
    withFirstRowBorder: headerless
  }, items.map((item, index) => {
    const key = getItemKey(item, index);
    const isSelected = selectedItems.has(item);
    return import_react137.default.createElement(Row, {
      columns,
      headerCellWidths,
      isSelectable,
      isSelected,
      item,
      key,
      onItemSelect
    });
  }));
  const renderEmptyState = () => {
    if (items.length === 0 && emptyComponent) {
      return emptyComponent;
    }
    return null;
  };
  return import_react137.default.createElement(import_react137.default.Fragment, null, shouldRenderActions() && import_react137.default.createElement(Actions, {
    customActions: actions,
    forwardedRef: actionsRef,
    itemName,
    items,
    onSelectionChange: selectable && selectable.onSelectionChange,
    pagination,
    selectedItems,
    stickyHeader,
    tableId: tableIdRef.current
  }), import_react137.default.createElement(StyledTable, _extends({}, rest, {
    id: tableIdRef.current
  }), onRowDrop ? import_react137.default.createElement(DragDropContext, {
    onBeforeDragStart,
    onDragEnd: onDragEnd3
  }, renderHeaders(), renderItems()) : import_react137.default.createElement(import_react137.default.Fragment, null, renderHeaders(), renderItems())), renderEmptyState());
};
var Table = typedMemo(InternalTable);
var TableFigure = (0, import_react137.memo)((props) => import_react137.default.createElement(StyledTableFigure, props));

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTable/reducer.js
var createReducerInit = () => (_ref) => {
  let {
    columns,
    defaultSelected,
    items,
    pagination
  } = _ref;
  const currentPage = 1;
  const itemsPerPage = 25;
  const currentItems = getItems(items, pagination, {
    currentPage,
    itemsPerPage
  });
  return {
    activePills: [],
    currentItems,
    columns: augmentColumns(columns),
    filteredItems: [],
    isPaginationEnabled: pagination,
    items,
    pagination: {
      currentPage,
      itemsPerPage,
      itemsPerPageOptions: [25, 50, 100, 250],
      totalItems: items.length
    },
    searchValue: "",
    submittedSearchValue: "",
    selectedItems: defaultSelected,
    sortable: {
      direction: "ASC"
    }
  };
};
var createReducer = () => (state, action) => {
  switch (action.type) {
    case "COLUMNS_CHANGED": {
      const columns = action.columns;
      return {
        ...state,
        columns: augmentColumns(columns)
      };
    }
    case "ITEMS_CHANGED": {
      const currentPage = 1;
      const items = action.items;
      const isPaginationEnabled = action.isPaginationEnabled;
      const currentItems = getItems(items, isPaginationEnabled, {
        currentPage,
        itemsPerPage: state.pagination.itemsPerPage
      });
      const selectedItems = state.selectedItems.filter((item) => items.includes(item));
      return {
        ...state,
        currentItems,
        isPaginationEnabled,
        items,
        selectedItems,
        pagination: {
          ...state.pagination,
          currentPage,
          totalItems: items.length
        },
        sortable: {
          direction: state.sortable.direction
        }
      };
    }
    case "PAGE_CHANGE": {
      const filtersActive = state.activePills.length > 0 || !!state.searchValue;
      const items = filtersActive ? state.filteredItems : state.items;
      const currentPage = action.page;
      const currentItems = getItems(items, true, {
        currentPage,
        itemsPerPage: state.pagination.itemsPerPage
      });
      return {
        ...state,
        currentItems,
        pagination: {
          ...state.pagination,
          currentPage
        }
      };
    }
    case "ITEMS_PER_PAGE_CHANGE": {
      const currentPage = 1;
      const itemsPerPage = action.itemsPerPage;
      const currentItems = getItems(state.items, true, {
        currentPage,
        itemsPerPage
      });
      return {
        ...state,
        currentItems,
        pagination: {
          ...state.pagination,
          currentPage,
          itemsPerPage
        }
      };
    }
    case "SEARCH_VALUE_CHANGE": {
      return {
        ...state,
        searchValue: action.value
      };
    }
    case "SELECTED_ITEMS": {
      return {
        ...state,
        selectedItems: action.selectedItems
      };
    }
    case "SET_PILL_TABS_PROPS": {
      return {
        ...state,
        pillTabsProps: action.pillTabsProps
      };
    }
    case "SORT": {
      const {
        hash,
        sortFn,
        sortKey
      } = action.column;
      const direction = action.direction;
      if (!sortKey && !sortFn) {
        return state;
      }
      const items = sortKey ? sort(state.items, direction, sortKey) : sortFn ? sort(state.items, direction, sortFn) : state.items;
      const currentItems = getItems(items, state.isPaginationEnabled, {
        currentPage: 1,
        itemsPerPage: state.pagination.itemsPerPage
      });
      return {
        ...state,
        currentItems,
        items,
        pagination: {
          ...state.pagination,
          currentPage: 1
        },
        sortable: {
          direction,
          columnHash: hash
        }
      };
    }
    case "TOGGLE_PILL": {
      if (!state.pillTabsProps) {
        return state;
      }
      const activePills = getActivePills(state.pillTabsProps.items, state.activePills, action.pillId);
      let currentItems = togglePill(state.items, activePills, action.filter);
      if (state.submittedSearchValue) {
        currentItems = onSearchSubmit(currentItems, state.submittedSearchValue, state.columns);
      }
      return {
        ...state,
        activePills,
        pagination: {
          ...state.pagination,
          currentPage: 1,
          totalItems: currentItems.length
        },
        currentItems,
        filteredItems: currentItems
      };
    }
    case "ON_SEARCH_SUBMIT": {
      const {
        searchValue,
        activePills
      } = state;
      let currentItems = state.items;
      if (activePills.length > 0 && action.filterPills) {
        currentItems = togglePill(currentItems, activePills, action.filterPills);
      }
      if (searchValue) {
        currentItems = onSearchSubmit(currentItems, searchValue, state.columns);
      }
      return {
        ...state,
        pagination: {
          ...state.pagination,
          currentPage: 1,
          totalItems: currentItems.length
        },
        currentItems,
        filteredItems: currentItems,
        submittedSearchValue: searchValue
      };
    }
    default:
      return state;
  }
};
function augmentColumns(columns) {
  return columns.map((column) => ({
    ...column,
    isSortable: Boolean(column.sortKey || column.sortFn)
  }));
}
function getItems(items, isPaginationEnabled, paginationOptions) {
  if (!isPaginationEnabled) {
    return items;
  }
  const maxItems = paginationOptions.currentPage * paginationOptions.itemsPerPage;
  const lastItem = Math.min(maxItems, items.length);
  const firstItem = Math.max(0, maxItems - paginationOptions.itemsPerPage);
  return items.slice(firstItem, lastItem);
}
function sort(items, direction, sortKeyOrFn) {
  return [...items].sort((firstItem, secondItem) => {
    if (typeof sortKeyOrFn === "function") {
      return sortKeyOrFn(firstItem, secondItem, direction);
    }
    const sortKey = sortKeyOrFn;
    const firstValue = firstItem[sortKey];
    const secondValue = secondItem[sortKey];
    if (typeof firstValue === "number" && typeof secondValue === "number") {
      return direction === "ASC" ? firstValue - secondValue : secondValue - firstValue;
    }
    const firstValueString = String(firstValue);
    const secondValueString = String(secondValue);
    return direction === "ASC" ? firstValueString.localeCompare(secondValueString) : secondValueString.localeCompare(firstValueString);
  });
}
function getActivePills(pillTabs, activePills, pillId) {
  const toggledPill = pillTabs.find((pill) => pill.id === pillId);
  if (!toggledPill) {
    return activePills;
  }
  const isToggledPillActive = !activePills.includes(pillId);
  return isToggledPillActive ? [...activePills, toggledPill.id] : activePills.filter((activeFilter) => activeFilter !== toggledPill.id);
}
function togglePill(items, activePills, filter) {
  return activePills.length > 0 ? activePills.map((pillId) => {
    return filter(pillId, items);
  }).reduce((results, filteredItems) => {
    const dedupedItems = filteredItems.filter((item) => !results.includes(item));
    return [...results, ...dedupedItems];
  }, []) : items;
}
var checkInclude = (searchValue, str) => str.toLowerCase().trim().includes(searchValue.toLowerCase().trim());
function onSearchSubmit(items, searchValue, columns) {
  return items.filter((item) => columns.some((column) => {
    const element = item[column.hash];
    switch (typeof element) {
      case "string":
      case "number":
      case "boolean":
        return checkInclude(searchValue, element.toString());
      default:
    }
  }));
}

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTable/StatefulTable.js
var swapArrayElements = (array, sourceIndex, destinationIndex) => {
  const smallerIndex = Math.min(sourceIndex, destinationIndex);
  const largerIndex = Math.max(sourceIndex, destinationIndex);
  return [...array.slice(0, smallerIndex), ...sourceIndex < destinationIndex ? array.slice(smallerIndex + 1, largerIndex + 1) : [], array[sourceIndex], ...sourceIndex > destinationIndex ? array.slice(smallerIndex, largerIndex) : [], ...array.slice(largerIndex + 1)];
};
var InternalStatefulTable = (_ref) => {
  let {
    columns = [],
    defaultSelected = [],
    itemName,
    items = [],
    keyField,
    onSelectionChange,
    onRowDrop,
    search,
    pagination = false,
    filters,
    selectable = false,
    stickyHeader = false,
    ...rest
  } = _ref;
  const reducer2 = (0, import_react138.useMemo)(() => createReducer(), []);
  const reducerInit = (0, import_react138.useMemo)(() => createReducerInit(), []);
  const sortable = (0, import_react138.useMemo)(() => columns.some((column) => column.sortKey || column.sortFn), [columns]);
  const [state, dispatch] = (0, import_react138.useReducer)(reducer2, {
    columns,
    defaultSelected,
    items,
    pagination,
    filters,
    search
  }, reducerInit);
  const columnsChangedCallback = (0, import_react138.useCallback)(() => dispatch({
    type: "COLUMNS_CHANGED",
    columns
  }), [columns]);
  const itemsChangedCallback = (0, import_react138.useCallback)(() => dispatch({
    type: "ITEMS_CHANGED",
    items,
    isPaginationEnabled: pagination
  }), [items, pagination]);
  useDidUpdate(columnsChangedCallback);
  useDidUpdate(itemsChangedCallback);
  const onPageChange = (0, import_react138.useCallback)((page) => dispatch({
    type: "PAGE_CHANGE",
    page
  }), []);
  const onItemsPerPageChange = (0, import_react138.useCallback)((itemsPerPage) => dispatch({
    type: "ITEMS_PER_PAGE_CHANGE",
    itemsPerPage
  }), []);
  const onItemSelect = (0, import_react138.useCallback)((selectedItems) => {
    dispatch({
      type: "SELECTED_ITEMS",
      selectedItems
    });
    if (typeof onSelectionChange === "function") {
      onSelectionChange(selectedItems);
    }
  }, [onSelectionChange]);
  const onSort = (0, import_react138.useCallback)((_columnHash, direction, column) => {
    dispatch({
      type: "SORT",
      column,
      direction
    });
  }, []);
  const paginationOptions = (0, import_react138.useMemo)(() => pagination ? {
    ...state.pagination,
    onItemsPerPageChange,
    onPageChange
  } : void 0, [pagination, state.pagination, onItemsPerPageChange, onPageChange]);
  const selectableOptions = (0, import_react138.useMemo)(() => selectable ? {
    selectedItems: state.selectedItems,
    onSelectionChange: onItemSelect
  } : void 0, [selectable, state.selectedItems, onItemSelect]);
  const sortableOptions = (0, import_react138.useMemo)(() => sortable ? {
    ...state.sortable,
    onSort
  } : void 0, [sortable, state.sortable, onSort]);
  const onDragEnd3 = (0, import_react138.useCallback)((from, to) => {
    const updatedItems = swapArrayElements(state.currentItems, from, to);
    dispatch({
      type: "ITEMS_CHANGED",
      items: updatedItems,
      isPaginationEnabled: pagination
    });
    if (typeof onRowDrop === "function") {
      onRowDrop(updatedItems);
    }
  }, [state.currentItems, onRowDrop, pagination]);
  (0, import_react138.useEffect)(() => {
    if (!filters) {
      return;
    }
    const pillTabsProps = {
      activePills: state.activePills,
      onPillClick: (pillId) => {
        dispatch({
          type: "TOGGLE_PILL",
          pillId,
          filter: filters.filter
        });
      },
      items: filters.pillTabs
    };
    dispatch({
      type: "SET_PILL_TABS_PROPS",
      pillTabsProps
    });
  }, [filters, state.activePills, search]);
  const searchProps = (0, import_react138.useMemo)(() => search ? {
    value: state.searchValue,
    onChange: (e4) => dispatch({
      type: "SEARCH_VALUE_CHANGE",
      value: e4.target.value
    }),
    onSubmit: () => dispatch({
      type: "ON_SEARCH_SUBMIT",
      filterPills: filters == null ? void 0 : filters.filter
    })
  } : void 0, [search, state.searchValue, filters]);
  const renderPills = () => {
    if (!filters || !state.pillTabsProps) {
      return null;
    }
    return import_react138.default.createElement(Box, {
      marginBottom: "medium"
    }, import_react138.default.createElement(PillTabs, state.pillTabsProps));
  };
  const renderSearch = () => {
    if (!search || !searchProps) {
      return;
    }
    return import_react138.default.createElement(Box, {
      marginBottom: "medium"
    }, import_react138.default.createElement(Search, searchProps));
  };
  return import_react138.default.createElement(import_react138.default.Fragment, null, renderPills(), renderSearch(), import_react138.default.createElement(Table, _extends({}, rest, {
    columns: state.columns,
    itemName,
    items: state.currentItems,
    keyField,
    onRowDrop: onRowDrop ? onDragEnd3 : void 0,
    pagination: paginationOptions,
    selectable: selectableOptions,
    sortable: sortableOptions,
    stickyHeader
  })));
};
var StatefulTable = typedMemo(InternalStatefulTable);

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/StatefulTree.js
var import_react147 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/hooks/useNodeMap.js
var import_react139 = __toESM(require_react());
var getParentId = (nodeMap, id) => {
  const iterator = nodeMap.entries();
  for (const [, value] of iterator) {
    if (value.children && value.children.includes(id)) {
      return value.id;
    }
  }
};
var buildNodeMap = (_ref) => {
  let {
    nodes,
    nodeMap
  } = _ref;
  if (!nodes || nodes.length < 1) {
    return nodeMap;
  }
  return nodes.reduce((acc, node) => {
    var _a;
    const parent = getParentId(acc, node.id);
    acc.set(node.id, {
      children: ((_a = node.children) == null ? void 0 : _a.map((child) => child.id)) ?? [],
      id: node.id,
      parent
    });
    if (node.children && node.children.length > 0) {
      return buildNodeMap({
        nodes: node.children,
        nodeMap: acc
      });
    }
    return acc;
  }, nodeMap);
};
var useNodeMap = (_ref2) => {
  let {
    nodes
  } = _ref2;
  return (0, import_react139.useMemo)(() => buildNodeMap({
    nodes,
    nodeMap: /* @__PURE__ */ new Map()
  }), [nodes]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/hooks/useTreeKeyEvents.js
var getNextVisibleNode = (visibleNodeIds, id) => {
  const index = visibleNodeIds.indexOf(id);
  if (index !== -1 && index + 1 < visibleNodeIds.length) {
    return visibleNodeIds[index + 1];
  }
  return id;
};
var getPreviousVisibleNode = (visibleNodeIds, id) => {
  const index = visibleNodeIds.indexOf(id);
  if (index !== -1 && index - 1 >= 0) {
    return visibleNodeIds[index - 1];
  }
  return id;
};
var useTreeKeyEvents = (_ref) => {
  let {
    onFocus,
    onSelect,
    onToggle,
    nodeMap,
    visibleNodes
  } = _ref;
  const onKeyDown = (e4, _ref2) => {
    var _a;
    let {
      id,
      isExpanded,
      isSelectable,
      hasChildren,
      value
    } = _ref2;
    const key = e4.key;
    if (e4.altKey || e4.currentTarget !== e4.target) {
      return;
    }
    switch (key) {
      case " ":
        e4.preventDefault();
        e4.stopPropagation();
        if (isSelectable && onSelect) {
          onSelect(id, value);
        }
        break;
      case "Enter":
        e4.preventDefault();
        e4.stopPropagation();
        if (hasChildren) {
          if (onToggle) {
            onToggle(id, isExpanded);
          }
        } else if (isSelectable && onSelect) {
          onSelect(id, value);
        }
        break;
      case "ArrowDown":
        e4.preventDefault();
        onFocus(getNextVisibleNode(visibleNodes, id));
        break;
      case "ArrowUp":
        e4.preventDefault();
        onFocus(getPreviousVisibleNode(visibleNodes, id));
        break;
      case "ArrowRight":
        e4.preventDefault();
        if (hasChildren) {
          if (isExpanded) {
            onFocus(getNextVisibleNode(visibleNodes, id));
          } else if (onToggle) {
            onToggle(id, isExpanded);
          }
        }
        break;
      case "ArrowLeft":
        e4.preventDefault();
        if (hasChildren) {
          if (isExpanded) {
            if (onToggle) {
              onToggle(id, isExpanded);
            }
            break;
          }
        }
        if (((_a = nodeMap.get(id)) == null ? void 0 : _a.parent) !== void 0) {
          onFocus(getPreviousVisibleNode(visibleNodes, id));
        }
        break;
      case "Home":
        e4.preventDefault();
        onFocus(visibleNodes[0]);
        break;
      case "End":
        e4.preventDefault();
        onFocus(visibleNodes[visibleNodes.length - 1]);
        break;
      default:
        break;
    }
  };
  return onKeyDown;
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/Tree.js
var import_react142 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/styled.js
var StyledUl = styled_components_browser_esm_default.ul.withConfig({
  displayName: "styled__StyledUl",
  componentId: "sc-6366r7-0"
})(["list-style-type:none;margin:0;padding:0;user-select:none;> li > ul{padding-left:", ";}", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.helpers.addValues(theme2.spacing.xLarge, theme2.spacing.xxSmall);
}, (_ref2) => {
  let {
    show
  } = _ref2;
  return show === false && Ae(["display:none;"]);
});
StyledUl.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/TreeNode/TreeNode.js
var import_react141 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/hooks/useSelectedChildrenCount.js
var import_react140 = __toESM(require_react());
var useSelectedChildrenCount = (_ref) => {
  let {
    selectedNodes,
    children
  } = _ref;
  return (0, import_react140.useMemo)(() => {
    if ((children == null ? void 0 : children.length) && selectedNodes) {
      const selectedChildren = depthFirstSearch(children, (node) => selectedNodes.some((selected) => selected === node.id), false);
      return selectedChildren ? selectedChildren.length : 0;
    }
    return 0;
  }, [children, selectedNodes]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/TreeNode/styled.js
var StyledLi = styled_components_browser_esm_default.li.withConfig({
  displayName: "styled__StyledLi",
  componentId: "sc-1073t7q-0"
})(["outline:0;"]);
var StyledArrowWrapper = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledArrowWrapper",
  componentId: "sc-1073t7q-1"
})(["z-index:1;", ";"], (_ref) => {
  let {
    expanded
  } = _ref;
  return expanded && Ae(["transform:rotate(90deg);"]);
});
var StyledSelectableWrapper = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledSelectableWrapper",
  componentId: "sc-1073t7q-2"
})(["padding:1px;z-index:1;"]);
var sharedAfterStyles = Ae(["bottom:0;content:'';left:-1000px;right:0;position:absolute;top:0;z-index:0;"]);
var StyledFlex4 = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledFlex",
  componentId: "sc-1073t7q-3"
})(["cursor:pointer;min-height:", ";position:relative;li:focus > &,&:hover{&::after{", " background-color:", ";}}label,svg{vertical-align:middle;}", ""], (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.helpers.addValues(theme2.spacing.xxLarge, theme2.spacing.xSmall);
}, sharedAfterStyles, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.secondary10;
}, (_ref4) => {
  let {
    theme: theme2,
    selected
  } = _ref4;
  return selected && Ae(["&::after{", " background-color:", ";}"], sharedAfterStyles, theme2.colors.primary10);
});
var StyledFlexItem4 = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledFlexItem",
  componentId: "sc-1073t7q-4"
})(["z-index:1;"]);
var StyledGap = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__StyledGap",
  componentId: "sc-1073t7q-5"
})(["flex-shrink:0;height:", ";width:", ";"], (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.spacing.xLarge;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.spacing.xLarge;
});
var StyledText3 = styled_components_browser_esm_default(StyleableText).withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-1073t7q-6"
})(["z-index:1;"]);
StyledArrowWrapper.defaultProps = {
  theme
};
StyledFlex4.defaultProps = {
  theme
};
StyledGap.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/TreeNode/TreeNode.js
var flexItemProps = {
  flexShrink: 0,
  marginLeft: "xxSmall"
};
var InternalTreeNode = (_ref) => {
  var _a;
  let {
    children,
    icon,
    label,
    value,
    id
  } = _ref;
  const {
    disabledNodes,
    expandable,
    focusable: focusable3,
    iconless,
    onKeyDown,
    onNodeClick,
    selectable,
    treeRef
  } = (0, import_react141.useContext)(TreeContext);
  const nodeRef = (0, import_react141.useRef)(null);
  const selectableRef = (0, import_react141.useRef)(null);
  const isExpanded = expandable.expandedNodes.includes(id);
  const isSelected = (_a = selectable == null ? void 0 : selectable.selectedNodes) == null ? void 0 : _a.includes(id);
  const isDisabled = disabledNodes == null ? void 0 : disabledNodes.includes(id);
  const isSelectable = value !== void 0 && (selectable == null ? void 0 : selectable.type) !== void 0 && !isDisabled;
  const selectedChildrenCount = useSelectedChildrenCount({
    selectedNodes: selectable == null ? void 0 : selectable.selectedNodes,
    children
  });
  (0, import_react141.useEffect)(() => {
    var _a2, _b;
    if (focusable3.focusedNode === id && nodeRef.current !== document.activeElement && document.activeElement !== document.body && ((_a2 = treeRef.current) == null ? void 0 : _a2.contains(document.activeElement))) {
      (_b = nodeRef.current) == null ? void 0 : _b.focus();
    }
  }, [focusable3, id, treeRef]);
  const handleNodeToggle = (0, import_react141.useCallback)(async (e4) => {
    var _a2;
    if ((e4 == null ? void 0 : e4.target) instanceof Node && ((_a2 = selectableRef.current) == null ? void 0 : _a2.contains(e4.target)) || children === void 0) {
      return;
    }
    if (typeof expandable.onToggle === "function") {
      expandable.onToggle(id, isExpanded);
    }
    if (isExpanded) {
      if (typeof expandable.onCollapse === "function") {
        expandable.onCollapse(id);
      }
    } else if (typeof expandable.onExpand === "function") {
      expandable.onExpand(id);
    }
  }, [children, id, expandable, isExpanded]);
  const handleNodeSelected = (0, import_react141.useCallback)(() => {
    if (!isSelectable) {
      return;
    }
    if (typeof selectable.onSelect === "function") {
      selectable.onSelect(id, value);
    }
  }, [id, isSelectable, selectable, value]);
  const handleKeyEvent = (0, import_react141.useCallback)((e4) => {
    if (e4.altKey || e4.currentTarget !== e4.target) {
      return;
    }
    onKeyDown(e4, {
      id,
      isExpanded,
      isSelectable,
      hasChildren: !!(children == null ? void 0 : children.length),
      value
    });
  }, [children, id, isExpanded, isSelectable, onKeyDown, value]);
  const handleNodeClick = (0, import_react141.useCallback)((e4) => {
    e4.stopPropagation();
    if (typeof focusable3.onFocus === "function") {
      focusable3.onFocus(id);
    }
    if (typeof onNodeClick === "function") {
      onNodeClick(e4, id);
    }
  }, [focusable3, id, onNodeClick]);
  const additionalProps = (0, import_react141.useMemo)(() => (selectable == null ? void 0 : selectable.type) ? {
    "aria-selected": isSelected
  } : {}, [selectable, isSelected]);
  const renderedArrow = (0, import_react141.useMemo)(() => children ? import_react141.default.createElement(StyledArrowWrapper, {
    expanded: isExpanded,
    flexShrink: 0
  }, import_react141.default.createElement(ChevronRightIcon, {
    color: "secondary60",
    focusable: false,
    size: "xLarge"
  })) : import_react141.default.createElement(StyledGap, null), [children, isExpanded]);
  const renderedChildren = (0, import_react141.useMemo)(() => children && import_react141.default.createElement(StyledUl, {
    role: "group",
    show: isExpanded
  }, children.map((child, index) => import_react141.default.createElement(TreeNode, _extends({}, child, {
    key: index
  })))), [children, isExpanded]);
  const renderedIcon = (0, import_react141.useMemo)(() => {
    if (iconless) {
      return null;
    }
    return icon ? import_react141.default.createElement(StyledFlexItem4, flexItemProps, icon) : import_react141.default.createElement(StyledFlexItem4, flexItemProps, import_react141.default.createElement(FolderIcon, {
      color: isDisabled ? "primary20" : "primary30",
      size: "xLarge"
    }));
  }, [isDisabled, icon, iconless]);
  const renderedSelectable = (0, import_react141.useMemo)(() => {
    if (value === void 0 || !(selectable == null ? void 0 : selectable.type)) {
      return null;
    }
    if (selectable.type === "radio") {
      return import_react141.default.createElement(StyledSelectableWrapper, flexItemProps, import_react141.default.createElement(StyledRadio, {
        "aria-hidden": true,
        checked: isSelected,
        disabled: isDisabled,
        onClick: handleNodeSelected,
        ref: selectableRef
      }));
    }
    if (selectable.type === "multi") {
      return import_react141.default.createElement(StyledSelectableWrapper, flexItemProps, import_react141.default.createElement(StyledCheckbox, {
        "aria-hidden": true,
        checked: isSelected,
        disabled: isDisabled,
        onClick: handleNodeSelected,
        ref: selectableRef
      }, isSelected ? import_react141.default.createElement(CheckIcon, null) : null));
    }
  }, [isDisabled, handleNodeSelected, isSelected, selectable, value]);
  return (0, import_react141.useMemo)(() => import_react141.default.createElement(StyledLi, _extends({
    "aria-expanded": isExpanded,
    onClick: handleNodeClick,
    onKeyDown: handleKeyEvent,
    ref: nodeRef,
    role: "treeitem",
    tabIndex: focusable3.focusedNode === id ? 0 : -1
  }, additionalProps), import_react141.default.createElement(StyledFlex4, {
    alignItems: "center",
    flexDirection: "row",
    onClick: handleNodeToggle,
    selected: isSelected
  }, renderedArrow, renderedSelectable, renderedIcon, import_react141.default.createElement(StyledText3, {
    as: "span",
    color: isDisabled ? "secondary50" : "secondary70",
    ellipsis: true,
    marginLeft: "xxSmall"
  }, label, selectedChildrenCount ? import_react141.default.createElement(StyledText3, {
    as: "span",
    color: "primary"
  }, " ", "(", selectedChildrenCount, ")") : null)), renderedChildren), [additionalProps, handleKeyEvent, handleNodeClick, handleNodeToggle, id, isDisabled, isExpanded, isSelected, focusable3, label, renderedArrow, renderedChildren, renderedSelectable, renderedIcon, selectedChildrenCount]);
};
var TreeNode = typedMemo(InternalTreeNode);

// node_modules/@bigcommerce/big-design/dist/es/components/Tree/Tree.js
var TreeContext = (0, import_react142.createContext)({
  expandable: {
    expandedNodes: []
  },
  focusable: {
    focusedNode: "",
    onFocus: () => null
  },
  onKeyDown: () => null,
  treeRef: {
    current: null
  }
});
var Tree = (_ref) => {
  let {
    disabledNodes,
    expandable,
    focusable: focusable3,
    iconless,
    id,
    nodes,
    onKeyDown,
    onNodeClick,
    selectable
  } = _ref;
  const treeRef = (0, import_react142.useRef)(null);
  const initialTreeContext = {
    disabledNodes,
    expandable,
    focusable: focusable3,
    iconless,
    onKeyDown,
    onNodeClick,
    selectable,
    treeRef
  };
  const renderedItems = (0, import_react142.useMemo)(() => nodes.map((node, index) => import_react142.default.createElement(TreeNode, _extends({}, node, {
    key: index
  }))), [nodes]);
  return import_react142.default.createElement(TreeContext.Provider, {
    value: initialTreeContext
  }, import_react142.default.createElement(StyledUl, {
    "aria-multiselectable": (selectable == null ? void 0 : selectable.type) === "multi",
    id,
    ref: treeRef,
    role: "tree",
    style: {
      overflow: "hidden"
    }
  }, renderedItems));
};

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/hooks/useExpandable.js
var import_react143 = __toESM(require_react());
var useExpandable = (_ref) => {
  let {
    defaultExpanded,
    onExpandedChange
  } = _ref;
  const [expandedNodes, setExpandedNodes] = (0, import_react143.useState)(defaultExpanded ?? []);
  (0, import_react143.useEffect)(() => {
    if (defaultExpanded) {
      setExpandedNodes(defaultExpanded);
    }
  }, [defaultExpanded]);
  (0, import_react143.useEffect)(() => {
    if (typeof onExpandedChange === "function") {
      onExpandedChange(expandedNodes);
    }
  }, [expandedNodes, onExpandedChange]);
  const onExpand = (nodeId) => {
    setExpandedNodes([...expandedNodes, nodeId]);
  };
  const onCollapse = (nodeId) => {
    setExpandedNodes((prevNodes) => prevNodes.filter((node) => node !== nodeId));
  };
  const onToggle = (nodeId, isExpanded) => {
    if (isExpanded) {
      onCollapse(nodeId);
    } else {
      onExpand(nodeId);
    }
  };
  return {
    expandedNodes,
    onToggle
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/hooks/useFocusable.js
var import_react144 = __toESM(require_react());
var useFocusable = (_ref) => {
  let {
    nodes,
    type,
    defaultSelected
  } = _ref;
  const [focusedNode, setFocusedNode] = (0, import_react144.useState)(type && (defaultSelected == null ? void 0 : defaultSelected.length) ? defaultSelected[0] : nodes[0].id);
  const onFocus = (nodeId) => {
    setFocusedNode(nodeId);
  };
  return {
    focusedNode,
    onFocus
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/hooks/useSelectable.js
var import_react145 = __toESM(require_react());
var getDefaultSelectedValues = (_ref) => {
  var _a;
  let {
    nodes,
    selectedNodes,
    type
  } = _ref;
  if (type === "radio") {
    const selectedNode = depthFirstSearch(nodes, (_ref2) => {
      let {
        id,
        value
      } = _ref2;
      return selectedNodes.includes(id) && value !== void 0;
    });
    if (selectedNode && selectedNode.value !== void 0) {
      return [selectedNode.value];
    }
  }
  if (type === "multi") {
    return ((_a = depthFirstSearch(nodes, (_ref3) => {
      let {
        id,
        value
      } = _ref3;
      return selectedNodes.includes(id) && value !== void 0;
    }, false)) == null ? void 0 : _a.reduce((acc, node) => node.value !== void 0 ? [...acc, node.value] : acc, [])) ?? [];
  }
  return [];
};
var useSelectable = (_ref4) => {
  let {
    defaultSelected,
    disabledNodes,
    nodes,
    onSelectionChange,
    type
  } = _ref4;
  const [selectedNodes, setSelectedNodes] = (0, import_react145.useState)(defaultSelected ?? []);
  const [selectedValues, setSelectedValues] = (0, import_react145.useState)(() => type ? getDefaultSelectedValues({
    nodes,
    selectedNodes,
    type
  }) : []);
  (0, import_react145.useEffect)(() => {
    if (defaultSelected) {
      setSelectedNodes(defaultSelected);
      setSelectedValues(getDefaultSelectedValues({
        nodes,
        selectedNodes: defaultSelected,
        type
      }));
    }
  }, [defaultSelected, nodes, type]);
  (0, import_react145.useEffect)(() => {
    if (type === "radio") {
      if (selectedNodes.length >= 1) {
        setSelectedNodes((prevSelected) => prevSelected.slice(0, 1));
        setSelectedValues((prevValues) => prevValues.slice(0, 1));
      } else if (nodes.length) {
        const firstSelectedNode = depthFirstSearch(nodes, (node) => node.value !== void 0, true);
        if (firstSelectedNode && firstSelectedNode.value !== void 0) {
          setSelectedNodes([firstSelectedNode.id]);
          setSelectedValues([firstSelectedNode.value]);
        }
      }
    }
  }, [nodes, selectedNodes.length, setSelectedNodes, type]);
  (0, import_react145.useEffect)(() => {
    if (typeof onSelectionChange === "function") {
      onSelectionChange(selectedValues);
    }
  }, [onSelectionChange, selectedValues]);
  const onSelect = (nodeId, value) => {
    if (disabledNodes == null ? void 0 : disabledNodes.includes(nodeId)) {
      return;
    }
    if (type === "multi") {
      if (selectedNodes.includes(nodeId)) {
        setSelectedNodes((prevNodes) => prevNodes.filter((prevNodeId) => prevNodeId !== nodeId));
        setSelectedValues((prevValues) => prevValues.filter((prevValue) => prevValue !== value));
      } else {
        setSelectedNodes([...selectedNodes, nodeId]);
        setSelectedValues([...selectedValues, value]);
      }
    }
    if (type === "radio" && !selectedNodes.includes(nodeId)) {
      setSelectedNodes([nodeId]);
      setSelectedValues([value]);
    }
  };
  return {
    selectedNodes,
    onSelect
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/hooks/useVisibleNodes.js
var import_react146 = __toESM(require_react());
var recursiveSearch = (_ref) => {
  let {
    nodes,
    expandedNodes,
    nodeMap
  } = _ref;
  return nodes.reduce((acc, id) => {
    var _a;
    if (expandedNodes.includes(id)) {
      const children = (_a = nodeMap.get(id)) == null ? void 0 : _a.children;
      if (children) {
        const visibleChildren = recursiveSearch({
          nodes: children,
          expandedNodes,
          nodeMap
        });
        return acc.includes(id) ? [...acc, ...visibleChildren] : [...acc, id, ...visibleChildren];
      }
    }
    return [...acc, id];
  }, []);
};
var buildVisibleNodes = (_ref2) => {
  let {
    expandedNodes,
    nodeMap
  } = _ref2;
  const entries = Array.from(nodeMap.entries());
  const parentNodes = entries.filter((_ref3) => {
    let [, value] = _ref3;
    return value.parent === void 0;
  }, []).map((_ref4) => {
    let [id] = _ref4;
    return id;
  });
  return recursiveSearch({
    nodes: parentNodes,
    expandedNodes,
    nodeMap
  });
};
var useVisibleNodes = (_ref5) => {
  let {
    expandedNodes,
    nodeMap
  } = _ref5;
  const [visibleNodes, setVisibleNodes] = (0, import_react146.useState)(() => buildVisibleNodes({
    expandedNodes,
    nodeMap
  }));
  (0, import_react146.useEffect)(() => {
    setVisibleNodes(buildVisibleNodes({
      expandedNodes,
      nodeMap
    }));
  }, [expandedNodes, nodeMap]);
  return {
    visibleNodes
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/StatefulTree/StatefulTree.js
var InternalStatefulTree = (_ref) => {
  let {
    nodes = [],
    defaultExpanded,
    defaultSelected,
    disabledNodes = [],
    iconless,
    onNodeClick,
    onExpandedChange,
    onSelectionChange,
    selectable: type
  } = _ref;
  const {
    focusedNode,
    onFocus
  } = useFocusable({
    nodes,
    type,
    defaultSelected
  });
  const {
    expandedNodes,
    onToggle
  } = useExpandable({
    defaultExpanded,
    onExpandedChange
  });
  const {
    selectedNodes,
    onSelect
  } = useSelectable({
    defaultSelected,
    disabledNodes,
    nodes,
    onSelectionChange,
    type
  });
  const nodeMap = useNodeMap({
    nodes
  });
  const {
    visibleNodes
  } = useVisibleNodes({
    expandedNodes,
    nodeMap
  });
  const onKeyDown = useTreeKeyEvents({
    onFocus,
    onSelect,
    onToggle,
    nodeMap,
    visibleNodes
  });
  return import_react147.default.createElement(Tree, {
    disabledNodes,
    expandable: {
      expandedNodes,
      onToggle
    },
    focusable: {
      focusedNode,
      onFocus
    },
    iconless,
    nodes,
    onKeyDown,
    onNodeClick,
    selectable: {
      selectedNodes,
      onSelect,
      type
    }
  });
};
var StatefulTree = typedMemo(InternalStatefulTree);

// node_modules/@bigcommerce/big-design/dist/es/components/Stepper/Stepper.js
var import_react149 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Stepper/Step/Step.js
var import_react148 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Stepper/Step/styled.js
var StyledStep = styled_components_browser_esm_default(Grid).withConfig({
  displayName: "styled__StyledStep",
  componentId: "sc-kstb4o-0"
})(["flex-basis:100%;gap:", ";grid-template-areas:'light dash' 'text text';grid-template-columns:auto 1fr;", "{grid-template-columns:", " 1fr;grid-template-rows:", " 1fr;max-width:", ";min-width:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xSmall;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.breakpoints.tablet;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.xLarge;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.spacing.xLarge;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.helpers.remCalc(228);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.helpers.remCalc(96);
});
var StyledSrOnlyText = styled_components_browser_esm_default.span.withConfig({
  displayName: "styled__StyledSrOnlyText",
  componentId: "sc-kstb4o-1"
})(["", "{", "}"], (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.breakpoints.tablet;
}, hideVisually());
var StyledLight = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledLight",
  componentId: "sc-kstb4o-2"
})(["border-radius:", ";color:", ";grid-area:light;user-select:none;", "{border-radius:", ";font-size:", ";line-height:", ";}"], (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.spacing.medium;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.colors.white;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.breakpoints.tablet;
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return theme2.borderRadius.circle;
}, (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.typography.fontSize.medium;
}, (_ref13) => {
  let {
    theme: theme2
  } = _ref13;
  return theme2.lineHeight.medium;
});
var StyledDash = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledDash",
  componentId: "sc-kstb4o-3"
})(["align-self:center;height:", ";grid-area:dash;width:100%;"], (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.helpers.remCalc(2);
});
var StyledText4 = styled_components_browser_esm_default(StyleableText).withConfig({
  displayName: "styled__StyledText",
  componentId: "sc-kstb4o-4"
})(["grid-area:text;"]);
StyledStep.defaultProps = {
  theme
};
StyledSrOnlyText.defaultProps = {
  theme
};
StyledLight.defaultProps = {
  theme
};
StyledDash.defaultProps = {
  theme
};
StyledText4.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Stepper/Step/Step.js
var Step = (0, import_react148.memo)((_ref) => {
  let {
    index,
    selectedIndex,
    stepperLength,
    text
  } = _ref;
  const isComplete = selectedIndex > index;
  const isSelected = selectedIndex === index;
  const isActive = isSelected || isComplete;
  return import_react148.default.createElement(StyledStep, {
    display: {
      mobile: isSelected ? "grid" : "none",
      tablet: "grid"
    },
    marginBottom: "xLarge",
    marginRight: {
      tablet: "xSmall"
    }
  }, import_react148.default.createElement(StyledLight, {
    alignItems: "center",
    backgroundColor: isActive ? "primary" : "secondary50",
    flexDirection: "row",
    justifyContent: "center",
    paddingHorizontal: {
      mobile: "xSmall",
      tablet: "none"
    },
    paddingVertical: {
      mobile: "xxSmall",
      tablet: "none"
    }
  }, isComplete ? import_react148.default.createElement(CheckIcon, {
    color: "white",
    size: "large"
  }) : (
    // span is needed to preserve white space inside a flex container
    import_react148.default.createElement("span", null, import_react148.default.createElement(StyledSrOnlyText, null, "Step"), ` ${index + 1} `, import_react148.default.createElement(StyledSrOnlyText, null, "of ", stepperLength))
  )), import_react148.default.createElement(StyledDash, {
    backgroundColor: isComplete ? "primary" : "secondary30",
    display: {
      mobile: "none",
      tablet: index === stepperLength - 1 ? "none" : "block"
    }
  }), import_react148.default.createElement(StyledText4, {
    color: isActive ? "secondary70" : "secondary50"
  }, text));
});
Step.displayName = "Step";

// node_modules/@bigcommerce/big-design/dist/es/components/Stepper/Stepper.js
var Stepper = (0, import_react149.memo)((_ref) => {
  let {
    className,
    style: style2,
    steps,
    currentStep = 0,
    ...props
  } = _ref;
  return steps.length ? import_react149.default.createElement(Flex, _extends({}, props, {
    "aria-valuemax": steps.length,
    "aria-valuemin": 0,
    "aria-valuenow": currentStep + 1,
    "aria-valuetext": `Step ${currentStep + 1}: ${steps[currentStep]}`,
    flexDirection: "row",
    flexWrap: "nowrap",
    marginBottom: "xLarge",
    role: "progressbar"
  }), steps.map((text, index) => import_react149.default.createElement(Step, {
    index,
    key: index,
    selectedIndex: currentStep,
    stepperLength: steps.length,
    text
  }))) : null;
});
Stepper.displayName = "Stepper";

// node_modules/@bigcommerce/big-design/dist/es/components/Switch/Switch.js
var import_react150 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Switch/styled.js
var HiddenCheckbox2 = styled_components_browser_esm_default.input.withConfig({
  displayName: "styled__HiddenCheckbox",
  componentId: "sc-5vnqm9-0"
})(["", " ", ""], hideVisually(), (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return Ae(["&:focus + label::before{box-shadow:0px 0px 0px 4px ", ";"], theme2.helpers.createRGBA(theme2.colors.primary, 0.2));
});
var StyledSwitchLabel = styled_components_browser_esm_default.label.withConfig({
  displayName: "styled__StyledSwitchLabel",
  componentId: "sc-5vnqm9-1"
})(["", " background:", ";border-color:", ";border-radius:", ";cursor:pointer;height:", ";position:relative;width:", ";&:hover{&::before{", "}}&:focus{&::before{box-shadow:0px 0px 0px 4px ", ";}}", " &::before{", " ", " background:", ";border-radius:", ";content:'';height:", ";left:calc(100% - ", ");position:absolute;top:-", ";width:", ";", " ", "}"], withTransition(["background, border-color"]), (_ref2) => {
  let {
    checked,
    theme: theme2
  } = _ref2;
  return checked ? theme2.colors.primary30 : theme2.colors.secondary30;
}, (_ref3) => {
  let {
    checked,
    theme: theme2
  } = _ref3;
  return checked ? theme2.colors.primary30 : theme2.colors.secondary30;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.helpers.remCalc(8);
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.helpers.remCalc(14);
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.helpers.remCalc(38);
}, (_ref7) => {
  let {
    checked,
    theme: theme2
  } = _ref7;
  return checked ? Ae(["box-shadow:0px 0px 0px 4px ", ";"], theme2.helpers.createRGBA(theme2.colors.primary, 0.2)) : Ae(["box-shadow:0px 0px 0px 4px ", ";"], theme2.helpers.createRGBA(theme2.colors.secondary50, 0.2));
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.helpers.createRGBA(theme2.colors.primary, 0.2);
}, (_ref9) => {
  let {
    checked,
    disabled,
    theme: theme2
  } = _ref9;
  return disabled && Ae(["background:", ";cursor:not-allowed;&:hover{&::before{", " border-radius:", ";}}"], checked ? theme2.colors.primary20 : theme2.colors.secondary20, (_ref10) => {
    let {
      theme: theme3
    } = _ref10;
    return theme3.shadow.raised;
  }, (_ref11) => {
    let {
      theme: theme3
    } = _ref11;
    return theme3.borderRadius.circle;
  });
}, withTransition(["background, transform"]), (_ref12) => {
  let {
    theme: theme2
  } = _ref12;
  return theme2.shadow.raised;
}, (_ref13) => {
  let {
    checked,
    theme: theme2
  } = _ref13;
  return checked ? theme2.colors.primary40 : theme2.colors.white;
}, (_ref14) => {
  let {
    theme: theme2
  } = _ref14;
  return theme2.borderRadius.circle;
}, (_ref15) => {
  let {
    theme: theme2
  } = _ref15;
  return theme2.spacing.xLarge;
}, (_ref16) => {
  let {
    theme: theme2
  } = _ref16;
  return theme2.spacing.large;
}, (_ref17) => {
  let {
    theme: theme2
  } = _ref17;
  return theme2.helpers.remCalc(5);
}, (_ref18) => {
  let {
    theme: theme2
  } = _ref18;
  return theme2.spacing.xLarge;
}, (_ref19) => {
  let {
    checked,
    disabled,
    theme: theme2
  } = _ref19;
  return disabled && Ae(["background:", ";cursor:not-allowed;"], checked ? theme2.colors.primary30 : theme2.colors.secondary10);
}, (_ref20) => {
  let {
    checked
  } = _ref20;
  return !checked && Ae(["transform:translateX(-100%);"]);
});
StyledSwitchLabel.defaultProps = {
  theme
};
HiddenCheckbox2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Switch/Switch.js
var RawSwitch = (_ref) => {
  let {
    checked,
    disabled,
    forwardedRef,
    ...props
  } = _ref;
  const uniqueSwitchId = (0, import_react150.useId)();
  const id = props.id ? props.id : uniqueSwitchId;
  return import_react150.default.createElement(Flex, null, import_react150.default.createElement(HiddenCheckbox2, _extends({
    checked,
    disabled,
    id,
    type: "checkbox"
  }, props, {
    ref: forwardedRef
  })), import_react150.default.createElement(StyledSwitchLabel, {
    "aria-hidden": true,
    checked,
    disabled,
    htmlFor: id
  }));
};
var Switch = (0, import_react150.memo)((0, import_react150.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react150.default.createElement(RawSwitch, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Tabs/Tabs.js
var import_react151 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Tabs/styled.js
var StyledTabs = styled_components_browser_esm_default(Flex).withConfig({
  displayName: "styled__StyledTabs",
  componentId: "sc-6je9le-0"
})(["overflow:auto;"]);
var StyledTab = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledTab",
  componentId: "sc-6je9le-1"
})(["border:none;border-bottom:", " solid transparent;border-bottom-color:", ";border-radius:0;color:", ";pointer-events:", ";width:auto;", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.spacing.xxSmall;
}, (props) => props.id === props.activeTab ? props.theme.colors.primary40 : "transparent", (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.primary;
}, (props) => props.id === props.activeTab ? "none" : "auto", (props) => props.id === props.activeTab && Ae(["color:", ";&:focus{box-shadow:none;}"], props.theme.colors.secondary70));
StyledTab.defaultProps = {
  theme,
  variant: "subtle"
};
StyledTabs.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Tabs/Tabs.js
var Tabs = (0, import_react151.memo)((_ref) => {
  let {
    activeTab,
    children,
    className,
    items = [],
    onTabClick,
    style: style2,
    role,
    ...props
  } = _ref;
  const handleOnTabClick = (event) => {
    event.preventDefault();
    const tabId = event.currentTarget.id;
    if (tabId !== activeTab && typeof onTabClick === "function") {
      onTabClick(tabId);
    }
  };
  const activeItem = activeTab && items[Number(activeTab)];
  const missingAriaControls = items.some((item) => !item.ariaControls);
  const missingFallback = activeItem && !document.getElementById(activeItem.ariaControls || `${activeItem.id}-content`);
  if (missingAriaControls || missingFallback) {
    warning('TabItems must have an ariaControls field, otherwise, an element with fallback ID "{tab.id}-content" must exist in the DOM');
  }
  return import_react151.default.createElement(StyledTabs, _extends({}, props, {
    flexDirection: "row",
    role: "tablist"
  }), items.map((_ref2) => {
    let {
      ariaControls,
      id,
      title,
      disabled
    } = _ref2;
    return import_react151.default.createElement(StyledTab, {
      activeTab,
      "aria-controls": ariaControls || `${id}-content`,
      "aria-selected": id === activeTab ? "true" : "false",
      disabled,
      id,
      key: id,
      onClick: handleOnTabClick,
      role: "tab",
      tabIndex: id === activeTab ? -1 : 0
    }, title);
  }));
});
Tabs.displayName = "Tabs";

// node_modules/@bigcommerce/big-design/dist/es/components/Textarea/Textarea.js
var import_react152 = __toESM(require_react());
var StyleableTextarea = (_ref) => {
  let {
    description,
    error: error2,
    forwardedRef,
    label,
    labelId,
    rows = 3,
    resize = true,
    ...props
  } = _ref;
  const uniqueTextareaId = (0, import_react152.useId)();
  const id = props.id ? props.id : uniqueTextareaId;
  const {
    errors
  } = useInputErrors(id, error2);
  const MAX_ROWS = 7;
  const numOfRows = rows && rows > MAX_ROWS ? MAX_ROWS : rows;
  const renderedLabel = (0, import_react152.useMemo)(() => {
    if (!label) {
      return null;
    }
    if (typeof label === "string") {
      return import_react152.default.createElement(FormControlLabel, {
        htmlFor: id,
        id: labelId,
        renderOptional: !props.required
      }, label);
    }
    if ((0, import_react152.isValidElement)(label) && label.type === FormControlLabel) {
      return (0, import_react152.cloneElement)(label, {
        id: labelId,
        htmlFor: id
      });
    }
    warning("label must be either a string or a FormControlLabel component.");
  }, [id, label, labelId, props.required]);
  const renderedDescription = (0, import_react152.useMemo)(() => {
    if (!description) {
      return null;
    }
    if (typeof description === "string") {
      return import_react152.default.createElement(FormControlDescription, null, description);
    }
    if ((0, import_react152.isValidElement)(description) && description.type === FormControlDescription) {
      return description;
    }
    warning("description must be either a string or a FormControlDescription component.");
  }, [description]);
  return import_react152.default.createElement("div", null, renderedLabel, renderedDescription, import_react152.default.createElement(StyledTextareaWrapper, null, import_react152.default.createElement(StyledTextarea, _extends({}, props, {
    error: errors,
    id,
    ref: forwardedRef,
    resize,
    rows: numOfRows
  }))));
};
var Textarea = typedMemo((0, import_react152.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react152.default.createElement(StyleableTextarea, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Timepicker/Timepicker.js
var import_react153 = __toESM(require_react());
var RawTimePicker = (_ref) => {
  let {
    error: error2,
    forwardedRef,
    label,
    locale: locale2 = "en-US",
    onTimeChange,
    value,
    ...props
  } = _ref;
  const localization = createLocalizationProvider(locale2);
  const options = (0, import_react153.useMemo)(() => getTimeIntervals(localization), [localization]);
  return import_react153.default.createElement(Select, _extends({
    autoWidth: true,
    error: error2,
    inputRef: forwardedRef,
    label,
    onOptionChange: onTimeChange,
    options,
    placeholder: "hh : mm",
    value
  }, props));
};
var Timepicker = (0, import_react153.memo)((0, import_react153.forwardRef)((_ref2, ref2) => {
  let {
    className,
    style: style2,
    ...props
  } = _ref2;
  return import_react153.default.createElement(RawTimePicker, _extends({}, props, {
    forwardedRef: ref2
  }));
}));

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Worksheet.js
var import_react173 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/context/updateItems/updateItems.js
var import_react163 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useEditableCell/useEditableCell.js
var import_react158 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useTableFocus/useTableFocus.js
var import_react156 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useWorksheetStore/useWorksheetStore.js
var import_react155 = __toESM(require_react());

// node_modules/zustand/esm/vanilla.mjs
var createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object") ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState2 = () => state;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
      console.warn(
        "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
      );
    }
    listeners.clear();
  };
  const api = { setState, getState: getState2, subscribe, destroy };
  state = createState(setState, getState2, api);
  return api;
};
var createStore3 = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

// node_modules/zustand/esm/index.mjs
var import_react154 = __toESM(require_react(), 1);
var import_with_selector = __toESM(require_with_selector(), 1);
var { useSyncExternalStoreWithSelector } = import_with_selector.default;
var didWarnAboutEqualityFn = false;
function useStore2(api, selector = api.getState, equalityFn) {
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getState,
    selector,
    equalityFn
  );
  (0, import_react154.useDebugValue)(slice);
  return slice;
}

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/utils.js
var mergeCells = (oldCells, newCells) => newCells.reduce(
  (accum, newCell) => {
    const index = oldCells.findIndex((oldCell) => oldCell.rowIndex === newCell.rowIndex && oldCell.columnIndex === newCell.columnIndex);
    if (index > -1) {
      accum[index] = newCell;
      return accum;
    }
    return accum.concat(newCell);
  },
  [...oldCells]
  // Note: returns a new array every time
);
var deleteCells = (oldCells, newCells) => oldCells.filter((oldCell) => !newCells.find((newCell) => newCell.columnIndex === oldCell.columnIndex && newCell.rowIndex === oldCell.rowIndex));
var editedRows = (editedCells, rows) => editedCells.reduce((accum, _ref) => {
  let {
    rowIndex
  } = _ref;
  const row = rows[rowIndex];
  if (accum.find((editedRow) => editedRow === row)) {
    return accum;
  }
  return [...accum, row];
}, []);
var invalidRows = (invalidCells, rows) => {
  const mapObj = /* @__PURE__ */ new Map();
  invalidCells.forEach((_ref2) => {
    let {
      rowIndex,
      hash
    } = _ref2;
    const row = rows[rowIndex];
    if (mapObj.has(row)) {
      const errors = mapObj.get(row);
      mapObj.set(row, /* @__PURE__ */ new Set([...errors, hash]));
    } else {
      mapObj.set(row, /* @__PURE__ */ new Set([hash]));
    }
  });
  return Array.from(mapObj).map((_ref3) => {
    let [item, errors] = _ref3;
    return {
      item,
      errors: Array.from(errors)
    };
  });
};
var getHiddenRows = function(expandableRows) {
  let defaultExpandedRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return Object.entries(expandableRows).reduce((accum, _ref4) => {
    let [key, value] = _ref4;
    return defaultExpandedRows.map(String).includes(key) ? accum : [...accum, ...value];
  }, []);
};
var getCellIdx = (_ref5) => {
  let {
    columnIndex,
    rowIndex
  } = _ref5;
  return `${rowIndex}_${columnIndex}`;
};
var getCellsMap = (cells) => cells.reduce((acc, cell) => ({
  ...acc,
  [getCellIdx(cell)]: cell
}), {});

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useWorksheetStore/useWorksheetStore.js
var createWorksheetStore = () => createStore3((set2) => ({
  columns: [],
  editedCells: [],
  editedCellsMap: {},
  editingCell: null,
  isMetaKey: false,
  isShiftPressed: false,
  isAutoFillActive: false,
  isSelectingActive: false,
  isBlockedFillOut: false,
  isControlKey: false,
  editWithValue: "",
  expandableRows: {},
  disabledRows: [],
  hiddenRows: [],
  invalidCells: [],
  invalidCellsMap: {},
  openedModal: null,
  rows: [],
  selectedCells: [],
  selectedCellsMap: {},
  selectedRows: [],
  tableRef: null,
  addEditedCells: (cells) => set2((state) => {
    const editedCells = mergeCells(state.editedCells, cells);
    return {
      ...state,
      editedCells,
      editedCellsMap: getCellsMap(editedCells)
    };
  }),
  addInvalidCells: (cells) => set2((state) => {
    const invalidCells = mergeCells(state.invalidCells, cells);
    return {
      ...state,
      invalidCells,
      invalidCellsMap: getCellsMap(invalidCells)
    };
  }),
  removeInvalidCells: (cells) => set2((state) => {
    const invalidCells = deleteCells(state.invalidCells, cells);
    return {
      ...state,
      invalidCells,
      invalidCellsMap: getCellsMap(invalidCells)
    };
  }),
  resetInvalidCells: () => set2((state) => ({
    ...state,
    invalidCells: [],
    invalidCellsMap: {}
  })),
  setColumns: (columns) => set2((state) => ({
    ...state,
    columns
  })),
  setExpandableRows: (expandableRows, defaultExpandedRows) => set2((state) => ({
    ...state,
    expandableRows,
    hiddenRows: getHiddenRows(expandableRows, defaultExpandedRows)
  })),
  setEditingCell: (_ref) => {
    let {
      cell,
      isMetaKey = false,
      isControlKey = false,
      editWithValue = ""
    } = _ref;
    set2((state) => {
      return {
        ...state,
        editingCell: cell,
        isMetaKey,
        isControlKey,
        editWithValue
      };
    });
  },
  setShiftPressed: (isShiftPressed) => set2((state) => ({
    ...state,
    isShiftPressed
  })),
  setDisabledRows: (disabledRows) => set2((state) => ({
    ...state,
    disabledRows
  })),
  setHiddenRows: (hiddenRows) => set2((state) => ({
    ...state,
    hiddenRows
  })),
  setOpenModal: (value) => set2((state) => ({
    ...state,
    openedModal: value
  })),
  setRows: (rows) => set2((state) => ({
    ...state,
    rows
  })),
  setSelectedCells: (cells) => set2((state) => ({
    ...state,
    selectedCells: cells,
    selectedCellsMap: getCellsMap(cells)
  })),
  setSelectedRows: (rowIndexes) => set2((state) => ({
    ...state,
    selectedRows: rowIndexes
  })),
  setTableRef: (ref2) => set2((state) => ({
    ...state,
    tableRef: ref2
  })),
  setAutoFillActive: (isActive) => set2((state) => ({
    ...state,
    isAutoFillActive: isActive
  })),
  setSelectingActive: (isActive) => set2((state) => ({
    ...state,
    isSelectingActive: isActive
  })),
  setBlockFillOut: (isBlock) => set2((state) => ({
    ...state,
    isBlockedFillOut: isBlock
  }))
}));
var useWorksheetStore = () => {
  const store = (0, import_react155.useContext)(WorksheetContext);
  if (!store) {
    throw new Error("Worksheet store value is null");
  }
  return {
    store,
    useStore: useStore2
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useTableFocus/useTableFocus.js
var useTableFocus = () => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const tableRef = useStore3(store, (0, import_react156.useMemo)(() => (state) => state.tableRef, []));
  const focusTable = (0, import_react156.useCallback)(() => {
    if (tableRef) {
      tableRef.focus();
    }
  }, [tableRef]);
  return (0, import_react156.useMemo)(() => ({
    focusTable
  }), [focusTable]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useUpdateItems/useUpdateItems.js
var import_react157 = __toESM(require_react());
var useUpdateItems = () => {
  const updateItemsContext = (0, import_react157.useContext)(UpdateItemsContext);
  if (!updateItemsContext) {
    throw new Error("useUpdateItems must be used within an <UpdateItemsProvider>");
  }
  return updateItemsContext;
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useEditableCell/useEditableCell.js
var useEditableCell = (cell) => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  const {
    updateItems
  } = useUpdateItems();
  const {
    focusTable
  } = useTableFocus();
  const isEditing = useStore3(store, (0, import_react158.useMemo)(() => (_ref) => {
    let {
      editingCell
    } = _ref;
    return editingCell !== null && editingCell.columnIndex === cell.columnIndex && editingCell.rowIndex === cell.rowIndex;
  }, [cell]));
  const restoreFocus = (0, import_react158.useCallback)(() => {
    setEditingCell({
      cell: null
    });
    focusTable();
  }, [focusTable, setEditingCell]);
  const handleDoubleClick = (0, import_react158.useCallback)(() => {
    if (!cell.disabled) {
      setEditingCell({
        cell
      });
    }
  }, [cell, setEditingCell]);
  const handleBlur = (0, import_react158.useCallback)((event, cell2) => {
    const isNumberCell = (cell2 == null ? void 0 : cell2.type) === "number";
    const isTextCell = (cell2 == null ? void 0 : cell2.type) === "text";
    if (isNumberCell || isTextCell) {
      updateItems([cell2], [isNumberCell ? Number(event == null ? void 0 : event.target.value) : event == null ? void 0 : event.target.value]);
    }
    restoreFocus();
  }, [restoreFocus, updateItems]);
  const handleChange = (0, import_react158.useCallback)((newValue) => {
    updateItems([cell], [newValue]);
    restoreFocus();
  }, [cell, restoreFocus, updateItems]);
  const handleKeyDown = (0, import_react158.useCallback)((event, newValue) => {
    const key = event.key;
    switch (key) {
      case "Enter":
      case "Tab":
        event.preventDefault();
        if (cell.value !== newValue) {
          updateItems([cell], [newValue]);
        }
        restoreFocus();
        break;
      case "Escape":
        event.preventDefault();
        restoreFocus();
        break;
    }
  }, [cell, restoreFocus, updateItems]);
  return (0, import_react158.useMemo)(() => ({
    handleBlur,
    handleChange,
    handleDoubleClick,
    handleKeyDown,
    isEditing
  }), [handleBlur, handleChange, handleDoubleClick, handleKeyDown, isEditing]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useExpandable/useExpandable.js
var import_react159 = __toESM(require_react());
var useExpandable2 = (rowId) => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const expandableRows = useStore3(store, (state) => state.expandableRows);
  const hiddenRows = useStore3(store, (state) => state.hiddenRows);
  const setHiddenRows = useStore3(store, (state) => state.setHiddenRows);
  const onExpand = (0, import_react159.useCallback)(() => {
    const childIds = expandableRows[rowId];
    setHiddenRows(hiddenRows.filter((hiddenRow) => !childIds.includes(hiddenRow)));
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  const onCollapse = (0, import_react159.useCallback)(() => {
    const childIds = expandableRows[rowId];
    setHiddenRows([...hiddenRows, ...childIds]);
  }, [expandableRows, hiddenRows, rowId, setHiddenRows]);
  const onToggle = (0, import_react159.useCallback)((isExpanded) => {
    if (isExpanded) {
      onCollapse();
    } else {
      onExpand();
    }
  }, [onCollapse, onExpand]);
  const isExpandable = expandableRows !== null && expandableRows[rowId] !== void 0;
  const hasExpanded = isExpandable && !hiddenRows.some((row) => expandableRows[rowId].includes(row));
  return (0, import_react159.useMemo)(() => ({
    hasExpanded,
    isExpandable,
    onToggle
  }), [hasExpanded, isExpandable, onToggle]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useKeyEvents/useKeyEvents.js
var import_react161 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useNavigation/useNavigation.js
var import_react160 = __toESM(require_react());
var useNavigation = (selectedCell) => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const rows = useStore3(store, (0, import_react160.useMemo)(() => (state) => state.rows, []));
  const columns = useStore3(store, (0, import_react160.useMemo)(() => (state) => state.columns, []));
  const hiddenRows = useStore3(store, (0, import_react160.useMemo)(() => (state) => state.hiddenRows, []));
  const setSelectedCells = useStore3(store, (state) => state.setSelectedCells);
  const setSelectedRows = useStore3(store, (state) => state.setSelectedRows);
  const isValidPosition = (0, import_react160.useCallback)((position3) => {
    const rowLength = rows.length;
    const columnsLength = columns.length;
    return position3.rowIndex >= 0 && position3.rowIndex < rowLength && position3.columnIndex >= 0 && position3.columnIndex < columnsLength;
  }, [columns, rows]);
  const isHidden3 = (0, import_react160.useCallback)((rowIndex) => {
    const row = rows[rowIndex];
    const {
      id
    } = row;
    return hiddenRows.includes(id);
  }, [hiddenRows, rows]);
  const getNextOffset = (0, import_react160.useCallback)((_ref) => {
    let {
      columnIndex,
      rowIndex
    } = _ref;
    if (rowIndex === 0) {
      if (columnIndex > 0) {
        return {
          columnIndex: ++columnIndex,
          rowIndex
        };
      }
      return {
        columnIndex: --columnIndex,
        rowIndex
      };
    }
    if (rowIndex > 0) {
      return {
        rowIndex: ++rowIndex,
        columnIndex
      };
    }
    return {
      rowIndex: --rowIndex,
      columnIndex
    };
  }, []);
  const navigate = (0, import_react160.useCallback)((offset3) => {
    if (!selectedCell) {
      return;
    }
    const newPosition = {
      columnIndex: selectedCell.columnIndex + offset3.columnIndex,
      rowIndex: selectedCell.rowIndex + offset3.rowIndex
    };
    if (isValidPosition(newPosition)) {
      if (isHidden3(newPosition.rowIndex)) {
        return navigate(getNextOffset(offset3));
      }
      const hash = columns[newPosition.columnIndex].hash;
      const type = columns[newPosition.columnIndex].type || "text";
      const value = rows[newPosition.rowIndex][hash];
      const disabled = columns[newPosition.columnIndex].disabled || false;
      const cell = {
        ...newPosition,
        disabled,
        hash,
        type,
        value
      };
      setSelectedCells([cell]);
      setSelectedRows([newPosition.rowIndex]);
    }
  }, [columns, getNextOffset, isHidden3, isValidPosition, rows, selectedCell, setSelectedCells, setSelectedRows]);
  return (0, import_react160.useMemo)(() => ({
    navigate
  }), [navigate]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useKeyEvents/useKeyEvents.js
var useKeyEvents = () => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const selectedCell = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.selectedCells[0], []));
  const lastSelectedCell = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.selectedCells[state.selectedCells.length - 1], []));
  const selectedCells = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.selectedCells, []));
  const rows = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.rows, []));
  const isEditing = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.editingCell !== null, []));
  const isShiftPressed = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.isShiftPressed, []));
  const setShiftPressed = useStore3(store, (0, import_react161.useMemo)(() => (state) => state.setShiftPressed, []));
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  const {
    navigate
  } = useNavigation(selectedCell);
  const setSelectedCells = useStore3(store, (state) => state.setSelectedCells);
  const editSelectedCell = (0, import_react161.useCallback)(function() {
    let {
      isMetaKey = false,
      isControlKey = false,
      editWithValue = ""
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (selectedCell) {
      return setEditingCell({
        cell: selectedCell,
        isMetaKey,
        isControlKey,
        editWithValue
      });
    }
  }, [selectedCell, setEditingCell]);
  const handleKeyUp = (0, import_react161.useCallback)((event) => {
    const key = event.key;
    if (key === "Shift") {
      setShiftPressed(false);
    }
  }, [setShiftPressed]);
  const handleKeyDown = (0, import_react161.useCallback)((event) => {
    const key = event.key;
    if (isEditing) {
      switch (key) {
        case "Enter":
          navigate({
            rowIndex: 1,
            columnIndex: 0
          });
          break;
        case "Tab":
          navigate({
            rowIndex: 0,
            columnIndex: event.shiftKey ? -1 : 1
          });
          break;
      }
    } else {
      switch (key) {
        case "Enter":
          if (selectedCell && !selectedCell.disabled) {
            editSelectedCell({});
            if (selectedCell.type === "checkbox") {
              navigate({
                rowIndex: 1,
                columnIndex: 0
              });
            }
          }
          break;
        case " ":
          if (selectedCell && !selectedCell.disabled) {
            editSelectedCell();
          }
          break;
        case "ArrowUp":
          if (isShiftPressed && selectedCells.length > 1) {
            setSelectedCells(selectedCells.slice(0, -1));
            break;
          }
          navigate({
            rowIndex: -1,
            columnIndex: 0
          });
          break;
        case "ArrowDown":
          if (isShiftPressed) {
            const nextRowIdx = lastSelectedCell.rowIndex + 1;
            const nextRow = rows[nextRowIdx];
            if (nextRowIdx <= rows.length - 1) {
              setSelectedCells([...selectedCells, {
                ...lastSelectedCell,
                rowIndex: lastSelectedCell.rowIndex + 1,
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                value: nextRow[lastSelectedCell.hash]
              }]);
            }
          } else {
            navigate({
              rowIndex: 1,
              columnIndex: 0
            });
          }
          break;
        case "ArrowRight":
          navigate({
            rowIndex: 0,
            columnIndex: 1
          });
          break;
        case "Tab":
          navigate({
            rowIndex: 0,
            columnIndex: event.shiftKey ? -1 : 1
          });
          break;
        case "ArrowLeft":
          navigate({
            rowIndex: 0,
            columnIndex: -1
          });
          break;
        case "Meta":
          if (selectedCell) {
            editSelectedCell({
              isMetaKey: true
            });
          }
          break;
        case "Control":
          if (selectedCell) {
            editSelectedCell({
              isControlKey: true
            });
          }
          break;
        case "Shift":
          if (selectedCell) {
            setShiftPressed(true);
          }
          break;
        default:
          if (key !== "Escape" && key.length === 1 && (selectedCell.type === "text" || selectedCell.type === "number")) {
            event.preventDefault();
            editSelectedCell({
              editWithValue: key
            });
          }
          break;
      }
      event.preventDefault();
    }
  }, [isEditing, navigate, selectedCell, isShiftPressed, selectedCells, editSelectedCell, setSelectedCells, lastSelectedCell, rows, setShiftPressed]);
  return (0, import_react161.useMemo)(() => ({
    handleKeyDown,
    handleKeyUp
  }), [handleKeyDown, handleKeyUp]);
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/hooks/useAutoFilling/useAutoFilling.js
var import_react162 = __toESM(require_react());
var useAutoFilling = (cell) => {
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const {
    updateItems
  } = useUpdateItems();
  const selectedCells = useStore3(store, (state) => state.selectedCells);
  const disabledRows = useStore3(store, (state) => state.disabledRows);
  const rows = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.rows, []));
  const isBlockedFillOut = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.isBlockedFillOut, []));
  const isSelectingActive = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.isSelectingActive, []));
  const isAutoFillActive = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.isAutoFillActive, []));
  const setSelectingActive = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.setSelectingActive, []));
  const setAutoFillActive = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.setAutoFillActive, []));
  const setBlockFillOut = useStore3(store, (0, import_react162.useMemo)(() => (state) => state.setBlockFillOut, []));
  const setSelectedCells = useStore3(store, (state) => state.setSelectedCells);
  const onFillFullColumn = (0, import_react162.useCallback)(() => {
    const cells = rows.reduce((accum, row, idx) => idx > cell.rowIndex && !disabledRows.includes(idx + 1) ? [...accum, {
      ...cell,
      rowIndex: idx,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      value: row[cell.hash]
    }] : accum, []);
    updateItems(cells, cells.map(() => cell.value));
  }, [cell, disabledRows, rows, updateItems]);
  const handleSelectedCells = (0, import_react162.useCallback)(() => {
    const copySelectedCells = [...selectedCells];
    if (isAutoFillActive || isSelectingActive) {
      const isUnic = !copySelectedCells.some((editedCell) => editedCell.rowIndex === cell.rowIndex);
      const firstSelectedCell = copySelectedCells[0];
      if (firstSelectedCell && firstSelectedCell.rowIndex <= cell.rowIndex && isUnic) {
        const {
          columnIndex,
          hash,
          type
        } = firstSelectedCell;
        copySelectedCells.push({
          ...cell,
          columnIndex,
          hash,
          type,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          value: rows[cell.rowIndex][firstSelectedCell.hash]
        });
      }
      if (copySelectedCells.length > 1 && cell.rowIndex === copySelectedCells[copySelectedCells.length - 2].rowIndex) {
        copySelectedCells.pop();
      }
      setSelectedCells(copySelectedCells);
    }
  }, [cell, isAutoFillActive, isSelectingActive, rows, selectedCells, setSelectedCells]);
  (0, import_react162.useEffect)(() => {
    if (!isBlockedFillOut && !isAutoFillActive && selectedCells.length > 1) {
      const availableCells = selectedCells.filter((_ref) => {
        let {
          rowIndex
        } = _ref;
        return !disabledRows.includes(rowIndex + 1);
      });
      updateItems(
        availableCells,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        availableCells.map((_ref2) => {
          let {
            hash
          } = _ref2;
          return rows[selectedCells[0].rowIndex][hash];
        })
      );
    }
  }, [disabledRows, isAutoFillActive, isBlockedFillOut, isSelectingActive, rows, selectedCells, setSelectingActive, updateItems]);
  return {
    isAutoFillActive,
    onFillFullColumn,
    setIsMouseDown: setAutoFillActive,
    setSelectingActive,
    setBlockFillOut,
    setSelectedCell: handleSelectedCells
  };
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/context/updateItems/updateItems.js
var UpdateItemsContext = (0, import_react163.createContext)(null);
var UpdateItemsProvider = typedMemo((_ref) => {
  let {
    children,
    items
  } = _ref;
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const setRows = useStore3(store, (state) => state.setRows);
  const addEditedCells = useStore3(store, (state) => state.addEditedCells);
  const updateItems = (0, import_react163.useCallback)((cells, newValues) => {
    setRows(cells.reduce((accum, cell, index) => {
      const {
        hash,
        rowIndex
      } = cell;
      if (cell.value === newValues[index]) {
        return accum;
      }
      const row = accum[rowIndex];
      const updatedRow = {
        ...row,
        [hash]: newValues[index]
      };
      accum[rowIndex] = updatedRow;
      return accum;
    }, items));
    addEditedCells(cells.reduce((accum, cell, index) => {
      if (cell.value === newValues[index]) {
        return accum;
      }
      return [...accum, {
        ...cell,
        value: newValues[index]
      }];
    }, []));
  }, [addEditedCells, items, setRows]);
  const providerValue = (0, import_react163.useMemo)(() => ({
    updateItems
  }), [updateItems]);
  return import_react163.default.createElement(UpdateItemsContext.Provider, {
    value: providerValue
  }, children);
});

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Modal/Modal.js
var import_react164 = __toESM(require_react());
var InternalWorksheetModal = (_ref) => {
  let {
    column
  } = _ref;
  const {
    config: config2,
    hash
  } = column;
  const {
    header,
    render,
    saveActionText = "Save",
    cancelActionText = "Cancel"
  } = config2;
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const isModalOpen = useStore3(store, (0, import_react164.useMemo)(() => (state) => state.openedModal === hash, [hash]));
  const selectedCell = useStore3(store, (0, import_react164.useMemo)(() => (state) => state.selectedCells[0], []));
  const setOpenModal = useStore3(store, (state) => state.setOpenModal);
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  const {
    focusTable
  } = useTableFocus();
  const {
    updateItems
  } = useUpdateItems();
  const [newValue, setNewValue] = (0, import_react164.useState)(null);
  (0, import_react164.useEffect)(() => {
    if (selectedCell) {
      setNewValue(selectedCell.value);
    }
  }, [selectedCell]);
  const handleClose = (0, import_react164.useCallback)(() => {
    setOpenModal(null);
    setEditingCell({
      cell: null
    });
    focusTable();
  }, [focusTable, setEditingCell, setOpenModal]);
  const handleSave = (0, import_react164.useCallback)(() => {
    if (selectedCell && newValue !== null && newValue !== selectedCell.value) {
      updateItems([selectedCell], [newValue]);
    }
    handleClose();
  }, [handleClose, newValue, selectedCell, updateItems]);
  const renderedContent = (0, import_react164.useMemo)(() => {
    const onChange = (newValue2) => {
      if (newValue2 !== void 0) {
        setNewValue(newValue2);
      }
    };
    return selectedCell ? render(selectedCell.value, onChange) : null;
  }, [selectedCell, render]);
  return import_react164.default.createElement(Modal, {
    actions: [{
      text: cancelActionText,
      variant: "subtle",
      onClick: handleClose
    }, {
      text: saveActionText,
      onClick: handleSave
    }],
    closeOnClickOutside: false,
    closeOnEscKey: true,
    header,
    isOpen: isModalOpen,
    onClose: handleClose
  }, renderedContent);
};
var WorksheetModal = typedMemo(InternalWorksheetModal);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Row/Row.js
var import_react172 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Cell/Cell.js
var import_react170 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/CheckboxEditor/CheckboxEditor.js
var import_react165 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/CheckboxEditor/styled.js
var CheckboxWrapper = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__CheckboxWrapper",
  componentId: "sc-1pcspgo-0"
})(["& > div{justify-content:center;}"]);
CheckboxWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/CheckboxEditor/CheckboxEditor.js
var InternalCheckboxEditor = (_ref) => {
  let {
    cell,
    toggle,
    onBlur,
    onChange
  } = _ref;
  const handleChange = (0, import_react165.useCallback)(() => {
    onChange(!cell.value);
  }, [cell, onChange]);
  (0, import_react165.useEffect)(() => {
    if (toggle) {
      handleChange();
    }
  }, [cell.value, handleChange, toggle]);
  return import_react165.default.createElement(CheckboxWrapper, null, import_react165.default.createElement(Checkbox, {
    checked: cell.value === "" ? void 0 : cell.value,
    disabled: cell.disabled,
    hiddenLabel: true,
    label: cell.value ? "Checked" : "Unchecked",
    onBlur,
    onChange: handleChange
  }));
};
var CheckboxEditor = typedMemo(InternalCheckboxEditor);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ModalEditor/ModalEditor.js
var import_react166 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ModalEditor/styled.js
var StyledButton5 = styled_components_browser_esm_default(StyleableButton).withConfig({
  displayName: "styled__StyledButton",
  componentId: "sc-zoq9bz-0"
})(["font-size:", ";height:auto;line-height:", ";padding:0;&:hover:not(:active){background-color:inherit;color:", ";}&:active{background-color:inherit;}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.typography.fontSize.small;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.lineHeight.small;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.colors.primary70;
});
var StyledFlexItem5 = styled_components_browser_esm_default(FlexItem).withConfig({
  displayName: "styled__StyledFlexItem",
  componentId: "sc-zoq9bz-1"
})(["overflow:hidden;"]);
StyledButton5.defaultProps = {
  theme
};
StyledFlexItem5.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ModalEditor/ModalEditor.js
var InternalModalEditor = (_ref) => {
  let {
    cell,
    formatting,
    isEditing
  } = _ref;
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const setOpenModal = useStore3(store, (state) => state.setOpenModal);
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  const {
    hash,
    value
  } = cell;
  const buttonRef = (0, import_react166.createRef)();
  (0, import_react166.useEffect)(() => {
    if (isEditing) {
      setOpenModal(hash);
    }
  }, [hash, isEditing, setOpenModal]);
  const handleClick = (0, import_react166.useCallback)(() => {
    setEditingCell({
      cell
    });
  }, [cell, setEditingCell]);
  const renderedValue = (0, import_react166.useMemo)(() => typeof formatting === "function" ? formatting(value) : `${value}`, [formatting, value]);
  return import_react166.default.createElement(Flex, {
    alignItems: "center",
    flexWrap: "wrap",
    justifyContent: "space-between"
  }, import_react166.default.createElement(StyledFlexItem5, {
    flexShrink: 1,
    paddingRight: "small"
  }, import_react166.default.createElement(Small, {
    color: cell.disabled ? "secondary50" : "secondary70",
    ellipsis: true,
    title: renderedValue
  }, renderedValue)), import_react166.default.createElement(StyledButton5, {
    disabled: cell.disabled,
    onClick: handleClick,
    ref: buttonRef,
    variant: "subtle"
  }, "Edit"));
};
var ModalEditor = typedMemo(InternalModalEditor);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/SelectEditor/SelectEditor.js
var import_react167 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/SelectEditor/styled.js
var SelectWrapper = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__SelectWrapper",
  componentId: "sc-1bx33mv-0"
})(["span{background-color:", ";border:none;box-shadow:none;&:hover:not([disabled]){border:none;}&[disabled]{background-color:", ";}}input{font-size:", ";font-weight:", ";&[disabled]{background-color:", ";color:", ";cursor:default;}}[role='option']{font-size:", ";}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.inherit;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.colors.white;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.typography.fontSize.small;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.typography.fontWeight.regular;
}, (_ref5) => {
  let {
    theme: theme2
  } = _ref5;
  return theme2.colors.inherit;
}, (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return theme2.colors.secondary50;
}, (_ref7) => {
  let {
    theme: theme2
  } = _ref7;
  return theme2.typography.fontSize.small;
});
SelectWrapper.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/SelectEditor/SelectEditor.js
var InternalSelectEditor = (_ref) => {
  let {
    cell,
    isEditing,
    onBlur,
    onChange,
    options = []
  } = _ref;
  const inputRef = (0, import_react167.createRef)();
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  (0, import_react167.useEffect)(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [inputRef, isEditing]);
  const handleChange = (0, import_react167.useCallback)((value) => {
    onChange(value);
  }, [onChange]);
  const handleOpen = (0, import_react167.useCallback)(() => {
    setEditingCell({
      cell
    });
  }, [cell, setEditingCell]);
  const handleClose = (0, import_react167.useCallback)(() => {
    onBlur();
    setEditingCell({
      cell: null
    });
  }, [onBlur, setEditingCell]);
  return import_react167.default.createElement(SelectWrapper, null, import_react167.default.createElement(Select, {
    disabled: cell.disabled,
    filterable: false,
    inputRef,
    onClose: handleClose,
    onOpen: handleOpen,
    onOptionChange: handleChange,
    options,
    value: cell.value
  }));
};
var SelectEditor = typedMemo(InternalSelectEditor);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/TextEditor/TextEditor.js
var import_react168 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/TextEditor/styled.js
var StyledInput2 = styled_components_browser_esm_default.input.withConfig({
  displayName: "styled__StyledInput",
  componentId: "sc-w3a21g-0"
})(["background-color:", ";border:0;font-size:", ";font-weight:", ";line-height:", ";margin:0;padding:0;width:100%;&:focus{outline:none;}", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.inherit;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return theme2.typography.fontSize.small;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.typography.fontWeight.regular;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.lineHeight.small;
}, (_ref5) => {
  let {
    isEdited
  } = _ref5;
  return isEdited && Ae(["background-color:", ";"], (_ref6) => {
    let {
      theme: theme2
    } = _ref6;
    return theme2.colors.warning10;
  });
});
StyledInput2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/TextEditor/TextEditor.js
var InternalTextEditor = (_ref) => {
  let {
    cell,
    isEdited,
    initialValue,
    onBlur,
    onKeyDown,
    isMetaKey,
    isControlKey
  } = _ref;
  const [value, setValue] = (0, import_react168.useState)(initialValue || `${cell.value}`);
  const isBlurBlocked = (0, import_react168.useRef)(false);
  const [isMetaKeyValue, setIsMetaKeyValue] = (0, import_react168.useState)(isMetaKey);
  const [isControlValue, setIsControlKeyValue] = (0, import_react168.useState)(isControlKey);
  const handleChange = (event) => {
    setValue(event.target.value);
  };
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      isBlurBlocked.current = true;
    } else if (isMetaKeyValue && event.key === "v" && event.metaKey) {
      setValue("");
      isBlurBlocked.current = false;
      setIsMetaKeyValue(false);
    } else if (isControlValue && event.key === "v" && event.ctrlKey) {
      setValue("");
      isBlurBlocked.current = false;
      setIsControlKeyValue(false);
    } else {
      isBlurBlocked.current = false;
    }
    onKeyDown(event, formatValue(value));
  };
  const formatValue = (value2) => cell.type === "number" && value2 !== "" ? Number(value2) : value2;
  return import_react168.default.createElement(StyledInput2, {
    autoFocus: true,
    isEdited,
    onBlur: (event) => {
      if (!isBlurBlocked.current) {
        onBlur(event, cell);
      }
    },
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    value
  });
};
var TextEditor = typedMemo(InternalTextEditor);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ToggleEditor/ToggleEditor.js
var import_react169 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ToggleEditor/styled.js
var StyledExpandButton = styled_components_browser_esm_default(StyleableButton2).withConfig({
  displayName: "styled__StyledExpandButton",
  componentId: "sc-1nixsp-0"
})(["position:absolute;top:0;height:100%;width:100%;min-width:", ";border-radius:0;&:focus{box-shadow:none;}&:hover{svg{color:", ";}}"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return `${theme2.helpers.remCalc(32)}`;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return `${theme2.colors.primary}`;
});
StyledExpandButton.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/editors/ToggleEditor/ToggleEditor.js
var InternalToggleEditor = (_ref) => {
  let {
    rowId,
    toggle
  } = _ref;
  const {
    onToggle,
    isExpandable,
    hasExpanded
  } = useExpandable2(rowId);
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const setEditingCell = useStore3(store, (state) => state.setEditingCell);
  (0, import_react169.useEffect)(() => {
    if (toggle && isExpandable) {
      onToggle(hasExpanded);
    }
    setEditingCell({
      cell: null
    });
  }, [hasExpanded, isExpandable, onToggle, setEditingCell, toggle]);
  if (!isExpandable) {
    return null;
  }
  if (hasExpanded) {
    return import_react169.default.createElement(StyledExpandButton, {
      iconOnly: import_react169.default.createElement(ExpandMoreIcon, {
        color: "secondary60"
      }),
      onClick: () => {
        onToggle(true);
      },
      title: "toggle row expanded",
      variant: "subtle"
    });
  }
  return import_react169.default.createElement(StyledExpandButton, {
    iconOnly: import_react169.default.createElement(ChevronRightIcon, {
      color: "secondary60"
    }),
    onClick: () => {
      onToggle(false);
    },
    title: "toggle row expanded",
    variant: "subtle"
  });
};
var ToggleEditor = (0, import_react169.memo)(InternalToggleEditor);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Cell/styled.js
var StyledCell = styled_components_browser_esm_default.td.withConfig({
  displayName: "styled__StyledCell",
  componentId: "sc-1bt06ph-0"
})(["position:relative;background-color:", ";border:", ";box-sizing:border-box;padding:", ";text-align:", ";user-select:none;", " ", " ", " ", " ", " ", " & p{display:block;white-space:inherit;word-break:break-word;margin:0;}", ""], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.inherit;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return `${theme2.helpers.remCalc(0.5)} solid ${theme2.colors.secondary30}`;
}, (_ref3) => {
  let {
    theme: theme2,
    type
  } = _ref3;
  return type === "select" || type === "toggle" ? 0 : `${theme2.helpers.remCalc(6)} ${theme2.helpers.remCalc(17)}`;
}, (_ref4) => {
  let {
    type
  } = _ref4;
  switch (type) {
    case "number":
      return "right";
    case "checkbox":
      return "center";
    default:
      return "left";
  }
}, (_ref5) => {
  let {
    type
  } = _ref5;
  return type === "toggle" && Ae(["position:relative;border-color:", ";"], (_ref6) => {
    let {
      theme: theme2
    } = _ref6;
    return `${theme2.colors.white} ${theme2.colors.white} ${theme2.colors.white} ${theme2.colors.secondary30}`;
  });
}, (_ref7) => {
  let {
    type,
    isChild
  } = _ref7;
  return type === "toggle" && !isChild && Ae(["border-color:", ";"], (_ref8) => {
    let {
      theme: theme2
    } = _ref8;
    return `${theme2.colors.secondary30} ${theme2.colors.white} ${theme2.colors.secondary30} ${theme2.colors.secondary30}`;
  });
}, (_ref9) => {
  let {
    type,
    isLastChild
  } = _ref9;
  return type === "toggle" && isLastChild && Ae(["border-bottom-color:", ";"], (_ref10) => {
    let {
      theme: theme2
    } = _ref10;
    return `${theme2.colors.secondary30}`;
  });
}, (_ref11) => {
  let {
    type,
    isSelected,
    isFirstSelected,
    isLastSelected,
    isNextCellValid
  } = _ref11;
  return isSelected && type !== "toggle" && Ae(["border:", ";border-top-color:", ";border-bottom-color:", ";", "{display:block;}"], (_ref12) => {
    let {
      theme: theme2
    } = _ref12;
    return `${theme2.helpers.remCalc(0.5)} double ${theme2.colors.primary}`;
  }, (_ref13) => {
    let {
      theme: theme2
    } = _ref13;
    return `${isFirstSelected ? theme2.colors.primary : theme2.colors.secondary30}`;
  }, (_ref14) => {
    let {
      theme: theme2
    } = _ref14;
    if (!isNextCellValid && !isLastSelected) {
      return theme2.colors.danger;
    }
    return `${isFirstSelected || isLastSelected ? theme2.colors.primary : theme2.colors.secondary30}`;
  }, AutoFillHandler);
}, (_ref15) => {
  let {
    isValid: isValid2
  } = _ref15;
  return !isValid2 && Ae(["border:", ";"], (_ref16) => {
    let {
      theme: theme2
    } = _ref16;
    return `${theme2.helpers.remCalc(0.5)} double ${theme2.colors.danger}`;
  });
}, (_ref17) => {
  let {
    isEdited
  } = _ref17;
  return isEdited && Ae(["background-color:", ";"], (_ref18) => {
    let {
      theme: theme2
    } = _ref18;
    return theme2.colors.warning10;
  });
}, (_ref19) => {
  let {
    type,
    isChild,
    isLastChild
  } = _ref19;
  return type === "toggle" && isChild && Ae(["&::before{content:'';display:block;top:0;height:", ";left:50%;width:", ";position:absolute;background-color:", ";}&::after{content:'';display:block;top:50%;left:50%;width:50%;height:", ";position:absolute;background-color:", ";}"], isLastChild ? "50%" : "100%", (_ref20) => {
    let {
      theme: theme2
    } = _ref20;
    return `${theme2.helpers.remCalc(1)}`;
  }, (_ref21) => {
    let {
      theme: theme2
    } = _ref21;
    return `${theme2.colors.secondary30}`;
  }, (_ref22) => {
    let {
      theme: theme2
    } = _ref22;
    return `${theme2.helpers.remCalc(1)}`;
  }, (_ref23) => {
    let {
      theme: theme2
    } = _ref23;
    return `${theme2.colors.secondary30}`;
  });
});
var AutoFillHandler = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__AutoFillHandler",
  componentId: "sc-1bt06ph-1"
})(["position:absolute;border:", ";height:", ";width:", ";background-color:", ";right:-", ";bottom:-", ";z-index:100;cursor:crosshair;display:none;"], (_ref24) => {
  let {
    theme: theme2,
    isVisible: isVisible3
  } = _ref24;
  return `${theme2.helpers.remCalc(1)} solid ${isVisible3 ? theme2.colors.white : theme2.colors.transparent}`;
}, (_ref25) => {
  let {
    theme: theme2
  } = _ref25;
  return `${theme2.helpers.remCalc(6)}`;
}, (_ref26) => {
  let {
    theme: theme2
  } = _ref26;
  return `${theme2.helpers.remCalc(6)}`;
}, (_ref27) => {
  let {
    theme: theme2,
    isVisible: isVisible3
  } = _ref27;
  return isVisible3 ? theme2.colors.primary : theme2.colors.transparent;
}, (_ref28) => {
  let {
    theme: theme2
  } = _ref28;
  return `${theme2.helpers.remCalc(4)}`;
}, (_ref29) => {
  let {
    theme: theme2
  } = _ref29;
  return `${theme2.helpers.remCalc(4)}`;
});
var CellNote = styled_components_browser_esm_default.div.withConfig({
  displayName: "styled__CellNote",
  componentId: "sc-1bt06ph-2"
})(["width:0;height:0;border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid ", ";position:absolute;top -1px;right:-5px;transform:rotate(45deg)"], (_ref30) => {
  let {
    theme: theme2,
    color
  } = _ref30;
  return theme2.colors[color];
});
StyledCell.defaultProps = {
  theme
};
AutoFillHandler.defaultProps = {
  theme
};
CellNote.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Cell/Cell.js
var InternalCell = (_ref) => {
  let {
    columnIndex,
    disabled = false,
    formatting,
    hash,
    options,
    rowIndex,
    type,
    rowId,
    validation,
    notation,
    value,
    nextRowValue,
    isChild,
    isLastChild
  } = _ref;
  const cell = (0, import_react170.useMemo)(() => ({
    columnIndex,
    disabled,
    hash,
    rowIndex,
    type,
    value
  }), [columnIndex, disabled, hash, rowIndex, type, value]);
  const cellIdx = (0, import_react170.useMemo)(() => getCellIdx(cell), [cell]);
  const {
    handleBlur,
    handleChange,
    handleDoubleClick,
    handleKeyDown,
    isEditing
  } = useEditableCell(cell);
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const {
    isAutoFillActive,
    onFillFullColumn,
    setIsMouseDown,
    setSelectingActive,
    setBlockFillOut,
    setSelectedCell: setHighlightedCell
  } = useAutoFilling(cell);
  const tooltipId = (0, import_react170.useId)();
  const setSelectedRows = useStore3(store, (state) => state.setSelectedRows);
  const setSelectedCells = useStore3(store, (state) => state.setSelectedCells);
  const addInvalidCells = useStore3(store, (state) => state.addInvalidCells);
  const removeInvalidCells = useStore3(store, (state) => state.removeInvalidCells);
  const row = useStore3(store, (0, import_react170.useMemo)(() => (state) => state.rows[rowIndex], [rowIndex]));
  const editWithValue = useStore3(store, (0, import_react170.useMemo)(() => (state) => state.editWithValue, []));
  const isShiftPressed = useStore3(store, (0, import_react170.useMemo)(() => (state) => state.isShiftPressed, []));
  const isMetaKey = useStore3(store, (state) => state.isMetaKey);
  const isControlKey = useStore3(store, (state) => state.isControlKey);
  const {
    selectedCells,
    isLastSelected,
    isFirstSelected,
    isSelected
  } = useStore3(store, (0, import_react170.useMemo)(() => (state) => {
    const idx = Object.keys(state.selectedCellsMap).indexOf(cellIdx);
    return {
      selectedCells: state.selectedCells,
      isLastSelected: state.selectedCells.length - 1 === idx,
      isFirstSelected: idx === 0,
      isSelected: idx !== -1
    };
  }, [cellIdx]));
  const isEdited = useStore3(store, (0, import_react170.useMemo)(() => (state) => !!state.editedCellsMap[cellIdx], [cellIdx]));
  const invalidCell = useStore3(store, (0, import_react170.useMemo)(() => (state) => state.invalidCellsMap[cellIdx], [cellIdx]));
  const isValid2 = (0, import_react170.useMemo)(() => typeof validation === "function" ? validation(value) : true, [validation, value]);
  const isNextCellValid = (0, import_react170.useMemo)(() => typeof validation === "function" ? validation(nextRowValue) : true, [nextRowValue, validation]);
  (0, import_react170.useEffect)(() => {
    if (isValid2 && invalidCell) {
      removeInvalidCells([cell]);
    }
    if (!isValid2 && (!invalidCell || invalidCell.value !== cell.value)) {
      addInvalidCells([cell]);
    }
  }, [addInvalidCells, cell, isValid2, invalidCell, removeInvalidCells]);
  const handleAutoFilldblClick = (0, import_react170.useCallback)((event) => {
    event.stopPropagation();
    onFillFullColumn();
  }, [onFillFullColumn]);
  const handleClick = (0, import_react170.useCallback)(() => {
    if (isShiftPressed) {
      const lastSelected = selectedCells[selectedCells.length - 1];
      const fromIdx = lastSelected.rowIndex;
      const toIdx = cell.rowIndex;
      const rangeIdxs = Array.from({
        length: toIdx - fromIdx
      }, (_, index) => fromIdx + index + 1);
      const newCells = rangeIdxs.map((rowIndex2) => ({
        ...cell,
        columnIndex: lastSelected.columnIndex,
        rowIndex: rowIndex2
      }));
      setSelectedCells([...selectedCells, ...newCells]);
    } else {
      setSelectedRows([rowIndex]);
      setSelectedCells([cell]);
    }
  }, [cell, isShiftPressed, rowIndex, selectedCells, setSelectedCells, setSelectedRows]);
  const renderedValue = (0, import_react170.useMemo)(() => {
    if (typeof formatting === "function" && value !== "" && !Number.isNaN(value)) {
      return formatting(value);
    }
    return `${value}`;
  }, [formatting, value]);
  const renderedCell = (0, import_react170.useMemo)(() => {
    switch (type) {
      case "select":
        return import_react170.default.createElement(SelectEditor, {
          cell,
          isEditing,
          onBlur: handleBlur,
          onChange: handleChange,
          options
        });
      case "checkbox":
        return import_react170.default.createElement(CheckboxEditor, {
          cell,
          onBlur: handleBlur,
          onChange: handleChange,
          toggle: isEditing
        });
      case "modal":
        return import_react170.default.createElement(ModalEditor, {
          cell,
          formatting,
          isEditing
        });
      case "toggle":
        return import_react170.default.createElement(ToggleEditor, {
          rowId,
          toggle: isEditing
        });
      default:
        return isEditing && !disabled ? import_react170.default.createElement(TextEditor, {
          cell,
          initialValue: editWithValue,
          isControlKey,
          isEdited,
          isMetaKey,
          onBlur: handleBlur,
          onKeyDown: handleKeyDown
        }) : import_react170.default.createElement(Small, {
          color: disabled ? "secondary50" : "secondary70",
          ellipsis: true,
          title: renderedValue
        }, renderedValue);
    }
  }, [type, cell, handleBlur, handleChange, options, isEditing, formatting, rowId, disabled, editWithValue, isControlKey, isEdited, isMetaKey, handleKeyDown, renderedValue]);
  const renderedNote = (0, import_react170.useMemo)(() => {
    if (!notation) {
      return null;
    }
    const note = notation(value, row);
    if (!note) {
      return null;
    }
    return import_react170.default.createElement(Tooltip, {
      id: tooltipId,
      placement: "right",
      trigger: import_react170.default.createElement(CellNote, {
        color: note.color,
        role: "note"
      })
    }, note.description);
  }, [notation, row, tooltipId, value]);
  const renderedAutoFillHandler = (0, import_react170.useMemo)(() => {
    return isLastSelected ? import_react170.default.createElement(AutoFillHandler, {
      "aria-label": "Autofill handler",
      isVisible: !isAutoFillActive,
      onDoubleClick: handleAutoFilldblClick,
      onMouseDown: (event) => {
        event.stopPropagation();
        setSelectingActive(false);
        setBlockFillOut(false);
        setIsMouseDown(true);
      }
    }) : null;
  }, [handleAutoFilldblClick, isAutoFillActive, isLastSelected, setBlockFillOut, setIsMouseDown, setSelectingActive]);
  return import_react170.default.createElement(StyledCell, {
    isChild,
    isEdited,
    isFirstSelected,
    isLastChild,
    isLastSelected,
    isNextCellValid,
    isSelected,
    isValid: isValid2,
    onClick: handleClick,
    onDoubleClick: handleDoubleClick,
    onMouseDown: () => {
      handleClick();
      setSelectingActive(true);
      setBlockFillOut(true);
    },
    onMouseEnter: setHighlightedCell,
    onMouseUp: () => {
      setIsMouseDown(false);
      setSelectingActive(false);
    },
    type
  }, renderedCell, renderedAutoFillHandler, renderedNote);
};
var Cell = typedMemo(InternalCell);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/RowStatus/RowStatus.js
var import_react171 = __toESM(require_react());

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/RowStatus/styled.js
var Status = styled_components_browser_esm_default.td.withConfig({
  displayName: "styled__Status",
  componentId: "sc-1aacki0-0"
})(["background-color:", ";border-top:", ";box-sizing:border-box;min-width:", ";padding:0;width:", ";", " ", ";"], (_ref) => {
  let {
    theme: theme2
  } = _ref;
  return theme2.colors.secondary30;
}, (_ref2) => {
  let {
    theme: theme2
  } = _ref2;
  return `${theme2.helpers.remCalc(0.5)} solid ${theme2.colors.secondary30}`;
}, (_ref3) => {
  let {
    theme: theme2
  } = _ref3;
  return theme2.spacing.xxSmall;
}, (_ref4) => {
  let {
    theme: theme2
  } = _ref4;
  return theme2.spacing.xxSmall;
}, (_ref5) => {
  let {
    isInvalid
  } = _ref5;
  return isInvalid && Ae(["background-color:", ";border:", ";"], (_ref6) => {
    let {
      theme: theme2
    } = _ref6;
    return `${theme2.colors.danger}`;
  }, (_ref7) => {
    let {
      theme: theme2
    } = _ref7;
    return `${theme2.helpers.remCalc(0.5)} solid ${theme2.colors.danger}`;
  });
}, (_ref8) => {
  let {
    isSelected
  } = _ref8;
  return isSelected && Ae(["background-color:", ";border:", ";"], (_ref9) => {
    let {
      theme: theme2
    } = _ref9;
    return `${theme2.colors.primary}`;
  }, (_ref10) => {
    let {
      theme: theme2
    } = _ref10;
    return `${theme2.helpers.remCalc(0.5)} solid ${theme2.colors.primary}`;
  });
});
Status.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/RowStatus/RowStatus.js
var RowStatus = (0, import_react171.memo)((_ref) => {
  let {
    rowIndex
  } = _ref;
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const isSelected = useStore3(store, (0, import_react171.useMemo)(() => (state) => state.selectedRows.includes(rowIndex), [rowIndex]));
  const isInvalid = useStore3(store, (0, import_react171.useMemo)(() => (state) => state.invalidCells.some((invalidCell) => invalidCell.rowIndex === rowIndex), [rowIndex]));
  return import_react171.default.createElement(Status, {
    isInvalid,
    isSelected
  });
});

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Row/Row.js
var InternalRow2 = (_ref) => {
  let {
    columns,
    rowIndex
  } = _ref;
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const row = useStore3(store, (0, import_react172.useMemo)(() => (state) => state.rows[rowIndex], [rowIndex]));
  const nextRow = useStore3(store, (0, import_react172.useMemo)(() => (state) => state.rows[rowIndex + 1] || null, [rowIndex]));
  const expandableRows = useStore3(store, (0, import_react172.useMemo)(() => (state) => state.expandableRows, []));
  const isExpanded = useStore3(store, (0, import_react172.useMemo)(() => (state) => !state.hiddenRows.includes(row.id), [row.id]));
  const isDisabled = useStore3(store, (0, import_react172.useMemo)(() => (state) => state.disabledRows.includes(row.id), [row.id]));
  const parentId = (0, import_react172.useMemo)(() => {
    if (!expandableRows) {
      return;
    }
    const rowIds = Object.keys(expandableRows);
    return rowIds.find((rowId) => expandableRows[rowId].find((childId) => childId === row.id));
  }, [expandableRows, row.id]);
  const isChild = (0, import_react172.useMemo)(() => parentId !== void 0, [parentId]);
  const hasFormatting = (0, import_react172.useCallback)((column) => {
    return column.type === "text" || column.type === "number" || column.type === "modal";
  }, []);
  const isLastChild = (0, import_react172.useMemo)(() => expandableRows ? Object.values(expandableRows).reduce((accum, item) => [...accum, item[item.length - 1]], []).includes(row.id) : false, [expandableRows, row.id]);
  if (isChild && !isExpanded) {
    return null;
  }
  return import_react172.default.createElement("tr", null, import_react172.default.createElement(RowStatus, {
    rowIndex
  }), columns.map((column, columnIndex) => import_react172.default.createElement(Cell, {
    columnIndex,
    disabled: column.disabled || isDisabled,
    formatting: hasFormatting(column) ? column.formatting : void 0,
    hash: column.hash,
    isChild,
    isLastChild,
    key: `${rowIndex}-${columnIndex}`,
    nextRowValue: nextRow && nextRow[column.hash] || "",
    notation: column.notation,
    options: column.type === "select" ? column.config.options : void 0,
    rowId: row.id,
    rowIndex,
    type: column.type ?? "text",
    validation: column.validation,
    value: row[column.hash] ?? ""
  })));
};
var Row2 = typedMemo(InternalRow2);

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/styled.js
var Table2 = styled_components_browser_esm_default.table.withConfig({
  displayName: "styled__Table",
  componentId: "sc-16rzzpq-0"
})(["border-collapse:collapse;border-spacing:0;min-width:", ";table-layout:fixed;width:", ";&:focus{outline:none;}", ""], (_ref) => {
  let {
    minWidth,
    hasStaticWidth
  } = _ref;
  return minWidth && !hasStaticWidth ? `${minWidth}px` : "auto";
}, (_ref2) => {
  let {
    hasStaticWidth
  } = _ref2;
  return hasStaticWidth ? "auto" : "100%";
}, (_ref3) => {
  let {
    hasExpandableRows
  } = _ref3;
  return hasExpandableRows && Ae(["& > thead > tr{& > th:nth-of-type(2){padding-left:", ";}}& > tbody > tr{& > td:nth-of-type(3){padding-left:", ";}}"], (_ref4) => {
    let {
      theme: theme2
    } = _ref4;
    return theme2.spacing.xSmall;
  }, (_ref5) => {
    let {
      theme: theme2
    } = _ref5;
    return theme2.spacing.xSmall;
  });
});
Table2.defaultProps = {
  theme
};
var Header2 = styled_components_browser_esm_default.th.withConfig({
  displayName: "styled__Header",
  componentId: "sc-16rzzpq-1"
})(["border:", ";border-right-color:", ";box-sizing:border-box;color:", ";font-weight:", ";height:", ";overflow:hidden;padding:", ";text-align:", ";width:", ";"], (_ref6) => {
  let {
    theme: theme2
  } = _ref6;
  return `${theme2.helpers.remCalc(0.5)} solid ${theme2.colors.secondary30}`;
}, (_ref7) => {
  let {
    theme: theme2,
    columnType
  } = _ref7;
  return columnType === "toggle" ? `${theme2.colors.white}` : `${theme2.colors.secondary30}`;
}, (_ref8) => {
  let {
    theme: theme2
  } = _ref8;
  return theme2.colors.secondary60;
}, (_ref9) => {
  let {
    theme: theme2
  } = _ref9;
  return theme2.typography.fontWeight.semiBold;
}, (_ref10) => {
  let {
    theme: theme2
  } = _ref10;
  return theme2.helpers.remCalc(52);
}, (_ref11) => {
  let {
    theme: theme2
  } = _ref11;
  return `0 ${theme2.helpers.remCalc(17)}`;
}, (_ref12) => {
  let {
    columnType
  } = _ref12;
  if (columnType === "number") {
    return "right";
  }
  if (columnType === "checkbox") {
    return "center";
  }
  return "left";
}, (_ref13) => {
  let {
    columnWidth
  } = _ref13;
  return typeof columnWidth === "string" ? columnWidth : `${columnWidth}px`;
});
var StyledBox3 = styled_components_browser_esm_default(Box).withConfig({
  displayName: "styled__StyledBox",
  componentId: "sc-16rzzpq-2"
})(["overflow-x:scroll;"]);
Header2.defaultProps = {
  theme
};

// node_modules/@bigcommerce/big-design/dist/es/components/Worksheet/Worksheet.js
var InternalWorksheet = typedMemo((_ref) => {
  let {
    columns,
    expandableRows,
    defaultExpandedRows,
    disabledRows,
    items,
    minWidth,
    onChange,
    onErrors
  } = _ref;
  const tableRef = (0, import_react173.createRef)();
  const shouldBeTriggeredOnChange = (0, import_react173.useRef)(false);
  const {
    store,
    useStore: useStore3
  } = useWorksheetStore();
  const tooltipId = (0, import_react173.useId)();
  const setRows = useStore3(store, (state) => state.setRows);
  const setColumns = useStore3(store, (state) => state.setColumns);
  const setExpandableRows = useStore3(store, (state) => state.setExpandableRows);
  const setDisabledRows = useStore3(store, (state) => state.setDisabledRows);
  const setTableRef = useStore3(store, (state) => state.setTableRef);
  const resetInvalidCells = useStore3(store, (state) => state.resetInvalidCells);
  const rows = useStore3(store, (0, import_react173.useMemo)(() => (state) => state.rows, []));
  const editedCells = useStore3(store, (0, import_react173.useMemo)(() => (state) => state.editedCells, []));
  const invalidCells = useStore3(store, (0, import_react173.useMemo)(() => (state) => state.invalidCells, []));
  const {
    handleKeyDown,
    handleKeyUp
  } = useKeyEvents();
  const expandedColumns = (0, import_react173.useMemo)(() => {
    return expandableRows ? [{
      hash: "",
      header: "",
      type: "toggle",
      width: 32
    }, ...columns] : columns;
  }, [columns, expandableRows]);
  (0, import_react173.useEffect)(() => {
    shouldBeTriggeredOnChange.current = editedCells.length > 0;
  }, [editedCells]);
  (0, import_react173.useEffect)(() => {
    shouldBeTriggeredOnChange.current = false;
    resetInvalidCells();
    setRows([...items]);
  }, [items, resetInvalidCells, setRows]);
  (0, import_react173.useEffect)(() => setColumns(expandedColumns), [expandedColumns, setColumns]);
  (0, import_react173.useEffect)(() => setExpandableRows(expandableRows || {}, defaultExpandedRows || []), [expandableRows, defaultExpandedRows, setExpandableRows]);
  (0, import_react173.useEffect)(() => setDisabledRows(disabledRows || []), [disabledRows, setDisabledRows]);
  (0, import_react173.useEffect)(() => setTableRef(tableRef.current), [setTableRef, tableRef]);
  (0, import_react173.useEffect)(() => {
    if (editedCells.length && shouldBeTriggeredOnChange.current) {
      onChange(editedRows(editedCells, rows));
    }
  }, [editedCells, onChange, rows]);
  (0, import_react173.useEffect)(() => {
    if (typeof onErrors === "function" && invalidCells.length) {
      onErrors(invalidRows(invalidCells, rows));
    }
  }, [invalidCells, onErrors, rows]);
  const getRenderedTooltip = (0, import_react173.useCallback)((tooltip) => {
    if (typeof tooltip === "string" && tooltip.length > 0) {
      return import_react173.default.createElement(Tooltip, {
        id: tooltipId,
        placement: "right",
        trigger: import_react173.default.createElement(Box, {
          as: "span",
          marginLeft: "xxSmall"
        }, import_react173.default.createElement(BaselineHelpIcon, {
          "aria-describedby": tooltipId,
          size: "medium",
          title: "Hover or focus for additional context."
        }))
      }, tooltip);
    }
    return null;
  }, [tooltipId]);
  const renderedHeaders = (0, import_react173.useMemo)(() => import_react173.default.createElement("thead", null, import_react173.default.createElement("tr", null, import_react173.default.createElement(Status, null), expandedColumns.map((column, index) => import_react173.default.createElement(Header2, {
    columnType: column.type,
    columnWidth: column.width || "auto",
    key: index
  }, column.header, " ", getRenderedTooltip(column.tooltip))))), [expandedColumns, getRenderedTooltip]);
  const tableHasStaticWidth = (0, import_react173.useMemo)(() => expandedColumns.every((column) => column.width && typeof column.width === "number"), [expandedColumns]);
  const renderedRows = (0, import_react173.useMemo)(() => import_react173.default.createElement("tbody", null, rows.map((_row, rowIndex) => import_react173.default.createElement(Row2, {
    columns: expandedColumns,
    key: rowIndex,
    rowIndex
  }))), [expandedColumns, rows]);
  const renderedModals = (0, import_react173.useMemo)(() => expandedColumns.filter((column) => column.type === "modal").map((column, index) => import_react173.default.createElement(WorksheetModal, {
    column,
    key: index
  })), [expandedColumns]);
  return import_react173.default.createElement(UpdateItemsProvider, {
    items: rows
  }, import_react173.default.createElement(StyledBox3, null, import_react173.default.createElement(Table2, {
    hasExpandableRows: Boolean(expandableRows),
    hasStaticWidth: tableHasStaticWidth,
    minWidth,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    ref: tableRef,
    tabIndex: 0
  }, renderedHeaders, renderedRows)), renderedModals);
});
var WorksheetContext = (0, import_react173.createContext)(null);
var Worksheet = typedMemo((props) => {
  const store = (0, import_react173.useMemo)(() => createWorksheetStore(), []);
  return import_react173.default.createElement(WorksheetContext.Provider, {
    value: store
  }, import_react173.default.createElement(InternalWorksheet, props));
});

// node_modules/@bigcommerce/big-design/dist/es/managers/alerts/AlertsManager.js
var import_react174 = __toESM(require_react());
var AlertsManager = (_ref) => {
  let {
    manager
  } = _ref;
  const [alert, setAlert] = (0, import_react174.useState)(null);
  (0, import_react174.useEffect)(() => manager.subscribe(setAlert), [manager]);
  return alert ? import_react174.default.createElement(Alert, alert) : null;
};

// node_modules/@bigcommerce/big-design/dist/es/managers/alerts/manager.js
var AlertsManager2 = class {
  constructor() {
    __publicField(this, "alerts", []);
    __publicField(this, "counter", 0);
    __publicField(this, "subscribers", []);
    __publicField(this, "timeout", {});
    __publicField(this, "typeMap", {
      error: 0,
      warning: 1,
      success: 2,
      info: 3
    });
    __publicField(this, "add", (alert) => {
      if (alert.key && this.containsKey(alert.key)) {
        this.remove(alert.key);
      }
      const key = alert.key === void 0 ? this.getUniqueId() : alert.key;
      const onClose = () => {
        if (typeof alert.onClose === "function") {
          alert.onClose();
        }
        this.remove(key);
      };
      const newAlert = {
        ...alert,
        key,
        onClose
      };
      this.alerts = this.alerts.concat([newAlert]).sort(this.sortAlerts);
      this.afterEvent();
      return key;
    });
    __publicField(this, "clear", () => {
      const removed = this.alerts;
      this.alerts = [];
      this.afterEvent();
      return removed;
    });
    __publicField(this, "remove", (key) => {
      let removed;
      this.alerts = this.alerts.reduce((acc, alert) => {
        if (alert.key === key) {
          removed = alert;
          return acc;
        }
        return [...acc, alert];
      }, []);
      this.afterEvent();
      return removed;
    });
    __publicField(this, "subscribe", (subscriber) => {
      this.subscribers.push(subscriber);
      return () => {
        this.subscribers = this.subscribers.filter((sub) => sub !== subscriber);
      };
    });
    __publicField(this, "sortAlerts", (a3, b2) => {
      return this.typeMap[a3.type] - this.typeMap[b2.type];
    });
  }
  afterEvent() {
    this.manageTimeout();
    this.notifySubscribers();
  }
  manageTimeout() {
    var _a;
    const alert = this.alerts[0] ?? null;
    if (((_a = this.timeout) == null ? void 0 : _a.key) === (alert == null ? void 0 : alert.key)) {
      return;
    }
    if (this.timeout) {
      window.clearTimeout(this.timeout.id);
      this.timeout = {};
    }
    if (alert == null ? void 0 : alert.autoDismiss) {
      this.timeout.key = alert.key;
      this.timeout.id = window.setTimeout(alert.onClose, 5e3);
    }
  }
  notifySubscribers() {
    this.subscribers.forEach((subscriber) => subscriber(this.alerts[0] ?? null));
  }
  getUniqueId() {
    this.counter += 1;
    return `alert-${this.counter}`;
  }
  containsKey(key) {
    return !!this.alerts.find((alert) => alert.key === key);
  }
};
var createAlertsManager = () => new AlertsManager2();
export {
  AccordionPanel,
  Alert,
  AlertsManager,
  Badge,
  Box,
  Button,
  ButtonGroup,
  Checkbox,
  CheckboxLabel,
  Chip,
  Collapse,
  Counter,
  Datepicker,
  Dropdown,
  Fieldset,
  FieldsetDescription,
  FieldsetLegend,
  Flex,
  FlexItem,
  Form,
  FormControlDescription,
  FormControlError,
  FormControlLabel,
  FormGroup,
  GlobalStyles,
  Grid,
  GridItem,
  H0,
  H1,
  H2,
  H3,
  H4,
  HR,
  InlineMessage,
  Input,
  Link,
  Message,
  Modal,
  MultiSelect,
  Pagination,
  Panel,
  PillTabs,
  Popover,
  ProgressBar,
  ProgressCircle,
  Radio,
  RadioLabel,
  Search,
  Select,
  Small,
  StatefulTable,
  StatefulTree,
  Stepper,
  Switch,
  Table,
  TableFigure,
  Tabs,
  Text,
  Textarea,
  Timepicker,
  Tooltip,
  Worksheet,
  createAlertsManager,
  excludeMarginProps,
  excludePaddingProps,
  useAccordionPanel,
  withDisplay,
  withMargins,
  withPaddings
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 7.5.2
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@bigcommerce_big-design.js.map
